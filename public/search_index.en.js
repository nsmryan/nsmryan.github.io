window.searchIndex = {"fields":["title","body"],"pipeline":["trimmer","stopWordFilter","stemmer"],"ref":"id","version":"0.9.5","index":{"body":{"root":{"docs":{},"df":0,"0":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":8,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"1":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"5":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"1":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0}},"df":1},"2":{"docs":{},"df":0,"/":{"docs":{},"df":0,"2":{"docs":{},"df":0,"3":{"docs":{},"df":0,"/":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"9":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0}},"df":1}}}}}}}}},"6":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.4142135623730951}},"df":1},"s":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0}},"df":1}},"1":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":12,"0":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":6,"0":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":3,"0":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"k":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}},"1":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0}},"df":1},"2":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":2},"4":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3},"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"3":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951}},"df":1}}},"j":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1},"k":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"6":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0}},"df":1},"k":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}},"2":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":9,"0":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1,"1":{"docs":{},"df":0,"2":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1},"4":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}},"k":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}},"2":{"docs":{},"df":0,"0":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"5":{"docs":{},"df":0,":":{"docs":{},"df":0,"0":{"docs":{},"df":0,"3":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}}}},"6":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1},"7":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1},"8":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1},"9":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}},"3":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":7,"0":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2},"2":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1},"d":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951}},"df":1}},"4":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":5,"0":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2,"j":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1},"k":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}},"8":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":1}},"5":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2,"5":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0}},"df":1,"g":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}},"6":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":3,".":{"docs":{},"df":0,"7":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979}},"df":2}},"4":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}},"7":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"0":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0}},"df":1}},"5":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"8":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":3},"9":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1},"_":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"_":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772}},"df":1},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"_":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":1}}}}},"a":{"docs":{},"df":0,",":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1}},"b":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951}},"df":1,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":6,"i":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":9}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0}},"df":4}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":4.898979485566356},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":4.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.3166247903554}},"df":16}}}}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":9}},"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":11}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}}}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":3}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":5}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":4}}},"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}},"k":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":1},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":9,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":11}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":10}}}}},"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":16,"a":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}},"q":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951}},"df":1}}},"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":19,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":15}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":3}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}},"o":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":2}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":12}},"g":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":2}}}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":12,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":10}}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}},"o":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2},"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}}},"k":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":1}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":6}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":4.47213595499958},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":4.242640687119285},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":4.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.8284271247461903}},"df":16,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1},"g":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":9,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":26}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":11}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":6}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,",":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":7}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":14}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":21}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"z":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":5,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}},"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":15}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{},"df":0,"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/ccsds-router/":{"tf":2.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":29}}},"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":3}}}},"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951}},"df":10}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":7}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":4,"'":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1},"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":2.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":6}},"p":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":5.196152422706632},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":6,"'":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.7320508075688772}},"df":1},"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":5}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":10,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":14,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":10}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6}}},"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1,"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":4.242640687119285},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":12}}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1}}},"v":{"docs":{"https://nsmryan.github.com.com/archive/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":2},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":2}}}},"g":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":9}}}}},"v":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}},"m":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2,"v":{"docs":{},"df":0,"7":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":15}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3}},"y":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6,"/":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772}},"df":2}}},"t":{"docs":{"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":4},"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0}},"df":1}}},"k":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":4},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":9}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}}},"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":6}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":2}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":4,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.449489742783178}},"df":2}}},"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":7}}},"t":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":2}}}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":4}}}}}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":8}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0}},"df":1}}}}}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0}},"df":8,"a":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}}}}},"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":17}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":14}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4},"y":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0}},"df":3}}}},"k":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":2,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":2}}}}}},"x":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}},"b":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":7,"'":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":11,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772}},"df":1}}}}}},"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":10,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}}},"r":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":2.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2,"e":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":3}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":12,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}},"h":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":1},"i":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":10}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2}}}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":16,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":11}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":20,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":2}}}}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":3}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2,"'":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":8}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":4}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":6}}},"o":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":3}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}}}}},"d":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":5}}}}},"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":15}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":15}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":23}}}}},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":4}}}}},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"g":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.449489742783178}},"df":3,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":2},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":3}}}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":9}}},"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":8,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":2}}}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":16,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":13}},"g":{"docs":{"https://nsmryan.github.com.com/":{"tf":1.0},"https://nsmryan.github.com.com/first-post/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":12},"w":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951}},"df":1}}},"n":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":5}}},"g":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.449489742783178}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":3,"u":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":19},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0}},"df":4}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":3}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":3},"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1},"r":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1}},"u":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":5.196152422706632},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":8,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":2.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.0}},"df":11},"s":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/this-blog/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":18,".":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951}},"df":1}},"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"1":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":11}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}},"d":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":5,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}}},"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1}}}},"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":4.69041575982343},"https://nsmryan.github.com.com/cello/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":4.898979485566356},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":6.244997998398398}},"df":25,"'":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2},"/":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":8}},"1":{"docs":{},"df":0,"1":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":2}},"]":{"docs":{},"df":0,"[":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":2}}},"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951}},"df":2}},"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0}},"df":8,"u":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}}}},"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":5.744562646538029},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/just-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":25,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":5}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0}},"df":1,"r":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":1}}},"p":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":14}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}},"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6}},"c":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":3}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":6,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":3}}}}}},"g":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":5,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}}}},"v":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":4.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":3.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.6457513110645907}},"df":27},"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":6}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1,"h":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":1}},"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2}}},"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":7},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}}},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":3.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":8,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"x":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.0}},"df":4,"o":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":4},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2}}}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":26,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.8284271247461903}},"df":14}}}}}}}},"f":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":4.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":6.164414002968976},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":11,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951}},"df":8,"'":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1},"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5,"s":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1},"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}}}}},"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}},"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"b":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"s":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"b":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"b":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"v":{"docs":{},"df":0,"m":{"docs":{},"df":0,"s":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}}}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":2}}}},"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951}},"df":1}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":3}}}}},"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2},"e":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1},"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":4.58257569495584},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":21},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}},"r":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.3166247903554}},"df":2,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":4.123105625617661}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0}},"df":1}}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":19,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":4}}}}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.8284271247461903}},"df":14}},"o":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":3,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0}},"df":1,"n":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951}},"df":1},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}},"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0}},"df":1}}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":9,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1},"f":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":9,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"o":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1,"c":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1,"k":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178}},"df":1}},"j":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":7,"r":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}},"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":2,"d":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":4.58257569495584},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":4.47213595499958},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":5.916079783099616}},"df":35,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":8}}}}},"g":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":7,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":4,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772}},"df":1}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":2}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/first-post/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":14}}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":23,"r":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":4.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/just-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":4.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":5.385164807134504},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":19,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":3}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951}},"df":2}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":12,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":5}}}},"u":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":18,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"/":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0}},"df":1}}}}}}}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.23606797749979}},"df":1}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":11},"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":7}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772}},"df":1}}}},"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0}},"df":9},"x":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":4.0}},"df":26}},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1},"x":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":11,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":7,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":3.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":13}}}},"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951}},"df":5,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951}},"df":2}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":3.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.0}},"df":22,"u":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":10}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}},"s":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":21}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":2}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":3}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":5}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3},"g":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1,"u":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":18}}},"n":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2},"r":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1},"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":4}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":3,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2,"t":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951}},"df":1}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":17,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":6}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":15}}},"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.1622776601683795}},"df":1,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":2,"t":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":7,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":3}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":16}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2},"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":7}},"x":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":6}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":10}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1,"t":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951}},"df":3,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":18}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":4}},"r":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1},"t":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":2,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":6},"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.23606797749979}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":8},"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}}},"q":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/lua-tables/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":14},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772}},"df":1}},"u":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":5.291502622129181},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":9,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":2}}}},"l":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772}},"df":5}}}}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":6.557438524302},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":5}}}}},"s":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":2}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.6457513110645907}},"df":8,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}}},"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951}},"df":2}}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0}},"df":7,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":3}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":3.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":5.291502622129181},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":18}},"r":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":11}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0}},"df":2}}}}},"p":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":6,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3}}}}}}},"c":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":4,"3":{"docs":{},"df":0,"2":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":25,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"/":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.449489742783178}},"df":1}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":7}}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":4,"o":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772}},"df":3}}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}}}}},"p":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-post/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":17}}},"i":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":4,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0}},"df":1}}}}}}}}}}}},"v":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":5}}}},"t":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":3}},"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":5}},"g":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":4.242640687119285},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":4.795831523312719},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":4.242640687119285},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":2.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":4.47213595499958},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":4.47213595499958},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":4.0},"https://nsmryan.github.com.com/generic-c/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/interests/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":3.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":4.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":6.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":4.242640687119285},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":34,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}},"e":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"y":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":9}},"e":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1},"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":14,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":2}}}}},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":6,"g":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":2}}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":7},"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":5}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":2},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":5}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}}},"f":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":4.69041575982343},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":19,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":13}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":2}},"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1},"v":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1},"k":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":4.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0}},"df":24,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":5}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951}},"df":8},"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772}},"df":7}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979}},"df":2},"t":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1},"v":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":4.47213595499958},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.449489742783178}},"df":16}},"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3}},"k":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}}},"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":12}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":4.795831523312719},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":7}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":15,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2}}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":19,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":5.0}},"df":5,"e":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}}}}}}},"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":9}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":3.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":26,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}},"r":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":14,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":3.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":13,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951}},"df":14}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":2.0}},"df":11}}}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":3}}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":3}}}}},"o":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951}},"df":3}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":9}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772}},"df":3}},"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":4}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":5}},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":3}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951}},"df":7}}}}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2}}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1},"o":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":18,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}},"c":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":13}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":12}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.6457513110645907}},"df":9}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.3166247903554}},"df":26}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":20,"'":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951}},"df":1}}},"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":4},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":3},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":16,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":2}}}}}},"x":{"docs":{},"df":0,"y":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}}},"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}}},"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0}},"df":5,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":3}}}},"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":7}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":2}},"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":3},"w":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":2}}}},"s":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":1}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":7},"m":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":9}}},"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":9}}}}},"e":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":3.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":4.242640687119285},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":26}},"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":3}},"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":22,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":17},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":10}}}}},"c":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":7}}}}}}}},"d":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5},"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772}},"df":3,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772}},"df":3}}}},"n":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":3}}}}},"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951}},"df":1}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":15}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":7}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":4.795831523312719},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951}},"df":4,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}},"m":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":2.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.7320508075688772}},"df":8},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":2}}}}}}},"m":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":19}}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":4}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0}},"df":6},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":16,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}},"f":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1,"c":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":4}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":6}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0}},"df":1}}}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":6}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":19}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":9}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}},"i":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":7},"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772}},"df":2}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3}}}},"v":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1,"n":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":6,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}},"n":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951}},"df":3,"i":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}},"t":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":2}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":2}}}}}},"r":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.3166247903554}},"df":2,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":5.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":10}}}},"s":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":19}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":11}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951}},"df":1}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":3}}}},"t":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":1,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":12,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"2":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":3,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/generic-c/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":27,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":8.888194417315589},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":7,"u":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1}},"y":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":10}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.7320508075688772}},"df":2,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}}}}},"v":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":3}}}},"x":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":10}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":31}}}},"c":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2}},"l":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.6457513110645907}},"df":1},"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":5}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1},"s":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":12}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":9}},"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1}},"o":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":16}},"n":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}},"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":24,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":6,"i":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":6,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951}},"df":4}}}},"t":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772}},"df":9}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.0}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}},"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951}},"df":6,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":6}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":10},"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":9},"t":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":5}}},"r":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":12,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":4}}},"e":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}}}}}}}},"f":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.8284271247461903}},"df":2,"'":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":3}}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":5,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951}},"df":6}}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":11,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}}},"r":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":15}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4},"s":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.0}},"df":1}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":3}}}}}},"n":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2,"c":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":2}},"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":12},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2}}},"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.23606797749979}},"df":7,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":8},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2}}}}},"t":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":3},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":4}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951}},"df":2}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":17}}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":2},"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.0}},"df":10}},"l":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":4}},"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}},"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":3},"t":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":2.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":9}}},"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":6}}},"l":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/ccsds-router/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":4.47213595499958},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":5.5677643628300215},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/vim-plugins/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":25,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":6},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":3}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":6}},"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":3.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":24},"e":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":7},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":4,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951}},"df":4}},"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1},"m":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/first-post/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":27}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":10},"x":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":2.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":10}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":5},"n":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}},"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951}},"df":9}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":5.477225575051661},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.1622776601683795}},"df":16}}},"p":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/floating-bar/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":3}},"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951}},"df":1}},"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2},"r":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}},"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":4},"y":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":1}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}},"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":6,"u":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}},"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3},"e":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"g":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1,"o":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":15,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":3},"t":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":7}},"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1,"a":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951}},"df":2}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951}},"df":4}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":7}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":21}},"r":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0}},"df":2}}}}},"p":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772}},"df":2},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.4142135623730951}},"df":1}}}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6}}}}}}},"e":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":3,"d":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0}},"df":1},"t":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":6}}}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":2}}}}}},"o":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":2}}},"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8,"i":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}},"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":11,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":8.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":3.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":8.06225774829855},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":4.69041575982343},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.4641016151377544}},"df":31}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":4}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":2}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":9}}},"z":{"docs":{},"df":0,"z":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2}}}}},"g":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":3,"a":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":3.1622776601683795}},"df":1,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}},"m":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-games/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":2.0}},"df":6,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/generic-c/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0}},"df":24,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.449489742783178}},"df":2}},"r":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}},"o":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.449489742783178}},"df":2,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":18,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}}}}}}}},"g":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"2":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":2}},"i":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":2.0}},"df":1},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-post/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":11}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0}},"df":23,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0}},"df":12}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8}}}}},"n":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"h":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":27,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951}},"df":3}},"b":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":7},"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2},"z":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"z":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":26},"g":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":3}}}}},"p":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":3,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0}},"df":1}}}}}}}}}}}},"y":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1,"'":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":17,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.7320508075688772}},"df":2}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":10,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":2}}}}}},"p":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":6}},"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0}},"df":2,"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.23606797749979}},"df":2,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":6,"d":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":2}},"y":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"_":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"h":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":2,"a":{"docs":{},"df":0,"k":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/first-post/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":2.0}},"df":2}}},"l":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1,"f":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1},"v":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}},"m":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772}},"df":1},"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":7,"i":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1},"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":9.797958971132712},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":15,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}}}}}}}},"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":17}},"i":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":3,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":15,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.7320508075688772}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":18,"e":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1},".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":23,"l":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772}},"df":1}}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}}},"t":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951}},"df":1,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":13,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":11}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":15}}},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":4}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2},"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":22}},"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-post/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":34},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}},"x":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0}},"df":1}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":4}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}}},"g":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":16,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178}},"df":9},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":4,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0}},"df":2}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":2}},"k":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":2}}}}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6}},"m":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":2},"p":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":19,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":8}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951}},"df":3},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":4}}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"m":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"5":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.4142135623730951}},"df":1},"6":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"0":{"docs":{},"df":0,"4":{"docs":{},"df":0,"6":{"docs":{},"df":0,"5":{"docs":{},"df":0,"0":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"/":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"0":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"k":{"docs":{},"df":0,"n":{"docs":{},"df":0,"z":{"docs":{},"df":0,"x":{"docs":{},"df":0,"l":{"docs":{},"df":0,"7":{"docs":{},"df":0,"q":{"docs":{},"df":0,"1":{"docs":{},"df":0,"j":{"docs":{},"df":0,"0":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"8":{"docs":{},"df":0,"q":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"w":{"docs":{},"df":0,"d":{"docs":{},"df":0,"q":{"docs":{},"df":0,"/":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"y":{"docs":{},"df":0,"y":{"docs":{},"df":0,"r":{"docs":{},"df":0,"2":{"docs":{},"df":0,"f":{"docs":{},"df":0,"c":{"docs":{},"df":0,"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{},"df":0,"f":{"docs":{},"df":0,"s":{"docs":{},"df":0,"q":{"docs":{},"df":0,"q":{"docs":{},"df":0,"f":{"docs":{},"df":0,"b":{"docs":{},"df":0,"w":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"1":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"k":{"docs":{},"df":0,"1":{"docs":{},"df":0,"y":{"docs":{},"df":0,"k":{"docs":{},"df":0,"z":{"docs":{},"df":0,"c":{"docs":{},"df":0,"z":{"docs":{},"df":0,"c":{"docs":{},"df":0,"v":{"docs":{},"df":0,"2":{"docs":{},"df":0,"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"/":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"?":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"=":{"docs":{},"df":0,"0":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"=":{"docs":{},"df":0,"0":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"=":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"9":{"docs":{},"df":0,"g":{"docs":{},"df":0,"4":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"r":{"docs":{},"df":0,"7":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"6":{"docs":{},"df":0,"k":{"docs":{},"df":0,"z":{"docs":{},"df":0,"c":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"n":{"docs":{},"df":0,"q":{"docs":{},"df":0,"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"w":{"docs":{},"df":0,"/":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"g":{"docs":{},"df":0,"c":{"docs":{},"df":0,"w":{"docs":{},"df":0,"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"u":{"docs":{},"df":0,"k":{"docs":{},"df":0,"x":{"docs":{},"df":0,"8":{"docs":{},"df":0,"8":{"docs":{},"df":0,"w":{"docs":{},"df":0,"z":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"6":{"docs":{},"df":0,"8":{"docs":{},"df":0,"q":{"docs":{},"df":0,"z":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"1":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"1":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"f":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"w":{"docs":{},"df":0,"/":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}},"z":{"docs":{},"df":0,"n":{"docs":{},"df":0,"y":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"7":{"docs":{},"df":0,"k":{"docs":{},"df":0,"j":{"docs":{},"df":0,"6":{"docs":{},"df":0,"p":{"docs":{},"df":0,"b":{"docs":{},"df":0,"q":{"docs":{},"df":0,"q":{"docs":{},"df":0,"5":{"docs":{},"df":0,"h":{"docs":{},"df":0,"8":{"docs":{},"df":0,"l":{"docs":{},"df":0,"g":{"docs":{},"df":0,"9":{"docs":{},"df":0,"z":{"docs":{},"df":0,"c":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"/":{"docs":{},"df":0,"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"/":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"?":{"docs":{},"df":0,"v":{"docs":{},"df":0,"=":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"x":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"c":{"docs":{},"df":0,"9":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":15}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":4}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2}},"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}},"y":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"'":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}},"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":29},"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/generic-c/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":32}},"6":{"docs":{},"df":0,"8":{"docs":{},"df":0,"6":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}},"a":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.4142135623730951}},"df":1}}},"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":9,"e":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":24,"l":{"docs":{"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":4}},"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":4,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0}},"df":6}}}}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":2}},"e":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1},"f":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}}},"g":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":6}}}},"i":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.7320508075688772}},"df":2}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":5.291502622129181},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":4,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":11}}}},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951}},"df":2}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":9}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":4}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1,"i":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.449489742783178}},"df":1,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772}},"df":2,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":4.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":7.54983443527075},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":5.291502622129181},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":27,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}},"t":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":3,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":5,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0}},"df":2}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":14}},"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":21}}},"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":2,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":2}}}}}}},"d":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":4}}}}}},"u":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1},"r":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":2}}}}}}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"x":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6}},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":12,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":4.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":7}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951}},"df":3}}}}},"o":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1,"r":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/generic-c/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178}},"df":18}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}}}}}}}}},"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.23606797749979}},"df":1}}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":2}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":2,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":11}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":11}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772}},"df":2}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":2},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979}},"df":5}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":3}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772}},"df":4},"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":11}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3}}}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":4.123105625617661}},"df":5,"1":{"docs":{},"df":0,"6":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":6,"r":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":10}},"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":9},"s":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":2}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3}}}},"r":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":11}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":31,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3}}}}}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":5.744562646538029},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":2.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":6.928203230275509},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":6.48074069840786},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":18,"e":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}}},"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":5,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":4}}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.3166247903554}},"df":4}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":10,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":5}}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":4,"i":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":11}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}},"o":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951}},"df":1}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":10}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":8},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.23606797749979}},"df":1}}}}}},"r":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.8284271247461903}},"df":1,"'":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"s":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":2,"u":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":11}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":3},"r":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":17}}}}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}},"j":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":2,"'":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"j":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772}},"df":1,",":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":2},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":1}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":3}}}}}},"s":{"docs":{},"df":0,"m":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":3}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/just-rust/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}}}}},"k":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":2,"'":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":18}},"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772}},"df":2}}}},"y":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.8284271247461903}},"df":6,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":2}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":3.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":25}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":3}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":29,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":10}}}},"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":4}}}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}},"l":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":2}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":6}}}}}}},"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":5}},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":3}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}},"p":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":2}}}}},"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":3.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":2.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":5.744562646538029}},"df":22}}}}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":4}}}},"r":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":16,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":13},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":12}},"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":2,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4},"t":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":5}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}}}}}},"x":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1},"y":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907}},"df":7}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0}},"df":3}}}},"z":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":16,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772}},"df":1}}},"r":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":13}},"v":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}},"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1},"f":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":14}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.8284271247461903}},"df":3,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1},"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.449489742783178}},"df":6}}},"s":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2}},"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":13,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951}},"df":2}}}},"t":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":6,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":21},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/cello/":{"tf":2.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":3.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":19}},"y":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}},"f":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1},"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}}}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"y":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":3.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":17}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":5.916079783099616},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":13,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}}},"k":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772}},"df":8},"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/first-post/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":2.0}},"df":3}},"u":{"docs":{},"df":0,"x":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":8,".":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}},"_":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":3},"t":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":16,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":21}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2}}},"k":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":5}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":10},"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0}},"df":6}},"k":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":8.717797887081348},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.6457513110645907}},"df":17,"(":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2}},".":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772}},"df":1}},"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772}},"df":1}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0}},"df":1}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0}},"df":1}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":4.242640687119285}},"df":1}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}},"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0}},"df":1},"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"*":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}},"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":4.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951}},"df":7}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.8284271247461903}},"df":1}}}},"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"s":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979}},"df":1,".":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772}},"df":1,"(":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"*":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":15,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":6}}}},"o":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":31,"u":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2}}},"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5},"s":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951}},"df":2}},"s":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":4},"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":2}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":2.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":27},"u":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":7}},"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":12,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":8}}}},"s":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951}},"df":1,";":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"u":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":5,"'":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1},"j":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}},"m":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":3,"^":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}},"a":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":12}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":16}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":18,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}}}}},"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}},".":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2}},"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2}},"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":4}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/just-rust/":{"tf":2.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.3166247903554}},"df":31,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0}},"df":2}}},"r":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":2}}},"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":17},"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}},"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":28,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":7}}}},"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":11,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.7320508075688772}},"df":9}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":2}}},"h":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":4}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}}},"x":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2}}}}},"y":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}},"z":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}},"b":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1},"c":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":23,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":14,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1},"u":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772}},"df":1}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"z":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":18}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":7,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":10}}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":7.211102550927978},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":4.69041575982343},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":4.242640687119285},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":4.123105625617661}},"df":15,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}},"t":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951}},"df":2,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951}},"df":1}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":6}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":2}}}}}}}}},"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":5,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1}}}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":6},"e":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":3,"u":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}},"u":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":2,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772}},"df":1}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":6,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772}},"df":4}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":6}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2}}},"x":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951}},"df":5,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3}}}}},"l":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0}},"df":1}},"d":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0}},"df":6,"l":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3},"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1,"n":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":4,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":7}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":9.273618495495704},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":8.06225774829855},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":6.164414002968976},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":5.5677643628300215},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":6.48074069840786},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":3.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":6.6332495807108},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":15,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979}},"df":2}},"e":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0}},"df":4},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951}},"df":1}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772}},"df":9}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":2}}}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":4.242640687119285},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":4.0}},"df":38}},"s":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":9}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":3}},"v":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":4}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}},"s":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0}},"df":2}},"v":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":6.708203932499369},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":20,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":4.58257569495584}},"df":1}}}}}}},"q":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}},"s":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772}},"df":1}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1}}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}}},"q":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}},"v":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":2.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":30}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951}},"df":1}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":16}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":5.0990195135927845}},"df":1}},"e":{"docs":{},"df":0,"x":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":4}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6}}}}}},"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":4,"*":{"docs":{},"df":0,"p":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}},"/":{"docs":{},"df":0,"2":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1},"4":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1},"8":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1},"v":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":18,"d":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951}},"df":2}}}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":8,"'":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":3}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":7}}},"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951}},"df":8}}}}}}}},"o":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":4.795831523312719},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":31}},"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951}},"df":3}}}}}},"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":2.0}},"df":2}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772}},"df":6,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":13}}},"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":3.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/first-post/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.6457513110645907}},"df":28,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}},"x":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":14}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.449489742783178}},"df":22,"r":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}},"h":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772}},"df":1},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951}},"df":1}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0}},"df":2}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":1}}}}}}},"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1}}}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":2}},"h":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0}},"df":1}},"m":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0}},"df":2,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0}},"df":8,"e":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":7}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":17},"h":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":5},"f":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1,"i":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0}},"df":1}}},"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":21}},"u":{"docs":{},"df":0,"k":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/floating-bar/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":26}}}}},"v":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"j":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0}},"df":12}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3}}}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":11,"r":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":4}}}}},"d":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":2}},"f":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951}},"df":2}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951}},"df":1},"k":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":2,"a":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":4}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}},"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":4.47213595499958},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/generic-c/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/lua-games/":{"tf":2.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":3.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.8284271247461903}},"df":38,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":3}}}}},"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":15},"e":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":3}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-plugins/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":12,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"/":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":26}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":2}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}},"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":1},"m":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":11,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}},"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":3}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":13}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951}},"df":4}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":2}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":5}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":6,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8,"'":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":8}}}}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":36,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":8}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":23,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":6}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":6}}}},"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1},"y":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.7320508075688772}},"df":1}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772}},"df":6,"*":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951}},"df":1}}}}},"n":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.6457513110645907}},"df":1,"*":{"docs":{},"df":0,"*":{"docs":{},"df":0,"p":{"docs":{},"df":0,"m":{"docs":{},"df":0,"*":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"(":{"docs":{},"df":0,"1":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1,")":{"docs":{},"df":0,"*":{"docs":{},"df":0,"p":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}}}}}}}}},"p":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}},":":{"docs":{},"df":0,"s":{"docs":{},"df":0,",":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"$":{"docs":{},"df":0,",":{"docs":{},"df":0,".":{"docs":{},"df":0,"x":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"3":{"docs":{},"df":0,"x":{"docs":{},"df":0,",":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,",":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"$":{"docs":{},"df":0,",":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,",":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,",":{"docs":{},"df":0,".":{"docs":{},"df":0,"x":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"3":{"docs":{},"df":0,"x":{"docs":{},"df":0,"$":{"docs":{},"df":0,",":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":9}},"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":4.795831523312719},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":16,"'":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1},"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":3}},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1},"n":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4},"r":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.7320508075688772}},"df":3}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0}},"df":1}}}}}}},"s":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":7,"e":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}},"r":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0}},"df":2}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":25,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":9}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"l":{"docs":{"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.7320508075688772}},"df":1},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":26,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":5}}}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":12},"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":2}},"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":12},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":3}}}}},"y":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951}},"df":3,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":2.0}},"df":3,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1}}}}}}},"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2}}}}},"c":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.6457513110645907}},"df":2}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951}},"df":9,"e":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":6,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/just-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":21,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":19}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.23606797749979}},"df":5,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2}}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":1},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}},"d":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":11}},"n":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":2}},"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}},"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.4142135623730951}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.6457513110645907}},"df":25}},"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2}},"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":4,"e":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3,"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}}}}}}}},"y":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":7,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":2}}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0}},"df":1}},"u":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":4,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":3.1622776601683795}},"df":3,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}}}}}}}},"m":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951}},"df":1},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":18,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":2.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":5.0990195135927845},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":12}}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2},"y":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951}},"df":1}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":2.0}},"df":3}}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":2}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.7320508075688772}},"df":2,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951}},"df":2}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":2.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":6},"x":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772}},"df":2}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}}}},"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":21}}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-post/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":35}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":9}}}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.8284271247461903}},"df":10,"p":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":11}}}}},"e":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":4,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}},"s":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951}},"df":4}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":4}},"i":{"docs":{},"df":0,"x":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951}},"df":2}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1},"u":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2},"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":5}},"t":{"docs":{"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0}},"df":1}},"s":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":3,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":9}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":9}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-post/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":7,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":5},"y":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951}},"df":1}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":7}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":5}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178}},"df":4,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.23606797749979}},"df":1}}}},"f":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0}},"df":2,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":5.0990195135927845}},"df":3}}}}},"s":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}},"o":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951}},"df":4,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":7}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":19}}}},"c":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":2,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":20,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":7}}}}}},"d":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1,"u":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":3.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":15,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":4.58257569495584},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":12,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2}},"l":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":2}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":1}}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":33,"'":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0}},"df":1}},"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":6}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/just-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.0}},"df":30}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772}},"df":1}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8}}}},"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.8284271247461903}},"df":3}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772}},"df":6}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0}},"df":3}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":4.898979485566356},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":5.5677643628300215},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":4.795831523312719},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":23}}},"x":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":5}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":2}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":2}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":5},"s":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":4.58257569495584},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772}},"df":8},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0}},"df":3}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":18}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":7}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.4142135623730951}},"df":2,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951}},"df":1}}}}},"u":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":4.898979485566356}},"df":11}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":9,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":9}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"z":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0}},"df":1}}},"t":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":10}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":3.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.1622776601683795}},"df":1}},"o":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1},"x":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}},"m":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2},"n":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0}},"df":6,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0}},"df":2}}}}},"g":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6},"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":6,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772}},"df":7},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0}},"df":1}}}},"w":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":4}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":11,")":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":6},"t":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178}},"df":16,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":2}},"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":5}},"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":12,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}},"z":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":6}},"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":10}},"m":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":20}}}},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":2}},"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0}},"df":15,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":18}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951}},"df":2}}},"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":5}}}},"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951}},"df":11}},"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":3}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":2}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0}},"df":1}}},"u":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":9,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0}},"df":1,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.8284271247461903}},"df":4,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772}},"df":2}}}}}}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0}},"df":8}},"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":1}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":6}}}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":9,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":2}}},"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":3.872983346207417}},"df":1,"i":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":2}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772}},"df":2}}}},"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":7,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":2}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}}}},"x":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":7}},"v":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}},"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4},"e":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":6}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0}},"df":3}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":3}},"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8},"y":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":2.0}},"df":1}}},"o":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":3,"r":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772}},"df":13}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":8}}}}}}},"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":5}}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":2.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":7,"/":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":25}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772}},"df":1}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":3}}}},"r":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":3}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":10,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":1},"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951}},"df":4,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":9,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":20,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":4}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":7}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":5.385164807134504},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":4.0}},"df":8}}}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":17}},"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951}},"df":2}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.6457513110645907}},"df":3}},"s":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":1},"k":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":2}}}},"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":4}},"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1},"t":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":1}}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}}},"h":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":7,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0}},"df":2}},"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":3}}}},"w":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2}},"s":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6}},"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/just-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":4.898979485566356},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":23,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":10}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":4.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":5.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":6.082762530298219},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":13,"'":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3},"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3}},"u":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}}}}},"s":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2,"\\":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.449489742783178}},"df":1}},"a":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":5,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":3},"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":8}}}},"g":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.7320508075688772}},"df":2,"3":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":20},"p":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":7}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":2}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.449489742783178}},"df":1}}}},"r":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}},"y":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}},"b":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":3},"c":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":6},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.0}},"df":2,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":2.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":5},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":2}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":8}}},"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951}},"df":5}}},"u":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772}},"df":1,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951}},"df":1}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":6}}}},"c":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.23606797749979}},"df":1},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":10,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951}},"df":4}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":10}}}}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.872983346207417}},"df":32,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":27},"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":21}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772}},"df":8}}},"f":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3},"l":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"h":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":4.123105625617661}},"df":7}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2}}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":10,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951}},"df":2}}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1},"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":14,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951}},"df":2}},"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":5}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":4}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":12}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951}},"df":6}}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1},"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":21,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951}},"df":6,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":5,"s":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}}},"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/git-working/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":2.0}},"df":2}},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":6}},"o":{"docs":{"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":2.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":2}}}}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":25,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/git-working/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":4}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":19}}}},"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772}},"df":2}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951}},"df":1}},"p":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":2.0}},"df":3}},"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":11},"p":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/just-rust/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}}}}}}}}},"o":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":5,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"=":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":2}}}}}},"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":11,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":3}}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":7}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}},"n":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":5}}}}}},"l":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":9}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/generic-c/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":26,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/just-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":3}}},"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":14,"c":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":6},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":4},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/git-working/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0}},"df":2}}}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":7,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}}}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":23}},"k":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":2.449489742783178}},"df":5},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":15}},"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}},"z":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":16,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/just-rust/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1},"p":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0}},"df":2}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0}},"df":4}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":4}}}}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979}},"df":1},"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":5,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":22,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}},"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":6},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":2}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.7320508075688772}},"df":1,"/":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0}},"df":1}}}}}}}},"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":5.830951894845301},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":5.0990195135927845},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":9.486832980505138},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":5.385164807134504},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.4641016151377544}},"df":19,"e":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1},"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":2.0}},"df":1}},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":2}},"v":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":4}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":11}},"t":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":29},"i":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":16}}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":7}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}},"p":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":9}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":15,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}}}}}}},"p":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":17,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}}}}},"x":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951}},"df":1}},"w":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0}},"df":3}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":8}},"f":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":20,"i":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":3}}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772}},"df":3,"u":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":5}}},"i":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":10,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":2,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}}}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}},"g":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.1622776601683795}},"df":4}},"l":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}}},"b":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":24,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772}},"df":2}},"u":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}},"v":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":12,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":10},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":2}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":4}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}},"u":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":5}},"y":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}},"d":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":5}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":16}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":6},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":8}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":4.47213595499958},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":13},"i":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}}}}}}},"n":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":4}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}}}},"y":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":5}},"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}},"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":9,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":5.744562646538029},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":10,"'":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1},"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":3.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/interests/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":5.385164807134504},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":4.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":26,"e":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951}},"df":1}},"d":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":2}},"f":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":6}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":11}}}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.7320508075688772}},"df":1},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":4}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772}},"df":3},"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":7}},"u":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979}},"df":2}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":3}},"y":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":2}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":2}}}}}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":18}},"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":2}},"m":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":4.242640687119285},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772}},"df":4},"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":11}},"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":4}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":14},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":2}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2}}}}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1},"s":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":6}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":8}}}},"m":{"docs":{},"df":0,"s":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"g":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"y":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":3.605551275463989}},"df":1,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":6}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":5}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":1}},"x":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}}}},"s":{"docs":{},"df":0,"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"k":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":5.916079783099616},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":5.477225575051661},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":3.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":5.291502622129181},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":7.810249675906654},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":6.082762530298219},"https://nsmryan.github.com.com/generic-c/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":4.47213595499958},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":4.898979485566356},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":6.708203932499369},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":5.477225575051661},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":4.358898943540674}},"df":34,"'":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":10},"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":3,"'":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}},"1":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951}},"df":1},"a":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.449489742783178}},"df":3,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951}},"df":15,"e":{"docs":{},"df":0,"'":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":1}}}}},"g":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":2,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"k":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":29,"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4}}},"l":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":20},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951}},"df":5}}}},"s":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":8.888194417315589},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":19,"'":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1},"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}}}},"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1},"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":1},"p":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951}},"df":2}},"m":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951}},"df":1}},"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":2}}},"q":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":4},"q":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":10}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":2},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":4.242640687119285},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":14}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":2}}}}},"l":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951}},"df":2}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}}}}},"n":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1,"d":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951}},"df":2}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/archive/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/ccsds-router/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":4.795831523312719},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":4.242640687119285},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.449489742783178}},"df":20,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}}}},"x":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772}},"df":9,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"j":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":7}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":8}},"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":9}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":5}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/just-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.1622776601683795}},"df":38},"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":26}},"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.4142135623730951}},"df":2}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":9}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":11,"t":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":18}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":3}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":7}},"e":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951}},"df":4}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":24,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":6}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":5,"8":{"docs":{},"df":0,"3":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951}},"df":1}},"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":2}},"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":6},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951}},"df":4}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":5.0990195135927845},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":35,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2}}},"r":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":8}}}}}}},"n":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":3},"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}}}}}}},"p":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"g":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"x":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":7}}},"g":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951}},"df":3,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951}},"df":1}}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2},"l":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/just-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.605551275463989}},"df":14,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":2}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":7,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":11}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":3}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":2}}},"y":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772}},"df":7},"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":9}},"d":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":5,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":14}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":2}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951}},"df":2},"n":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0}},"df":4,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":8}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951}},"df":5}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951}},"df":2}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":7,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.0}},"df":6,")":{"docs":{},"df":0,"[":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.0},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":20,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}},"i":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":3}}},"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":3}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":3}}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":8,"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":5}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":4}},"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":11}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"o":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":13}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":8.426149773176359},"https://nsmryan.github.com.com/cello/":{"tf":2.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":5.196152422706632},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":4.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.23606797749979}},"df":26,")":{"docs":{},"df":0,"[":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772}},"df":2,"i":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":3.7416573867739413}},"df":3}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2}}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951}},"df":2}},"d":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951}},"df":2}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}},"8":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}},"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":4,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":20}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}}}}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}},"z":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":3}}}}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":2}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}},"q":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951}},"df":5}},"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":9,"i":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":4}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":5}}}}},"j":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}}},"k":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":4}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}}},"i":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951}},"df":4}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3},"v":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":8}},"y":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.7320508075688772}},"df":2}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":40,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":13,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.449489742783178}},"df":1}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":4.795831523312719},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":4.47213595499958},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":7.0710678118654755},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/cello/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":3.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/generic-c/":{"tf":4.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":6.082762530298219},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/just-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":5.0},"https://nsmryan.github.com.com/lua-games/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-tables/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":5.0990195135927845},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":4.242640687119285},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":4.47213595499958},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":4.123105625617661},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":5.5677643628300215},"https://nsmryan.github.com.com/vim-plugins/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":6.6332495807108},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":5.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":6.082762530298219}},"df":40,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}},"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":7}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":4}}},"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":15}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":27}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":4}}}},"v":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0}},"df":2,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":6}},"u":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":12}},"r":{"docs":{},"df":0,"/":{"docs":{},"df":0,"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.7320508075688772}},"df":10}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"d":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.0}},"df":3,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,".":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"~":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"j":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"/":{"docs":{},"df":0,"j":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"u":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2}}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951}},"df":3}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/cello/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":3.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/just-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":2.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.872983346207417}},"df":31,"f":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"s":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772}},"df":9}}},"u":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"t":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951}},"df":2}}},"e":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":9,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":1}}},"m":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":2.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/vim-plugins/":{"tf":3.4641016151377544}},"df":4,"/":{"docs":{},"df":0,"g":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":2.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":10,"z":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0}},"df":1}}},"z":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":4}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":2.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.4142135623730951}},"df":4,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0}},"df":1}}}}}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.8284271247461903}},"df":1}}},"s":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":6},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}}},"x":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":5.477225575051661},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":6}}}}}},"w":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772}},"df":2,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.7320508075688772}},"df":7}},"k":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1,"u":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":3.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/just-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":3.7416573867739413},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":3.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":3.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":2.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.605551275463989},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.0}},"df":37}},"r":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.0}},"df":2},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.8284271247461903}},"df":2}}}}}},"y":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":3.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":3.4641016151377544},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/generic-c/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":2.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/this-blog/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":2.8284271247461903}},"df":33}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1},"r":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}},"b":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951}},"df":4,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":4}}}},"e":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":4}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":2.0},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":2.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":28}},"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":2}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":2,"'":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.0}},"df":2}}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951}},"df":2}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":12}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":18}},"s":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":7}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":2,"r":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":1}}},"k":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1},"l":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5}},"n":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":5}}}},"s":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}},"h":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":4}},"t":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":4.358898943540674},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":19}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":23}}}},"i":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":9}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":13},"k":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":2.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cello/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/interests/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":2.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":3.3166247903554},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.449489742783178},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":3.872983346207417},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":3.4641016151377544}},"df":36,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":4}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":9}},"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3}},"s":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":19}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":2}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":8}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":3.1622776601683795},"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/generic-c/":{"tf":2.6457513110645907},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/interests/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":2.8284271247461903},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":2.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":28,"r":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951}},"df":2}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":2.23606797749979},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":2.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":14}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":5}},"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.7320508075688772}},"df":2}}}}},"x":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.4142135623730951}},"df":3,"/":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0}},"df":1}},"x":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"y":{"docs":{"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":2.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.7320508075688772},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":2.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.4142135623730951}},"df":10}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0},"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0},"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":5},"v":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":1}}},"w":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}},"z":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":4}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}}}}}}},"title":{"root":{"docs":{},"df":0,"1":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1},"2":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1},"3":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1},"4":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":5}}}}}}},"l":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":3}}}}}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0}},"df":2}}}}}},"v":{"docs":{"https://nsmryan.github.com.com/archive/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}}}},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/":{"tf":1.0},"https://nsmryan.github.com.com/git-working/":{"tf":1.0},"https://nsmryan.github.com.com/this-blog/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}},"u":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1}},"c":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0},"https://nsmryan.github.com.com/generic-c/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":3,"c":{"docs":{},"df":0,"s":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/cello/":{"tf":1.0}},"df":1}}}},"f":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"f":{"docs":{"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":2}}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0}},"df":6}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0}},"df":1}}}},"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":2}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/first-post/":{"tf":1.0}},"df":4}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":9}}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0},"https://nsmryan.github.com.com/some-fun-algorithms/":{"tf":1.0}},"df":2,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":3}}}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/generic-c/":{"tf":1.0}},"df":1},"t":{"docs":{"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/handles-for-abstraction/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"i":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0}},"df":1}}}}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/awesome-c-libraries/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"a":{"docs":{"https://nsmryan.github.com.com/lua-games/":{"tf":1.0},"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":2}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/interests/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/more-fun-algorithm/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0}},"df":1}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/floating-bar/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-post/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/processing-particles-art/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":3}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0},"https://nsmryan.github.com.com/first-elm-project-lines/":{"tf":1.0},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0},"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0}},"df":5}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"tf":1.0}},"df":2}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/ccsds-router/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/first-experiences-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/just-rust/":{"tf":1.0},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"tf":1.0},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"tf":1.0},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.4142135623730951},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-like-rust/":{"tf":1.0}},"df":7,"i":{"docs":{},"df":0,"c":{"docs":{"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/sageiii-launch/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/second-elm-project-circles/":{"tf":1.0},"https://nsmryan.github.com.com/second-experience-with-rust/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://nsmryan.github.com.com/git-working/":{"tf":1.0}},"df":1}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://nsmryan.github.com.com/git-working/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"tf":1.0},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-architecture/":{"tf":1.0},"https://nsmryan.github.com.com/flight-software-components-events/":{"tf":1.0},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"tf":1.0},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":9}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/lua-tables/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://nsmryan.github.com.com/third-elm-project-split/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://nsmryan.github.com.com/my-current-tool-set/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://nsmryan.github.com.com/algebraic-data-types/":{"tf":1.0},"https://nsmryan.github.com.com/decoding-with-session-types/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"tf":1.0},"https://nsmryan.github.com.com/why-i-use-c/":{"tf":1.0}},"df":2}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"tf":1.0}},"df":1}}},"m":{"docs":{"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"tf":1.0},"https://nsmryan.github.com.com/vim-keybindings/":{"tf":1.0},"https://nsmryan.github.com.com/vim-plugins/":{"tf":1.0}},"df":3},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/bit-pattern-visualization/":{"tf":1.0}},"df":1}}}}},"x":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://nsmryan.github.com.com/vxworks-tricks/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"tf":1.0}},"df":1}}}}}}}},"documentStore":{"save":true,"docs":{"https://nsmryan.github.com.com/":{"body":"","id":"https://nsmryan.github.com.com/","title":"blog"},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"body":"This is the first in what I hope is a series of posts on the use of abstraction in that I have seen in \nflight software systems. I plan to go over each mechanism that I have seen in a post, ending\nwith a method that I have been using recently that I have not seen in other flight software systems.\nThe flight software that I have worked with includes Core Flight Software (CFS), CALIPSO, SAGE3, and SafeGuard.\nI will try to use CFS for most examples as it is open source and available for anyone to use. It also has examples\nof all the techniques I want to talk about.\nI will be talking mostly in terms of C, and a limited subset of C++ without classes and objects. I think the ideas\nhere can be translated into the abstractions of other languages, but I want to avoid encoding the abstractions in terms\nof a languages mechanisms- classes, traits, typeclasses, higher-order functions, protocols, etc- for several reasons: \n\nCFS and other many other flight software systems are written in C, or if they are in C++ they often to not include\nmuch in the way of OOP of other abstractions like templates, 2) abstraction has a cost in complexity, and in flight software\ncomplexity comes at a premium, 3) I want to start with C where we have very few means of abstraction, and then see what happens\nwhen we move into other languages.\n\nEach abstraction mechanism has different implications in the high level design, and its worth considering\nthis when designing flight software. These concepts aren't specific to flight software, but I want to talk about them\nin terms of flight software because that domain a unique set of concerns and challenges that are worth exploring and sharing.\nFlight software systems have a certain style that I have not see in other software, although it shares many aspects with other\nembedded system software, and even when a technique is well known or commonly used, it is still interesting to talk about\nit in terms of a specific domain and how it plays out there.\nOne of the reasons that I have been thinking about this stuff is that the coupling between parts of software have some\nlasting affect on the large scale structure of the software, and the coupling influences its design and the design of\nnew components. These components have explicit and implicit coupling to other components, and to the overall architecture,\nin ways that can prevent them from being updated with new requirements, ported to a new operating system, or ported to\na new board without a significant amount of effort. It can also make them hard to test because they aren't designed to be\nrun in isolation- they depend so much on each other that most tests end up being system-level tests because a very limited\nsubset of functionality makes senes by itself. \nThe Basics\nThere are some basic ideas that need to be laid down before we begin. The main one is that the design of\nflight software systems is invariably a series of modules that communicate through \nfunction calls, shared resources (such as shared memory), and structures or packets of data. This communication can be through synchronization\nmechanism such as sempahore or message queues, or directly without synchronization.\nEach component implements some aspect of the system- either a library (such as a complex algorithm), a service provided\nto other modules (such as a configuration manager that distributes configuration data to other components), a hardware\ninterface (such as an external interface or an onboard device), or some logic specific to the system (such as a component\nfor controlling the system's mode). A module can be multiple of these, like a library\nthat wraps up a hardware device, but generally these seem to be the kinds of modules that you see.\nMany of these components have fairly complex designs- many modules will tie into multiple mechanisms provided by other modules. For example,\nif a module controls a serial interface to a subsystem, that module might also send software messages, request tables, provide telemetry,\nreceive and execute commands and provide subsystem information to other modules. In other words, a module isn't just a collection of functionality,\nbut rather a fairly complex actor whose exact shape and role depend on a global concept of how components fit into the system. There\nare some exceptions, like a component that truely is a library and doesn't tie into any other components. Even libraries can sometimes\ntie into a software message system for reporting errors- software messages provide a great way to record local information about an error\nas soon as it occurs, and if you want to avoid tieing a library to a software message mechanism it may have to propagate a lot of\nerror information to get a similar level of reporting.\nThere are many considerations to take into account for these modules. They may be custom software designed for a particular mission or\na unique piece of hardware, or they may be generic and reuseable. They may tie into the operating system and board that they live in,\nor they may abstract these out in some way. They may also be tied into the rest of the software- for many modules, they are designed to \nrun in a system with a selection of other modules, which themselves may depend on yet other modules. These kind of dependancies are one\nof the main things I wanted to talk about in this post.\nDirect Coupling\nThe first technique is the most obvious- direct use of one modules definitions from another module. A module will have a series of\nheader files, some of which are intended to be included by by other modules, and the symbols exported by these headers will be given\na namedspace in some way- either by prefixing them with the name of the module (TBM for Table Manager, for example) by using a namespace in C++,\nor by defining a class. These definitions are the interface that other modules\ncan depend on. This is how the core components of CFS are used- the CFE modules are coupled directly to all other modules. This is also\ntrue of OSAL and the PSP within CFS.\nOne consideration here is the direction of data flow, which can be push or pull (one module provides data to\nthe other, or a module requests data from the other).  Two modules may be closely coupled to coordinate their actions, so that\none module can communicate directly to another through direct function calls. A module may provide a service that other modules use\nsuch as software messages aka event messages. A module may also be a libray which is layered upon by other modules, coupling directly to \nthe lower layer module.\nPush vs Pull\nWhen a module provides a service to other modules, then the difference between pushing data and pulling it is very important. \nI want to go over this distinction a bit as it becomes important with other abstraction mechanisms.\nImagine a\ntelemetry module that requires an update to telemetry from every other component in a system. If the components push data to it, they\ncall a function it provides. This means that all other modules are directly coupled to the telemetry module. If the telemetry module\npulls data, it will have to call a function in each other module. This second design implies that while the other modules are not\ncoupled explicitly in the sense of using a symbol in another module, they are designed with a function that is needed by another module,\nwhich is an implicit coupling.\nThe pulling design has the advantage of being synchronous- the other modules must provide data when the telemetry module wants it.\nThis means that module may have to protect access to their telemetry through a semaphore, or to construct their telemetry when it is\nrequested. However, this means that there is some place in the telemetry module that calls a function from all other modules, and this\ncode must be updated to account for any module added or removed. This by itself is not too bad- its very repetitive code, and at least\nits clear what the depedancy is and how the data is being transferred between modules. The main problem I have with this kind of thing\nis that when there are many places in a project where modules can depend on others, and it is not clear how to determine how changes to a\nmodule affect all places in other modules that have this kind of dependancy.\nThe push design has the advantage of being asynchronous- the other modules can provide updates when they are ready and they know that their\ndata is valid. This can add some complexity to the telemetry module, however, which must handle the possibilty of zero, one, or multiple\nupdates from a components telemetry between each time that it uses the telemetry updates. For example, it may only keep the most recent\nupdate, but signal a problem if zero updates are received, or if more then one update is receives.\nTradeoffs\nThere are several tradeoffs being made here. \nPros\n\nThis is the simplest way for one module to depend on another- there is no abstraction or indirection.\nThe data path is explicit. This means that you can trace the transfer of data through a system. If data, such as a telemetry\npacket from a subsystem, passes through multiple modules, you can trace how it moves through the system statically. This helps\nwith reviewing software, reasoning about it, and in debugging it.\nThe dependancies between modules are easy to find. If a module includes another modules header, then it depends on that module.\nThe nice thing about this is that there are can subtlies to how an interface must operate, and being able to trace that interface\ndirectly to its implementation reduces the mental overhead in understanding their interaction.\nWhen one module changes, such a change to a function signature, the other modules must be changed to conform. If the change\nprevents other modules from compiling, then this points you to every place you need to change in other to propagate the change. If\nnot, at least you can search for a modules functions and change each place that they occur.\nLocal reasoning is possible at the use site- it is easy to reason about the use of data in the code that uses it, as you can trace\nexactly what will happen. This is similar to other pros, but I want to make the distinction that a certain kind of local reasoning is\npossible here, as different mechanisms make different kinds of reasoning easy or hard.\n\nCons\n\nThe obvious con here is that with no indirection, changes to one module affect the other. \nThe close copuling means that a component written to call directly into another component cannot be used without that component.\nIf a module is to be ported to another system, you either need to port the other module, or remove or modify it everywhere it depends\non the other module.\nIn some cases the dependance of one module is on every other module in the system. For example, a telemetry module that receives \na telemetry update from all other modules has a large number of dependancies. \nWhile local reasoning is possible where data is used, it is not easy in other cases. For example, in our telemetry module example, any\nnew module that is written must either provide a telemetry update, or a way to provide telemetry. This means that when thinking about one module,\nyou have to be aware of the design of another, and potentially many other modules. When there are many dependancies like this in a system it can be\ndifficult to know how a change in one module needs to affect other modules as that logic is spread throughout the codebase. \nWhile a module's design can be re-used between projects, the modules themselves will likely need modification. The changes in project-specific\nmodules and project-specific requirements will likely require changes to most or all modules. This make software re-use difficult and means that\nsimple changes can propagate into large changes to a system.\nSimilar to the above, small changes can propagate to large architectural changes. Changing the path of data through a system will require\nchanges to all modules that touch that data. This can be good, as flight software is usually higher assurance then other software and if a\nchange must be made then its affect on the whole system needs to be considered, but it makes software development slow and costly.\n\nMeans of Abstraction\nEven when modules are directly coupled with each other, there is still a potential for a kind of abstraction through header files. The header file/\nimplementation file mechanism in principal always allows you to switch out an implementation for another. Generally I've found that this is\nonly done when the code is written with the intend of switching the implementation, and it is rare that you need to switch out an implementation\nif you didn't design with that in mind. Thats not to say I have seen it done, just that if the software is not written with this in mind, then the\ninterface can be so specific that it doesn't usually make sense to switch it.\nWith that said, code can certainly be designed with the intent that the implementation will be swapped out. This is exactly the means of abstraction\nused in the CFS Operating System Abstraction Layer (OSAL). Other modules in the software depend directly on OSAL symbols (functions, type, etc), and the OSAL itself\ndepends directly on operating system symbols, and yet it provides an abstraction. In effect it provides a level of indirection for operating system symbols\nwhich can be bound at compile time to the symbols of different operating systems. In practice, it does more then that but using operating system mechanisms\nto implement its functionality (there is more to it then simply renaming) partially because it provides a consistent interface between operating\nsystem with different behaviors.\nI have also seen this kind of abstraction used to decouple components so that one module is shielded from changes to requirements- a module may provide\na header file that is implemented by different components at different times in a project due to changes in hardware. One of the nice things about this\ndesign is that if you don't have to update a module, you don't have to re-review it, so this kind of decoupling reduces the work required for certain\nkinds of software updates.\nThis kind of abstraction has some advantages- the binding is still static, and yet provides a way to re-use code between systems. My experience has been that\nthis does work- I was able to port CFS to a new system with very little effort because there was an implementation of the OSAL interface for POSIX that\nworked on that board. There are some issues that come up with providing an interface to distinct systems, where the result can be subtly different, or must\nprovide a pared down interface that only provides feature shared by all systems, but this is a more general problem then the choice of abstraction.\nOne issue that comes up here that will be important later is that it provides only one implementation for each interface- you can only compile in one\nimplementation at a time. This is stil useful even within a project, such as compiling again a test harness, but means that it can't include certain\nhardware or software interfaces that may have multiple implementations at runtime. This would be the case with operating system driver, for example,\nwhich might provide the same interface to multiple devices which have different implementations.\nConclusion\nThis post lays some groundwork in how flight software is structured and what kinds of concerns I have generally seen in its design. Now that we have talked\na bit about the most tightly coupled way to design software, we can move on to what indirections we can introduce, and look at what tradeoffs they provide\ncompared to a tightly coupled system.\n","id":"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/","title":"Abstraction in Flight Software 1- Direct Coupling"},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"body":"This post is the second in a series talking about abstraction mechanisms that I have seen in flight software systems.\nThe topic of this post is the first type of abstraction- while the first post was about direct coupling between\nmodules with no indirection, this post is about a way to reduce coupling between modules.\nI don't know of a name for this kind of mechanism, so I'm calling it registration. It can come in the form of a callback,\na data structure, or a concurrency mechanism that is provided by one module to another. An example would be a callback provided\nto a driver that performs some user defined processing of data when it arrives on a hardware interface.\nIn CFS this mechanism is used to validate tables, where one module is responsible for the definition of a table, and for\nproviding a function that checks whether a particular table is valid and can be used. The event message system also requires\nmodules to register an array of descriptions of the event messages they will send.\nAnother example I have seen is registering command callbacks to a module that determine what to do with commands received\nby a system, or functions registered with a task management component to be spawned as tasks.\nRegistration\nA registration mechanism consists of a function exposed by a module that allows other modules to provide it data or function pointers (in C/C++).\nThe data flow is from other components into the component that exposes this function, which means that any module that registers with the component\ndepends on it.\nHere is a piece of imagined sample code, where the module ABC registers some callbacks with other modules. I put in some error checking\njust to make it more like real code. The module CMD handles providing commands to appropriate modules, SWMSG handles a software message\nmechanism where messages are simple strings, and TLM provides a way to update a section of telemetry given its size.\nint ABC_Initialize(int moduleId)\n{\n  int result = 0;\n\n  gvABC_moduleId = moduleId;\n\n  result = CMD_RegisterCommandCallback(ABC_ReceiveCommand, NULL);\n  if (result &lt; 0)\n  {\n    SWMSG_SendMessage(gvABC_moduleId, \"ABC Register Command Callback Failed\");\n  }\n\n  result = TLM_RegisterTelemetry(gvABC_moduleId, sizeof(ABC_Telemetry));\n  if (result &lt; 0)\n  {\n    SWMSG_SendMessage(gvABC_moduleId, \"AB Register Telemetry Failed\");\n  }\n\n  return result;\n}\n\nThe registered data can be used to configure a module, to provide a processing function, a task, a semaphore to synchronize with, a message queue\nto place data on- anything that a module does could be provided by a registration. This can be a single module registering with one other module,\nsuch as if a module's behavior might be abstracted to be re-used where it behavior is determined by different modules in different projects. This can\nalso be used when many module interact with a single one, such as when all modules provide function pointers to be spawned as tasks.\nIts interesting to look at the tradeoffs between registering function pointers and registering data. When there is a particular type of transfer, like\na command packet, it can make sense to provide a message queue and to simply place the packet on the queue. In general, however, we might not want\nto dictate how a module receives or provides data, so we can hide that information in a function. In this case we are essentially replacing data\nwith computation, where the computation may simply place the data on a queue anywhere, but is allowed to do other things like record that the data\nwas received, or avoid a queue and process the data immediately. This provides extra flexibility, although C function pointers are not as easy to\nwork with as functions in, say, Haskell, and this can lead to some duplication where multiple modules define identical callbacks. This can be mitigated\nby allowing a single argument to the callback function that provides configuration specific to the module, like which message queue to use, which can\nallow a single function definition to be used by any module that needs default behavior, allowing modules to define their own function and data if the\nwant to handle data differently.\nThe registration mechanism is a push style of transfer- data is pushed from a module into the one providing the registration. However, the \nuse of that data may be push or pull- a module may provide a callback that can be used to push data to it, or it may provide a callback that can be\nused to pull data from it. In the first case, the callback might take a pointer to some data as an input argument, and in the second it might take\na pointer to data as an output which it is expected to fill out for the calling module to make use of.\nThe decoupling here allows a module to provide a service to other modules without depending on those modules, it allows modules to be added or\nremoved without changing the provider, and it allows some flexibility in how a module behaves without changing it source code. However it can lead\nto some sublities, such as if a callback function is used in an interrupt, and the providing module must be careful to respect the requirements of the\nmodule it provides data to. I've seen this cause problems when long running computations are performed in a callback- when writing and reviewing this\nkind of code you have to look at its use of data, synchronization, and its execution time to know if a function is okay to use as a callback in a particular\nsituation.\nRegistrations mechanisms can also lead to situations where resources are exhausted if too many modules register, or if a module registers too many\ntimes. Very often the registration is done at initialization so\nif this happens you fix it during development and it never occurs in flight.\nTradeoffs\nAs with any design, there are tradeoffs to be considered.\nPros\n\nThis mechanism helps isolate module-specific logic within that module. An example is the table validity checking, where a module\nthat is responsible for a table also contains the function used to check table's validity.\nThis is a way for a module to provide a service to an unknown number of other modules, and to add modules without necessarily updating\nthe module that provides the service. If the service is general enough, like a software message service, then it may be portable between\nprojects without modification.\nThe module providing registration is not directly coupled to other modules, allowing other modules to change their relationship with the providing\nmodule without updating that modules. This also means that the providing module can be moved to another system without considering modules\nthat use it.\n\nCons\n\n\nThis mechanism can make reasoning about certain module more difficult. A module that has many callbacks registered with it can be difficult\nto understand- to know what it is doing at a particular time you may need to know not just how the module works, but every callback registered\nwith it an how they work. This means that local reasoning about the module's runtime behavior may require global knowledge about the project.\n\n\nModules written to register in this way depend on the component they register with. If modules depend on multiple regstrations with mulitple\nother modules then they are tightly coupled to the particular architecture. This can be alleviated somewhat by allowing this kind of tight\ncoupling to a subset of core modules, such as in the design of CFS where the CFS modules are used directly, but other modules are usually not.\n\n\nIt can be difficult to know how a module is configured. This is related to the above, but specifically it is difficult to know exactly what\nregistrations occurred and what data they contain. This can be alleviated by providing a report about how a module is configured, although\nthis is additional complexity in the flight software to provide this report, in the ground software to interpret it, and in operations to retrieve\nit an understand it.\n\n\nChange to a registration mechansim can have an affect on many, potentially all, other modules. It can also be a problem if a module providing\nregistration is used on mulitple projects, but needs to be extended or modified for the needs of one project. This can lead to a situation where\nother modules are slightly different to account for this difference in registration, which makes re-use and porting difficult.\n\n\nConclusion\nThe registration mechanism is a very flexible way to introduce abstraction into a system. It is fairly easy to implement and can have a good\ntradeoff in complexity vs the additional flexibility. I've seen it provide software re-use where a service provider can be moved\nbetween projects without modification, providing a lot of value when getting together a new system.\nThere can be issue with this where the needs of a specific system may require changes to the service,\nwhich may propagate to all users, but in general this is pretty hard to avoid regardless of design.\n","id":"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/","title":"Abstraction in Flight Software 2- Registration"},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"body":"This post is the third in a series talking about abstraction mechanisms that I have seen in flight software systems.\nThe topic of this post is the message bus. This is a mechanism through which messages are passed\nbetween modules through an arbiter. This allows the sender and receiver to be completely decoupled- the sender does not\nknow who receives their messages, or even how many modules receive them, and the receiver does not know the source of the messages.\nBoth sender and receive couple directly to the software bus mechanism, becoming directly dependent on it. In this way, they\ntrade direct dependance on other modules to direct dependance on an intermediate module. This leads to an architecture where\nthe software bus is a central component that all components connect too. This reduces the overall number of direct connections\nin a large system, which can provide benefits in the complexity of the architecture.\nThe main example I've seen of this kind of system is the CFS Software Bus (SB) module. This module provides a publish/subscribe\nmessage bus which seems commonly, but is not the only kind of bus that is possible. The SB module is a core component of CFS, part of the\nCFE modules. Not all communication between CFS modules uses this mechanism, and is instead part of tight coupling\nbetween modules, but there are a number of mechanisms that rely on it.\nThe Message Bus\nA message bus is a way to transfer data between components such that the sender and receiver are decoupled from each other.\nThe message bus itself is not necessarily a specific data structure or even a task- its a mechanism that forwards data between modules\nbased on runtime information. The CFS SB module is a publish/subscribe system, other styles like a point-to-point transfer could be\nuseful in some situations.\nFor a message bus to be publish/subscribe means that a component can register a message identifier (for CFS, an APID), indicating\nthat it will send messages with that ID. Then, other components can register to receive a particular message ID. When a message of that\nID is provided by a component, the message bus will send it to all other components that have requested to receive it.\nIn the case of CFS, a component requests a \"pipe\" (a message queue) and registers message Ids that it will receive on that queue. The\nmessage bus keeps track of what pipes are registered with each message Id, and when a message is received it is copied onto each queue\nin turn.\nNote that the bus has a certain packet header it relies on to pass messages. It acts as a kind of router, and all components must agree\non the protocol to use. For CFS, this is CCSDS, which is a pretty lightweight protocol with only 6 bytes of header required. Most\nsystems will include additional header, but that is system specific.\nThere are definitely situations where this style of transfer does not seem to work out, at least not how I've seen it implementated. Something\nlike moving an update of a table between modules would require a request and response, which is even more complexity and overhead to deal with,\nor would require a way to broadcast messages. Both of these have issues- a request/response needs a (simple) state machine and some way to \nrecover from errors like a response that never comes, and a broadcast means all modules have to know to ignore certain messages. \nInstead, transfer like this go through direct coupling in CFS, which is probably the better design.\nExamples\nAn interesting use in CFS is task scheduling- the task scheduler does not release semaphores or run callbacks, but rather sends\nmessages to other components. These components will block waiting for new messages, and will run when the arrive. \nThe messages \"wake up\" the module, allowing it to perform some periodic task like provide telemetry, run commands, or check for changes.\nAnother example in CFS is data storage- the logging module does not need to know what module produces messages, and it can be re-used without\nmodification when new modules are added with new messages to log. To be clear, the code can be reused- there are usually changes to configuration\nthat have to happen to get this to work.\nOne other example I've seen where this works out well is external interfaces. A component that communicates with an external interface can\nreceive a subset of messages from the bus and forward them out, and can forward incoming messages to the bus, all without have to involve\nthe sending or receiving components.\nTradeoffs\nAs with any design, there are tradeoffs to be considered.\nPros\n\n\nModules can listen to existing messages without modification to other modules. This is useful in several situations- if a new module\nneeds access to some data (such as sensor data), if a new modules makes general use of data (like a logging module), or if the new module\nreplaces an old module and is being swapped out by taking over the receipt of a message previously handled bythe old module.\n\n\nNew messages, even with no subscribers, can be added without modification to other modules. They will be dropped until a subscriber is\nadded, but they can be send as soon as they are defined.\n\n\nGeneric modules like the scheduler or data logger can be written in terms of packets, and then re-used. They are each coupled to the\nmessage bus system, and other core modules in the case of CFE, but a certain subset of modules will require no other coupling.\n\n\nRequiring a packet header means that transfers through the message bus have an id, where a direct transfer does not. This means\nthat communication between components is a bit more formal, which can aid in documentation and reasoning.\n\n\nCons\n\n\nThe distributed nature of the message passing can make it difficult to trace the path or cause of messages through a system.\n\n\nIf the system is based on message queues, then it can't be used for certain kinds of communication- the message will be processed\nat some time in the future, and if it needs to be handled immediately then direct coupling may be more appropriate.\n\n\nThere is a certain overhead involved in a message bus. Data is copied into queues, and data that does not require a header must be\nwrapped in one before being sent. I don't expect the overhead to be too high, and if you need low latency transfer, you don't have to\nuse the message bus, but overhead is still a consideration.\n\n\nThere is a certain mental overhead required to create a new transfer- instead of calling a function, the code has to contain a message ID,\na packet, and the data itself. If we are receiving data, we might also need a new pipe, at least in the CFS design.\nThe tradeoff being made here is that the complexity of individual transfers is increased with the hope that the the overall system complex is decreased\nby avoiding a web of direct couplings that would otherwise result from many local decisions on what modules to connect.\n\n\nLarge buffers of data are more difficult to transfer. CFS has a zero-copy transfer mechanism to handle these situations, but in general\nthere has to be some way to avoid copying large buffers on transfer.\n\n\nSending data to the message bus can take an unknown amount of time- if the packets are copied directly to the receiving queues then the\nnumber of copies is determined by how many modules regsitered to receive the message. This means that this mechanism shouldn't be used\nin certain situations like interrupts or drivers that need to get data out quickly. In these cases, we might want a separate task that\npends on a queue, and forwards data from the queue to the message bus rather then sending it directly from the hardware.\n\n\nConclusion\nThe message bus can have a significant affect on a system's architecture. While not all transfers will use the bus, it is a central part\nof the system if it is included and can grow to handling a significant amount of traffic. My experience has been that it does assist\nin software reuse- certain modules lend themselves to the use of a bus. For these modules, I have been able to re-use code without\nmodification, which I have not been able to do in more directly coupled systems.\nI have also experienced some of the drawbacks of the message bus- its a lot of work to set up when adding a little data transfer, and\nthe decoupling does make it hard to feel like I understand what is happening in the system. Its very easy to miss messages when a central\nmodule must receive all or a large subset of messages, or\nfail to account for them in all modules that need to be updated to receive a message. This is partially because for the project\nthat I'm using CFS, I'm the only programmer, but in general a message bus is certainly more mental overhead then a function call.\nI've found that the architectural influence of this system is fairly large- when people draw the CFS architecture, they show SB at the center\nand show modules connecting to it. This is mostly true at runtime- there are certainly direct connections, but a good deal of CFS message\npassing is through SB. However, the static aspect of the CFS architure is more complex- there is direct coupling to the CFE modules, PSP,\nOSAL, and then through OSAL to the operating system.\n","id":"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/","title":"Abstraction in Flight Software 3- Message Bus"},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"body":"This post is the fourth in a series talking about abstraction mechanisms that I have seen in flight software systems.\nThe topic of this post is a mechanism called a handle. This is the same use of that word as in a file handle, where\nthe effect of a function called on that handle depends on what the handle refers to. We will see that while handles\nare used to allow one module to control resources for other modules, it also allows a kind of dispatch based on\nhow the handle was initialized that has other uses.\nThe idea is to have a module make direct use of an interface such as a hardware driver, but to fill in that interface\nat runtime. The interface can be called directly, but the result of a call depends on a piece of data provided with every\nfunction in the interface which is used in some way to determine the effect of the call. A great example of this is\nthe VxWorks iosLib\nlibrary. You register a set of functions which provide the\nimplementation of the create/open/close/read/write/ioctl/delete functions. Then, when you open a device, the handle\nthat is returned from open can be passed to other functions like read or write, and the correct function will be called\nfor the particular device.\nAnother example, this time in Haskell, can be found here\nwith discussion of pros and cons in the context of a much more abstract language.\nThis post will discuss how this works, and a more general application of this kind of design that I have been using\nrecently with some success.\nHandles\nA handle mechanism consists of a series of functions defining an interface, as well as a way to re-purpose those\nfunctions depending on the runtime context. There is a bundle of information provided by one module to another whose\nintepretation is only known the the module that produces it. This information is passed back into the providing module\nwhich then inteprets it to determine what functions to call. The module that receives this information does not inspect it\nor use it in any way expect to pass it back to the providing module.\nThis can be used to create a kind of dependancy injection situation where the result of using an interface depends on information\nprovided to the module, allowing you to provide different handles to get different results.\nAll of this (hidden state, dispatch based on runtime information) will make this abstraction sound like a lot of other abstractions\n(especially vtables, traits/typeclasses in certain situations, and forms of dynamic dispatch), and I hope to cover these similarities in this\npost. In the code that uses a handle it will certainly look like an OOP object, where the handle takes the place of a 'self' argument, however,\nthis similarity seems skin deep to me, and we will see that they do not have the same properties as objects.\nTo name the two modules involved in this, we could say that the module providing and using the handle is a driver, and\nthe functions that can be used with the handle are its interface.  The module that uses the handle will just be called the user.\nAn example would be a serial interface, where the driver might be a module that knows how to configure and use the hardware while the\nuser might be a module that knows about a particular device's communication and operation and uses the driver to talk to the device.\nVxWorks Example\nThe main example that I've worked with is the VxWorks driver system where the functions (open/close/read/write/etc) take\nan integer handle which is used to call the correct function for a particular driver. This system is very convienent for\ncertain types of devices, and it is not particularly complex to use.\nThe VxWorks functions like open take a handle, look up a struct of function pointers, and then call the corresponding\nstruct's 'open' function. In other words, the open function dispatches based on the handle.\nIt does have some limitations, however, such as the\nneed to use ioctl as an 'escape hatch' when the calls exposed by this mechanism don't cover certain functionality. Not\nall devices are as simple as reading and writing data- if you want to program a 1553B interface, simple reading and writing is\njust too limiting to describe what needs to happen.\nWhenever\na driver needs additional functionality that is not one of the functions defined in the iosLib, they provide an identifier\nand an argument to ioctl, which then has to dispatch off of that information. The argument can of course be a pointer to\na struct, allowing effectively multiple arguments. The problem here is that each new function needs an enum value and potentially\na struct, and adding functions goes through a switch statement instead of just being a new function. In other words, the \nsystem isn't directly extensible for individual drivers. We will see how to improve the situation in this post.\nCertainly file handles in, say, Linux also may be references to different software systems in the \"all things are files\" (or \"many things are files\")\nphilosophy. I don't know much about the details of this mechanism, but I imagine its very similar, although likely much more complex.\nWhat's in a Handle?\nThere are multiple ways for a handle to be implemented.\nA handle is an opaque object that\nthe application has to treat essentially as a symbol- their only property is that they are unique and are only equal to themselves.\nHandles are always small- integers or pointers- so they can be passed around, stored in arrays, and generally used without\nworrying about performance.\nTheir internal structure is known by the module that manages them. I know of two ways for this module to interpret a handle.\nHandles as a Reference to a Hidden Resource\nWith this strategy, the handle is usually an integer used internally as the index into an array of structures. These structures\nhave the information required by the driver to carry out function calls for the interface.\nThis is a common way to deal with handles, and has some advantages. The module providing handles can hide details about allocation and\ndeallocation, and details on exactly how a function call translates into an action using the handle. However, it does put some \ncomplexity on the module providing the handles- you expect to be able to allocate and deallocate handles and to have that module\ncapable of providing as many handles as needed, and to track allocation perhaps reuse handles that have been deallocated.\nHandles are usually of type 'int' in C, where negative numbers indicate an error. In a language with algebraic data types we could use\nunsigned integers. Keeping the handle itself small allows it to be passed around the program, stored in other structures, and printed\nto the screen.\nHandles as a Structure of Functions\nAnother way to implement handles, which is method I have been using, is to use a pointer to a structure containing functions. This keeps the\nhandle small just as in the previous case, but does not require the centralized resource management. The handle is itself the resource\nthat we would be looking up with the 'handle as int' strategy.\nThis strategy makes the handle a\nusable thing by itself, without needing interpretation by another module. This has its own drawbacks- users of the\nhandle have to track their own resources, and there is no central registery of handles that can be used to record usage information or\ntrack statistics. This is not so bad, however, as it means lower complexity in drivers.\nOne reason that I have been using this design is that I intend there to be many different types of handles, each with their own interface.\nIf each type of handle had to implement resource tracking it would add complexity linearly with the number of handle types. Even if there\nwas a single implementation of resource tracking, perhaps dealing with \"void*\" types, the user would have to think about whether there was\na global registery, or many local registeries, and they may even have to track which registery a particular handle comes from. There might be\nmultithreading issues that come up as well. Keeping the handles separate means that they are self contained and can be treated in isolation, which\nseems desirable when there are many types of handles, each implementing one of many types of interfaces.\nBuilding a Handle\nThere are many abstraction mechanisms that provide different types of dispatch, where each one could be used to provide a similar\nresult to a handle system. If C had traits/typeclasses, I might even prefer them to handles, and use static resolution of dispatch\nrather then dynamic.\nThe main distinctions between classes/traits/mixins/etc seems to be how they are built and what operations can be performed on them.\nHandles are build by defining a struct with an interface of function pointers and possibly other data. This struct is then filled in\nat runtime with the functions to call. There is no direct notion of inheritance or composition, although you could perform these\noperations explicitly with enough code.\nComposition in particular is interesting for handles- I can imagine composing handles that perform transformations or processing of\ndata as it is passed down a chain of handles, especially for debugging.\nThe particular implementation I've been using will have to wait to another post, but it makes use of forward declaration and function\npointers to define a series of functions that take a pointer to a struct, where each function simply extracts a function pointer within\nthat struct and calls it, passing the struct pointer and any required arguments. The drivers define their own struct whose first\nelement is this struct full of function pointers, and fill in that struct with their own implementations. Each driver provides\nits own 'init' function which initializes a new handle. Once initialized, the handle can be passed to any user of the interface.\nArchitectural Implications\nIts interesting to see the implications of each of these mechanisms on the large scale design of a software system. I have not seen handles\nused in a pervasive way in flight software, but I think they have the potential to have at least as large an effect as a message bus. \nThere is a distinction here for the level at which a handle operates vs the level a message bus operates- the message bus is a large\nscale mechanism that facilitates a certain kind of information transfer. Its an asynchronous mechanism, best for multicasting data,\nand passing packets of data that do have have strict time dependances or complex protocols involved in their transfer.\nA bus does not help you abstract away function calls or general interfaces\nlike hardware devices or operating system functions. They can replace direct function calls, but when you must make function calls the message\nbus does not provide a means of abstraction.\nA handle, on the other hand, abstracts direct function calls and the direct use of a module's interface. This means that it can help when abstracting\nsomething like performance sensitive code (although it does have a small cost) or code that makes direct calls to an operating system, hardware driver,\nor a module where we want to abstract the details of which module or which function is being called.  In some sense this means that message\nbus' provide abstraction for higher level data flow, while handles provide abstraction for more direct, low level data flow. However,\nhandles could be used to subsume message bus', but not the other way around.\nNote that handles can be used to abstraction data flow similar to a message bus- you could have an interface with a function like \"receive_packet\",\nand have implementations that write that packet to multiple queues. This would be a kind of point-to-point or multicast mechanism. You could also\nimagine that this receive_packet function checks the packet's APID and provides it to a set of subscribers, implementing a pub/sub system using\nhandles.\nInspiration\nThe thing that led me to thinking about handles and what use they might have in flight software was working on the SafeGuard project, a UAV geo-fencing \nsystem which is designed for high assurance. I won't go into too much detail, but the code makes use of a dynamics algorithm for predicting the trajectory\nof the vehicle, and it makes use of an algorithm for determining whether a point is within a distance from a polygon (for testing whether the vehicle has\nleft a boundary). These two algorithms are used in a large algorithm that collect and calculates the inputs to these algorithm, and then\ndecides what actions to take based on their results.\nThe dynamics and polygon algorithms are libraries that that inputs and provide outputs, and have no side effects. This makes them easy to test, predictable,\nand reliable. The higher level algorithm, however, has to deal with incoming sensor data that may be stale, invalid, or nonsensical. It has to ensure that it\nruns when it is supposed to run, and that it doesn't take too long to come up with an answer. It has to produce telemetry describing the inputs and outputs\nof all the calculations, as well as its own state. It also has to take action if it determines that there is a problem with the vehicles current state, \ncalling another modules interface to report problems it detected.\nAll of this means that the algorithm is not a pure mapping of input to output. I have tried over time to factor the algorithm into a pure and impure part, and\nevery place in the code where I have been able to do this has been easier to test, better factored, and easier to adapt to changing requirements.\nHowever, there is a level at which the algorithm is simply not a pure function, and we have to deal with its dependancies on other modules, its use of\ntasks/semaphores/message queues and other operating system functionality, and its telemetry. Thinking about this lead me to realize that the algorithm\ncould be written in such a way that each of these effectful function calls are abstracted out, so that we could feed in test data, simulated data, or\nreal data as desired. I didn't want this abstraction to result in complex or unusual code- it would be easier to adopt if it looked like normal code but \nsomehow had this magical property that we could place it in a test harness and inject data, and then run the exact same code without modification in flight.\nThis lead me to design a kind of handle system in which code like operating system interface, and the interfaces of other modules, are abstracted into an interface\nof functions that take a handle, where the handle is used to determine what happened at runtime when these functions are called. This way, the algorithm binds\ndirectly to the interface (it needs to bind to something) but it doesn't require the other modules to be up an running, or the operating system to be the one\nit was designed for, as long as we can provide an implementation that satisfies the needs of the algorithm.\nI believe this could allow a whole series of amazing opportunities for this algorithm:\n\n\nWe could run it outside of the target system, allowing us to test and study it on a laptop instead of an embedded system. We could even create a visualization\nthat we could tweak to get a better understanding of what happens under the hood. I've done this stuff before with other algorithms, but this one has been difficult before\nat first look it relies on VxWorks and the rest of the flight software to operate.\n\n\nIt would allow us to write unit tests independant of the rest of the system. We could test out properties about detecting errors, overstepping its time bounds, \nor injecting invalid data in a reproducable way. These tests could be run at any time, not just with the hardware available, and would be amenable to CI.\n\n\nIt would allow us to run the whole algorithm faster then real time. This is something we have talked about, and we have some hardware-in-the-loop simulation, \nbut this is all done in real time as it uses the real hardware.\n\n\nIt should make the algorithm much more portable. We have talked about whether the algorithm could be made into a module that could be moved between systems,\nand I believe that this is possible if its dependancies were replaced by handle mechanisms. The handles would be provided at initialization, and would hide\nthe operating system and external interfaces. They could even be constructed with callbacks, allowing the user code to essentially drive the algorithm and collect its\ndata.\n\n\nTradeoffs\nAs with any design, there are tradeoffs to be considered.\nPros\n\n\nHandles allow abstraction of interfaces such that multiple implementations can exist at once within a single system. This is unlike\nthe advantages of header files, where only a single implementation can exist at once.\n\n\nHandles can be constructed at runtime- the particular functions involved may be arranged at runtime to serve a particular need. I don't see\nthat I would use this all that much, except perhaps in debugging code where I could replace a function call with a logging call, or swap\nout a single function from an interface to test it.\n\n\nHandles are composable. It is possible to write a handle that takes another handle as an input, and extends its functionality. This would\nwork like decorators in python. You could have a handle that logs inputs and outputs, redirects them to another interface, or tees them off\nand combines the results between two handles.\n\n\nHandles can be written for specific interfaces. A message bus is usually a single abstraction passing any kind of data around, while a handle\ninterface can be a collection of functions and types specific to the interface. This allows more complex interfaces to be described, such as a \n1553B interface, while remaining abstract.\n\n\nHandle function calls look like normal functions. This is as opposed to tring to build in an object system in C, or constructing a complex\nmacro system to abstract calls. A handle function call is just a function call.\n\n\nHandles bind only against an interface. This is as opposed to abstracting using header files, which does provide a level of abstraction in the\ncode, but eventually binds directly against something. This is a somewhat subtle situation, but the point is that a module build using a\nhandle mechanism has shallow static dependancies.\n\n\nCons\n\n\nThe implementation of a handle system is more complex then direct function calls. It makes use of function pointers and requires struct\nfor each interface to hold these pointers. Each function must be written to redirect based on the handle, resulting in potentially a\nlarge number of similar functions.\n\n\nHandle functions can't be traced to the executing code directly- there is runtime information used for function dispatch which adds\ncomplexity to static reasoning.\n\n\nThe handle systems I've been writing involve some redundancy. The code could be generated automatically, but so far I've been writing it\nby hand each time.\n\n\nFor a module with many dependancies, if each dependancy requires a handle then the module may need to keep track of a large number of\nhandles. If the same module made direct function calls, it would not need to store and retrieve all of these handles.\n\n\nThere is a runtime cost to dynamic dispatch. I doubt it is very large, but its certainly larger then a direct function call. I'm sure\nits less then a message bus system, however.\n\n\nConclusion\nHopefully this post gives some idea of what a handle system is and how to use one. I think they are an underutilitized form of abstraction,\nand offer some potentially amazing advantages to embedded system's in particular.\nI hope to write more on the details of implementing a system like this. I've been doing some 'real-world' testing of these ideas, and \nsuccessfully ported a complex algorithm using a series of handle systems, which gives me confidence that its advantages do in fact work\nout in practice.\nI think the details on implementing handle system, as well as some useful handle system's I've started to write, will have to wait to another\npost. This one is long enough as it is.\n","id":"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/","title":"Abstraction in Flight Software 4- Handles"},"https://nsmryan.github.com.com/algebraic-data-types/":{"body":"This post starts a description of algebraic data types. For me, these have completely replaced\nmy mental machinery for designing and reasoning about programs. They also provide a way to explore\nideas and guide my programs.\nThe types described here are monomorphic- they do not have any type parameters. The whole algebraic\nstructure can be lifted up a level to combine structures that have type parameters, which I hope to\nget to in another post.\nHopefully I can get into even more fun through how this lifts into Functors, or to the Howard\nCurry Isomorphism and how the type systems we look at are systems of logic.\nMy main exposure to functional programming languages is Haskell, and the Elm I'm been exploring recently.\nThe descriptions given here are a mix of Haskell, type theory, set theory, and natural language.\nWe will start our journey with the primitive types that make up the floor of the tower of types that\ncan be defined by taking the sums, products, and exponents of algebraic types. We will work our way\nup to the operators themselves and the motivation for their names, as well as some uses for each.\nPrimitive Types\nA type system will have a series of primitive types for things like integers, positive numbers, encodings\nof the reals, characters, and booleans.\nEnumerations\nThey can also have a way to describe types with a finite number of elements, indexed by natural\nnumbers (enumerations). Enumerations end up being like having natural number in the type system, as we\nwill see later.\nEnumerations provide some motivation for the name \"algebraic\" data types. They consist of a set of\nsymbols, often identified with a integer.\nIn C this would look like:\nenum MSG_ID_ENUM;\n{\nMSG_ID_SAVE,\nMSG_ID_UPDATE,\nMSG_ID_PRINT\n};\nand in Haskell\ndata MsgId = MsgIdSave | MsgIdUpdate | MsgIdPrint deriving (Enum)\nAn enumeration has a finite number of elements, and acts as a natural number within the type system.\nThe number that an enumeration cooresponds to is the number of elements that it has.\nWe will see later that the sums, products, and exponents of algebraic data types act like sums, product,\nand exponents on the number of elements in an enumeration.\nProducts\nProduct types or something like them are common, and come up immediately when modeling essentially\nany information. The values of this type are, for example \"(3, \"test\", True)\".\nWhen reading this value, we have a 3, and the string \"test\", and the boolean value True.\nIn C and its family of languages they are called structs.\nIn Haskell the product type is written \"(a,b)\". Other product types can be defined, such as\n\"data Prod a b = Prod a b\", which are isomorphic to \"(a,b)\".\nAlgebra\nAs an initial motivation for considering these types \"products\" rather than \"sums\" or something else is to\nconsider what happens when taking the product of enumerations- the number of elements in the product\nof two enumerations is the product of the number of elements of each.\nThis isn't the only reason that these are products. When we get to sum types, we will see that products\ndistribute over sums, just as they would in elementary algrebra.\nLogic\nProducts sequence data- they are like the word (and logical connective) \"and\".\nThe product of an integer, a string, and a boolean might be written \"integer x string x boolean\"\nor \"(integer, string, boolean)\".\nUnit\nAlgebra\nThe unit of multiplication is 1, and the unit of the product of types is (), sometimes called Unit.\nIt is a type with a single inhabitant, in Haskell this element is also called (). \nThis is the unit of product types for the same reason that the cartesian product of a set with\na set containing one element is isomorphic to the original set- all elements are paired with the\nsame value so it adds nothing to the structure. In symbols ax() ~ a.\nA fun fact about the unit type is that the type of functions from unit into a type 'a' is isomorphic to\na- in symbols this is the fact that () -&gt; a ~ a. This is because each function can map the () into a\nsingle element. Going the other way, each function can be mapped to an element of the type 'a' by\nsimply applying the function to the () value.\nThis ignores some details about extra bottom elements having to do with non-terminating computations.\nLogic\nProduct types coorespond to the And connective in logic. The unit of And is True- 'True And p' has the\nproof value of p, the same as 'p And True'. \nSums\nSum types are more rare in programming languages then product types, but they are hugely useful.\nWhen designing a game, or the communication of two systems, or the telemetry reported by\nan embedded system, one often needs to provide one of several possible options perhaps\nwith additional data. \nIn C, one might right:\ntypedef union\n{\nSaveData saveData;\nUpdateData updateData;\nPrintData printData;\n} Payload;\nenum MSG_ID_ENUM;\n{\n  MSG_ID_SAVE,\n  MSG_ID_UPDATE,\n  MSG_ID_PRINT\n};\n\ntypedef struct\n{\n  MSG_ID_ENUM msgID;\n  Payload payload;\n} Message;\n\nThe enumeration is required to distinguish between the possible values for the message payload.\nThe union type itself is like a union in set theory- the number of elements in a union type is the number\nof elements in each of the two types, minus the shared elements. Sum types are more like a disjoint union-\nthe tag prevents elements that would otherwise be the same from being equal. The whole concept of\nelements of sets being equal is a little tricky due to the lack of unions and the complexity of equality\nin type theory. Just note that there is some subtly here.\nIn Haskell this might look like:\ndata Payload = PayloadSave SaveData\n| PayloadUpdate UpdateData\n| PayloadPrint PrintData\nDepending on the situation, the data within the SaveData, UpdateData, and PrintData types can\nbe placed within the PayloadSave, PayloadUpdate, and PayloadPrint constructors. The equalivant in C\nwould be to use anonymous structs.\nThe values of this type can contain any of the three constructors. This allows multiple types of messages\nto be sent and received in a type same way. \nIf there are only two types to sum, we could use:\ntype Payload = Either SaveData UpdateData\nbut this gets cumbersome with more types:\ntype Payload = Either SaveData (Either UpdateData PrintData)\nAlgebra\nNow that we have products and sums, we can see how they interact. In Haskell:\ntype T1 = (a, Either b c)\nis isomorphic to:\ntype T2 = (Either a b, Either a c)\nBoth types must have a value of type 'a', and both will have either a value of type 'b' or 'c'.\nTheir values are different, but there is a function from T1 to T2 and back which compose in both\ndirections to produce the identity function.\nLogic\nThe connection between algebra and logic for sums is that sum types are like the word (and logical\nconnective). Given a type \"integer + boolean\", written in Haskell as \"Either Int Bool\",\nits values are \"Left 3\" or \"Right True\".\nThe introduction form for an Or operator requires either a value of type 'a' or a value of type 'b'.\nIf 'a' is true, then we can make the statment 'a Or b', and if 'b is true, we can still make the\nstatement 'a Or b'. I'm ignoring the difference between a true statement in classical logic,\nand a proof of a type by an element of it.\nThe elimination form for Or requires a way to prove a statement/type 'c' using an 'a', or a way to\nprove a type 'c' using a 'b'. In symbols, '(a -&gt; c) -&gt; (b -&gt; c) -&gt; (a Or b) -&gt; c'. The statement\n'c' is true if 'a Or b' is true and there is a way to prove c regardless of which of 'a' or 'b' is\ntrue.\nVoid\nThe unit of addition is 0, and the unit of sum types is Void. This type has no values (ignoring bottom\nif it exists, as usual).\nThis is why it is the unit of sum types- it is a path that cannot be taken.\nTaking the sum with the Void type means that one side of the sum has no values, so it is like tagging\nall values of the other type with the same tag. This doesn't change the structure of the type in\nany meaningful way.\nLogic\nSums coorespond to the Or connective in logic. The unit of Or is False, as 'False Or p' has the truth\nvalue of p, which is the same as 'p Or False'. This is appropriate, as there should be no way to \nconstruct a valid proof which is false in a system of logic. The connection to constructive logic\nhere makes the connection even more interesting- this is no surprise as the type theory of a language\nis a system of logic.\nExponents\nExponential types also come up all the time, and the presence or absense of these are, for me,\none of the biggest distinguishing factors between programming languages. \nSuprisingly, exponentials coorespond to function types such as \"a -&gt; b\", pronouced \"a arrow b\". This is\nthe type of functions from a type 'a' to a type 'b'.\nAlgebra\nTo continue the motivation with enumerations: the space of functions from an enumeration with n elements\nto an enumeration with m elements has m^n elements (m raised to the n). This is because each function\nmust map each element of the first enumeration to an element of the second. This means each function\nmakes n choices, each of which can be from one of m values.\nLogic\nThe cooresponding operator in logic is implication. The introduction and elimination forms in lambda\ncalculus describe how to use this operator.\nHaskell\nI can't help but mention how well functions and function types are supported in Haskell. They are\navailable in other languages, but not in the same way. Haskells functions are a powerful tool,\na way to abstract and combine computations.\n","id":"https://nsmryan.github.com.com/algebraic-data-types/","title":"Algebraic Data Types"},"https://nsmryan.github.com.com/archive/":{"body":"Test\n","id":"https://nsmryan.github.com.com/archive/","title":"Archive"},"https://nsmryan.github.com.com/awesome-c-libraries/":{"body":"This post goes over some very cool C libraries, each of which is awesome in one way or another.  They\nare generally fairly small and clean, and solve an interesting problem.\nI tend to find C libraries that are particularly clean, or which implement a complex concept not usually\nseen in C, to be very interesting. The very best examples are well engineered or solve a problem in an\nclean way that fits into the C language.\nUnfortunately I've never used most of these libraries, but I think they are very cool and I would like to fit\nsome of them into a project some day.\nThe List\n\n\nTheft, a library for property based testing in C. This is a good example of\na concept that I would usually consider too advanced for C and left it more in the domain of Haskell. This library is\ncertainly not as easy to use as QuickCheck, but I don't think that it can be given the limitations of C.\n\n\njsmn is a library for parsing JSON. Its interface is truly simple and manages to\navoid building an explicit tree of nodes or requiring memory allocation. This means I would be able to use it in \nan embedded system (if I had to parse JSON for some reason?). I have been using it to parse configuration files in\nsome LabWindows programs in permissive mode. I liked this library so much I wrapped it in a Rust interface as\njsmn-rs.\n\n\nheatshrink is a compression library in C. I like this one because it\ndoes not allocate memory and allows tuning performance and streaming. This makes it nice for embedded systems use.\nI'm not usually doing resource constrained programming, even when programming embedded systems, but if I did I would\nkeep this library in mind.\n\n\nCello, a library that embeds a great deal of advanced features into C. The list\nis pretty extensive, but includes polymorphism, garbage collection, reflection, and generic data structures. This\nis all achieved with fat pointers. I think this library is more of an experiement than a method for writing \nproduction C code, but it is at least interesting to look over and understand.\n\n\nCedux is an implementation of a React-like system in C. The idea\nis to have an application state that is not modified directly, but only through messages which contain information\nused to modify the state through a set of registered functions. Its another example of a place where we have a concept\nnot usually seen in C. I don't know how it would place out in practice, but I could imagine certain situations where it\ncould be useful.\n\n\nCOS, the C Object System. This is another library for adding features to\nC that seem out of its reach, like polymorphism and an OOP system like CLOS (from Common Lisp). This one is actually\nintended to be used for real programming, and in particular it was developed for some style of scientific computing.\n\n\nfann for neural networks in C. The library seems well engineered, and well used.\nAs with many of these, I've never had reason to use it, but if I needed some neural networks in C, I would go here.\n\n\nflann for nearest neighbor calculations. This just seems like a nice clean implementation\nof an algorithm with some nice features. \n\n\nimgui is an immediate mode GUI library, and the only C++ library in this list. I like\nthe look of this GUI, and it easy enough to set up and use in many languages. I would like to get something in Rust as a tool\nfor work one day.\nAn example of an imgui system in pure C is nukclear, which also looks good. I've never tried it\nmyself, however.\n\n\ncchan provides a channel mechanism with unbounded queueing.\n\n\nTinyCThread provides the C11 threading API. Its an idiomatic C API and adds mutexes, condition\nvariables, and threads, along with thread specific storage.\n\n\nmqtt and the implementation mosquitto. This is a pub/sub messaging system with a broker.\nI was able to set it up pretty easily and get messages from Python into a C program in a couple hours. I like the simplicity and\nthe flexibility of the topic system. I would consider using it if I needed distributed messaging between languages or programs, especially\nif the source of the data was an embedded system.\n\n\nUnity is a testing framework that I've been using to test code in LabWindows programs. I looked\nover some testing frameworks to see what would work for testing embedded systems, and this one seems to fit nicely- its simple enough to\nadd to a program, provides the usual testing features, and has room for more advanced usage. This is one that I have used for real code and\nit has served me well.\n\n\nTalloc provides a tree of memory allocations where freeing memory takes care of freeing\nchildren in the tree. It also has a way to register destructor callbacks to call when an allocation is freed.\n\n\nConclusion\nI hope some of these are interesting to someone. I know there is overlap with Awesome C\nand there are some other good libraries at ccan, but these are ones I'm particularly drawn to.\n","id":"https://nsmryan.github.com.com/awesome-c-libraries/","title":"Awesome C Libraries"},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"body":"I did a simple little project recently that creates a gif visualizing the bit patterns within a file.\nThe program takes as input a file name, and outputs a gif consisting\nof colored cells whose brightness is based on how frequently the corresponding bit pattern occurrs. The bit pattern for\na cell is just that the top left cell is all 0s, the next is 01, then 10, 11, 100, etc.\nThe gif moves from showing 2-bit patterns, then 4, then 6, 8, 10, 12, 14, 16. Of course, powers of 2 are the most interesting\nbecause the data is laid out that way.\nOne interesting thing is that the brightness is actually the log of the frequency- small numbers, especially 0, occur so\noften that just using the occurances directly leads to a white pixel for 0, and dark pixels for the rest of the image.\nAnyway, I just wanted to do a simple visual of bit data. Also, now I know how to create gifs with Rust, which is cool.\nThere are some examples in the repo from text data,\nwhich bunches up in the visual ascii range, and an exe\nwhich is more uniform. I also found that data files, like recorded CCSDS packets, produce nicer images then a corpus of english text, for example.\n","id":"https://nsmryan.github.com.com/bit-pattern-visualization/","title":"Bit Pattern Visualization "},"https://nsmryan.github.com.com/ccsds-router/":{"body":"This post is about a CCSDS packet routing tool I've been writing in Rust. \nThe motivation here is to provides a tool for moving CCSDS packets from one place to another, either from a file/TCP socket/\nUDP socket to a file/TCP socket/UDP socket. I often have CCSDS packets in one of these forms, either stored or streaming,\nand I want them to be in another (recorded to a file or streamed to a destination). When doing this, I sometimes want to\ndelay packets, throttle packets, or replay them according to their timestamp, such as when replaying captured data\nduring a test.\nThe use cases that I had when writing this:\n\n\nYou have stored packets in a file, and you want to replay them according to a timestamp within the packet.\nThis can be used for testing, such as to replay sensor data, or to test other tools by sending CCSDS packets to\nthem.\n\n\nYou want to save CCSDS from a network interface to a file.\n\n\nYou want to route CCSDS packets from a TCP or UDP port to another TCP or UDP port.\n\n\nYou want to delay packets by a fixed amount. This could be used to simulate a delay that would be experience in operation,\nbut not in testing. Introducing this delay can expose issues in timeouts, for example, that would otherwise be seen first\nduring operations.\n\n\nYou want to throttle packet delivery such that packets are received no faster then a given rate. This might help, for example,\nwith ensuring commands are not received faster then the maximum allowed rate.\n\n\nYou want to do one of the above, while filtering for a subset of APIDs.\n\n\nYou have regular CCSDS packets, or packets with a header and/or a footer of fixed size. The tool also supports packets\nthat are not CCSDS, but they must be of fixed length for it to know how to find the next packet.\n\n\nYou have a mixture of packets from a source, and you want to forward packets with certain APIDs to certain sinks. For example,\nyou might store all packets in a file for logging, forward some packets to a visuzlizer program, and forward all packets to a\nground system. You might also want to extract packets with a particular APID from a file, so you read from a file to another file,\nfiltering for packets with that APID.\n\n\nOne thing to note about using this tool- as of today (02/23/2019) I have tested this tool with real data, but it have not been battle\ntested. I know it has some rough edges, and I expect it will not cover all cases that one might see in production- it needs some\ntesting and production use before I would use it as a trusted part of a system. I would certainly use it for testing and development,\nand fix up anything I find, and I hope someone out there might do the same.\nThanks for reading!\n","id":"https://nsmryan.github.com.com/ccsds-router/","title":"CCSDS Router"},"https://nsmryan.github.com.com/cello/":{"body":"I've been thinking about C programming a lot lately, and what its limits are. This lead my to a very interesting C library\ncall cello. I highly recommend reading this page, and looking through the source code. The author\ndeserves some notice for such an interesting library.\nCello is described as a library that brings high level programming to C. This includes quite a lot of functionality such as\ngeneric data structures with mapping and folding, polymorphic functions, threading and synchronization, garbage collection, \na type class / interface mechanism, and higher order functions. Its surprising how much leverage you can get from this- you\ncan extend this library with new interfaces, functions, and structures, and get a good bit of functional programming into C\nas well as build high level interfaces. You can fit interator, streams, references, and all sorts of other things that are\nusually much more manual in C- its quite impressive to see an encoding of these concepts in C that is not an intrusive set of\ncomplex macros!\nThe way all of this is implemented seems to be with fat pointers, where a pointer\npoints to data as usual, but there is extra metadata just before the pointer in memory. This technique is also used in the Forth\ncommunity, where you can jump right to the code for a word, but can also back up and find things like the words name as a string\nand flags for its execution.\nThis mechanism allows pointers (all of these seem to be of type void&amp;ask;) to have a structure of properties. It appears (through\nsome quick check in the source code) that Cello looks up properties in some kind of table in order to dispatch the correct\nimplementation for a function. This is more flexible than a v-table style, where these must be known statically for each class,\nbut does incure some run-time overhead. Interestingly this makes it a bit more typeclassy in the Haskell sense (ignoring the dynamic\ntypes for now) because you have a single implemenation of an interface per type. \nUnfortunately, while this is very interesting, I would not be able to use it for my work, and I would likely move to another language\nrather then accept a non-standard style in C. I'm used to a very restricted C style for high assurance systems, and this is too\nmuch of a pervasive change to how you use to language for me to invest time in using it. Howver, it is a certain point in the generic\nC design landscape with a novel set of tradeoffs compared to what I've seen done in C.\n","id":"https://nsmryan.github.com.com/cello/","title":"Cello"},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"body":"This post is a followup to the previous post introducing CFE/CFS.\nIn this post I want to start talking about the design of CFE/CFS and\nwhat implications its design decisions have when using this software.\nI will go over some possible architectures one could use for flight software,\nand then go a little bit into CFE/CFS's architecture in terms of static and\ndynamics dependancies between software components. Part of the point here is\nto provide more detail on how CFE/CFS is organized beyond saying that it is\na publish-subscribe system with a software bus- the reality is more complex then\nthat.\nPossible Flight Software Architectures\nWhen developing a flight software system, there are a large number of\npossible designs and tradeoffs that can be made. In this way it is just like\nany other type of software even though it has its own unique set of\nchallenges and pressures. Architectures seem to have evolved over the years,\neach with its own advantages and disadvantages.\nLets go over some possible architectures and their tradeoffs. There could very well\nbe other architectures out there, but these are the basic designs that I can\nthink of.\nMonolithic\nIn this architecture, we write one monolithic system which controls the entire\nsystem. All features are tightly coupled, and the system is likely the least\nportable between projects, operating systems, or hardware.\nIn this architecture, we might have a single task/thread/process which recieves commands,\nproduces telemetry, and does all the hardware control in one place. This provides\nthe greatest degree of control, potentially the least overhead, and the fewest\nmental overhead as it has no mechanisms to learn or decoupling to reason about.\nThis architecture would be the quickest to get up and running if starting from\nscratch and creating a system with a limit set of functionality as it does not\nrequire developing additional infrastructure beyond the needs of the specific\napplication.\nOf course, there are some significant disadvantages as a project gets bigger, as it\nis ported between projects and has to be largely rewritten, and as its architecture\nrequires large changes to accomidate new requirements or functionality. It is the least\nflexible and provides no abstractions to use when reasoning about the codebase.\nModules\nAll embedded software systems that I've ever seen split off functionality into\nmodules.  A module contains internal state, and communicates with other modules\nthrough shared memory, message queues and other synchronization primitives, and\nfunction called- whatever is appropriate for the specific need.\nEach hardware interface will get a module, each complex algorithm, each piece\nof identifiable functionality like task scheduling or health monitoring. The\ndecomposition of the system into modules is usually done early in the project\nto organize and schedule software development.  Having an architecture like\nthis assists in reasoning about the software, understanding execution and\ndependancies between its pieces, helps scheduling which functionality should be\ndeveloped at what time, and manages complexity by sectioning off software into\nislands which can be developed, reviewed and understood mostly in isolation.\nModules can vary in size enormously There is no limit to how complex a module can be, \nbut the ones I see are usually between 1K and 10K lines of code. In the systems I have \nworked in there have been ~20 modules, and somewhere between 20K to 40K lines of code in total\n(logical lines of code counted by cloc).\nSome modules provide a library of functions to use by other modules, some provide core services\nused throughout the system, and some provide project-specific functionality. The libraries and core modules\ncan often be re-used between projects, providing a consistent architecture and set of functionality\nthat can be delivered for each system.\nSoftware Bus\nThe Software Bus architecture is a module system as discussed above, but one which has a module\nwhich performs communication between other modules. In a way, the task of communicating between modules\nis factored out into a single module rather then spread through the systems as a cross-cutting concern.\nA software bus is usually (as in the case of CFE) a publish-subscribe system. Modules can indicate to the\nsoftware bus module that they will produce a certain kind of data (perhaps indicated by a unique ID),\nand other modules can request that they be provided each packet with that ID.\nWith this design, the sender of a packet does not necessarily know where it will be sent, and the receiver\ndoes not know where the packet originated. This has a number of advantages, and of course it has a number \nof disadvantages.\nThe advantages are that we can add new components more easily- the decoupling between\nmodules means that a new component does not usually require changes in any other component. Sometimes you\ncan develop a new module and plug it into the system, and when that happens you are realizing the \nbenefits of this module.\nThe disadvantages come from places in the code where you benefit from tight coupling- since you no\nlonger know the source and destination of every packet, it can be difficult to tell exactly what the\nsystem is doing. You need knowledge of every packet published and every place where a subscription\noccurs in order to understand the control flow of the system. In a way this is okay- the\nsoftware bus module can report all links between all modules. However, if you need control over\ncommunication, or you need communication that occurs in a particular way, you may want to bypass\nthe software bus.\nBypassing the software bus leads to the next part of this post- CFE/CFS.\nCFE/CFS\nThe CFE/CFS system is a set of modules with a software bus in from the ground up. It is an architecture\nthat combines the decoupling that is available in a publish-subscribe system when possible, but makes\nuse of tight coupling when appropriate. When I say tight coupling here, I am referring to making\nfunction calls to a modules exposed functions, and when I say loose coupling I am referring to communicating\nthrough the software bus.\nIn particular, CFE is a series of very tightly coupled modules, and CFS Apps may be tightly coupled to CFE\napps. In addition, CFE and CFS modules are tightly coupled to the OSAL- they will make direct function calls\nto OSAL functions. The intend of this design is to factor out the portion of the system that benefits most from\ntight coupling into a small set of modules, called CFE, allowing other modules to be more loosely coupled.\nThis means that the CFE/CFS architecture is designed as an abstraction layer over the operating system with\nmultiple implementats, a series of tightly coupled modules providing core features, a series of modules\ncalled CFS Apps are tightly coupled to CFE and OSAL but not to each other, and a series of project-specific\napplications which are tightly coupled to OSAL and CFE, to their platform/operating system/or \nhardware, and perhaps to each other, but not to other CFS Apps.\nNote that there are several places were tight coupling is used here- any module may depend directly on OSAL,\nall CFE modules depend directly on each other, all CFS Apps depend on OSAL and CFE, and project specific apps\ndepend on OSAL, CFE, their platform, and each other if appropriate. This means that CFS is not a fully decoupled\nsystem- rather it is a system that allows decoupling in user code when appropriate and allows tight coupling\nwhen required.\nThis is an important aspect to the design in several ways. Sometimes we want something to happen right now,\nand not just when a packet arrives at a module. Sometimes we want to pass data directly rather then packing it\nup in a packet and sending it off. Sometimes we want to send large pieces of data, and while CFE provides a \nZero Copy message passing option, sometimes we want to control memory more directly.\nApplications of De-coupling in CFE/CFS\nNow that we have an idea of where the dependancies are between modules in CFE/CFS, I wanted to point out some\nplaces where the loose coupling provided by a software bus is used in CFE/CFS.\nOne places is the Scheduler App. This application runs a schedule consisting of slots, each of which is associated\nwith a slice of time within the schedule. For example, you might have 100 slots of each 10 ms each, and you might\nrun these slots once per second. Within each slot there are some actions you want to take, such as producing telemetry,\npolling hardware, checking the system's health, or running an algorithm.\nThe Scheduler App make use of loose coupling by sending a series of pre-defined commands to the software bus in each\nschedule slot. In other words, it schedules by sending packets at a particular time with the assumption that the receiver\nis waiting for new packets in some thread, and that the receiver will take a particular action when it receives the\nScheduler's packet. This is as opposed to a more direct approach such as releasing a binary semaphore to unblock a task.\nAnother example is the Data Storage App. This module recieves packets from the software bus, defined in a set of tables\n(configuration files) which tell it which packet ID to ask for from the software bus. When it recieves a packet, it stores\nit in log file according to rules defined in another table. This design does not rely on the source of the data, and the\nsenders of each packet do not know whether Data Storage is out there receiving the data or not.\nStatic Coupling vs Dynamic Coupling\nA quick final point I want to make here is that the design of CFE/CFS provides loose coupling at runtime, not necessarily\nat compile time. In other words, when you write a CFS App, it is a CFS App and not a generic module that could be used \nwithin another software system. It will rely on the OSAL and CFE, at the very least, and can't be used without those\nstatic dependancies. One thing I find interesting is architecture where we make use of loose coupling at compile time\nto create modules that are not tied to a specific architecture, but that is a topic in itself.\nNotice that with CFE just as most tight coupling was deliberatly factored out into a small set of modules, with OSAL\nthe static coupling to the operating system was factored out into a set of header files which can be given multiple \nimplementation. In other words, the CFE/CFS/OSAL combination is designed to manage static coupling in a particular\nway which effects what coupling you will see in your own CFS Apps. This is a monolithic form of static coupling in the\nsense that if you depend on any part of OSAL, you depend on all of it. It is not a set of modules for each part of\nthe operating system, it is a monolithic interface and if you use it you are tied to the whole thing. This is not usually\na problem, but it is worth noticing.\nConclusion\nThere is a lot more to say about CFE/CFS as a software system, but hopefully we have started to see its design at a high\nlevel and how it manages coupling at compile time (statically) and at run time (dynamically) and what options you\nhave and don't have when you write CFS apps.\n","id":"https://nsmryan.github.com.com/cfe-cfs-architecture/","title":"CFE/CFS Architecture"},"https://nsmryan.github.com.com/decoding-with-session-types/":{"body":"This post is a thought I had a while back about data decoding, but which I will likely not pursue. I just wanted to \nrecord it somewhere in the open. I'm no expert in type theory, so the concept of session types might be 1) wrong, \nor 2) trivial, but might none-the-less be interesting.\nThe idea is around decoding data, especially binary formats. I deal with a lot of different binary formats of varying\ncomplexity, and they generally fall within a certain set of features:\n\nStructures containing a series of named fields\nSubcom data (sum types) whose intrepretation is indicated by some other field within the packet\nPrimitive types- signed and unsigned integers, single and double precision floating point numbers, sometimes\nbuffers or fixed or variable length, and sometimes buffers terminated by a particular symbol like a NULL terminated\nstring. Some systems will use bit fields, and some will have exotic encodings like 48 bit floats.\nData integrity checks like a CRC or checksum. These must be computed from the data, and may require custom code (its\nhard to cover all possible cases).\nOverlayed data, where the same data have multiple intepretations.\nCalculated data, sometimes called a derived parameter, which must be computed from one or more parameters and is not\nan explicit field of the binary data.\n\nI attempted to come up with some algebraic structure for these things, where structures are a kind of multiplication (sequecing),\nsubcomming and overlayed data are kinds of sums, primitives are the primitives of the algebra. Fixed size buffers are multiples\nof a primitive, while variable length buffers are perhaps a certain kind of infinite sum or something.\nWhat this lead me to was this view of decoding data as an interaction between the decoding program and the binary data.\nThe idea is that decoding a primitive is like requesting a value of a particular type. Then decoding a structure\nis like requesting several types of data in turn, and decoding an overlay of data is like requesting two types at once.\nThe more interesting case is subcommed types. In this case, the decoder provides several possible response to the binary\ndata, which can respond with the one that corresponds to the current packet. In other words, instead of telling the packet\nwhat data we want next, we ask it which type of data it wants to provide. This seems very much like the connectors\nof a system of session types.\nCalculated data can simply be done on the decoder's side- I don't think it needs to be part of the decoding process.\nThats all there is to this idea- its just a recognition of a similarity between how session types can request a value,\nor provide a choice, to someone, and how that matches with decoding binary data where we sometimes know what we want next\nand sometimes we depend on the data to tell use what happens next.\n","id":"https://nsmryan.github.com.com/decoding-with-session-types/","title":"Decoding with Session Types"},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"body":"This time I wanted to do something with the mouse cursor. This little program just draws a trail\nafter the mouse cursor as you move it.\nYou can play with it  here\nThe code is on my github repository in the Elm directory as\ncursortrail.elm\n","id":"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/","title":"Fifth Elm Project- Cursor Trail"},"https://nsmryan.github.com.com/first-elm-project-lines/":{"body":"I have been playing around with elm recently, and I put my first project up on this site.\nYou can see it here\nThe code is in the elm directory of the github repository for\nthis site\nEnjoy!\n","id":"https://nsmryan.github.com.com/first-elm-project-lines/","title":"First Elm Project- Lines"},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"body":"Next up in the Elm experiments is a little animation using WebGL (elm-community/webgl).\nThe result is created using a single quad (a square) with no interesting attributes, along with a fragment\nshader that creates the entire effect. The fragment shader constructs a circle using a signed distance field,\nwhere the X/Y position is moved randomly. The space inside the shape is a visualzation of a noise function.\nYou can see it here\nThe code is in the elm directory of the github repository for\nthis site\n","id":"https://nsmryan.github.com.com/first-elm-webgl-shader/","title":"First Elm WebGL Shader"},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"body":"I've seen Rust mentioned here and there, but until recently I put off the investment\nneeded to learn it. Part of that was that I found the syntax a bit off-putting- \nsome code seems perfectly reasonable, and other code is pretty intimidating\nto a new-comer.\nHowever, I have been thinking about safer embedded systems code, so of course Rust\nentered the picture again. I wanted to write up my first experiences learning the\nlanguage, and hopefully continue to write about my journey.\nGetting Started\nAs someone who uses C/C++ for work, and who is interested in Haskell, I felt like\nI should be able to learn Rust. So far, it does have some of the feeling of both\nC and Haskell to me- more on that later.\nI started with the Rust website, of course,\nand the documentation. I found\nthat I could learn each concept with the example they give, and overall it was easy to\nlook through the major features of the language and get an idea of how to read a program.\nCargo\nIt can be interesting to look over a languages package system (if it has one) to see what\nthe major libraries are and what topics the community has handled. There is a sense with\nRust of having some really great libraries, a lot of libaries in general, and a lot of\nlibraries with very good and consistent documentation. There is also a sense of\nincompleteness, experimental libraries and libraries that are establishing themselves\nin the ecosystem.\nMany of the libraries I looked at either had very good documentation, or they were clear\nthat they were experimental and were not ready for widespread adoption.\nAs a Haskeller, I was interested in the Rust view of some major Haskell packages, like\nquickcheck and parsec/attoparsec. It looks like there is a quickcheck crate (which turns\nout of be easy to use) as well as other implementations of the quickcheck concept,\nand there are several ways to do parsing depending on your use-case, but Nom seems to\nbe the major parser combinator library. Some things, such as lens, do not appear to\nbe as established.\nTooling\nI was very impressed with how easy it is to set up a Rust environment, start a project,\nadd dependancies, and get something working. I found it very easy to add tests as part\nof my development process, which is very nice to see.\nI also very much liked being able to get a particular toolchain with rustup. I was able\nto compile with the msvc toolchain and the gnu toolchain on Windows, and I had a very easy time\nup installing the armv7-unknown-linux-gnueabihf and getting a Rust program to cross compile\nfor an ARM system I had in the lab at work. I have had some much trouble with this kind of thing\nin the past with C programs, especially on Windows, that this was pretty significant for me.\nMy First Program\nI had wanted to do some simple profiling of a telemetry processing tool I wrote in C using the\nLabWindows development environment. All I wanted was to instrument some places in my code and\nget a sense of how long each stage of the program was taking, but I couldn't find a tool that\nwas quite simple enough for me. I wanted to be able to instrument code on different operating\nsystems (VxWorks, Windows and Linux), and I really wanted something simple if possible.\nNot finding anything to my liking, I thought it might be a fun thing to write up myself. I\ntried to get the CFS/CFE performancing monitoring work, in case I could use it as a baseline or\nas a possible target for my library, but I ran into a number of issues with that path and\nabandoned it.\nI called the library Demark (like to demarcate something) and, inspired by C libraries like\njsmn, I gave it the minimal number of functions possible. You could start a log,\nadd an entry, and write out to a file. I ended up with some additional features to make\nthe resulting log more useful, but it was still a pretty small library.\nI struggled for some time with certain things that are easy in C (perhaps to easy?) like\ncasting a pointer to a buffer to a pointer to a struct. The repr(C) directive works\nas expected, and I found the mem::transmute to do the casting. I did fight with\nborrowing/ownership for a while, but I expected that at first. I'm still not completely\nclear on how to manage that stuff, but better then at first.\nIn the end, I liked the Rust version of this library. It has the feeling of some of the\nsafety of Haskell, the pattern matching, the nice types, and immutable data. It also\nhas some of the feeling of C- I more-or-less know what my data looks like in memory,\nwhen I'm allocating memory, using pointers, and feeling like you understand the cost\nof your actions (again, more-or-less- I don't have a deep understanding of the assembly\nor anything). At first I was concerned that I wouldn't always know when allocation\nwas occurring (this is very important to me) but I believe I will be able to control\nallocation fairly easily and tell whether code allocates or not. I still have some\nlearning to do there. There is a great cheatsheet\nhere which\nI found a huge help. \nI did have a strange feeling the first time I put a print statement in my code- it feels\nenough like Haskell that I expected to have to control my side effects more.\nThe Problems\nI did run into a number of problems integrating my library with some existing C code. In the\nend, the 32 bit toolchain didn't work because of some linking issue, and the 64 bit one didn't \nwork for reasons I can no longer remember. I also tried the msvc toolchain, but that ended up\ncreating a DLL that required a large number of dependancies that I didn't want to fulfill\nin a LabWindows program.\nIn the end, I just wanted something that worked, so I rewrote the code in C and ended up with\na simple profiling library and viewer. This helped me find some slow points in the code, and\nI would use it in the future if I wanted to improve that telemtry processor again.\nConclusion\nI would like to try Rust again- I am willing to put up with some rough edges and some initial\nfailures. I see a lot of potential, and I would love to be able to integrate Rust into my\neveryday work. I could see trying to create some very fast tool, or experimenting with a small\nsoftware modules in Rust.\nThe interoperation with C is a huge selling point for me, and is perhaps the single enabling\nfeature of Rust for me to use it at work. I write a lot of C, and barriers to working with\nC would make Rust a non-starter. Happily, I was pleased with the experiment even though it failed,\nand I hope to contribute to Rust in the future.\nI really like the emphasis on friendliness in the community- it is very important to me\nto feel like a community will be friendly before I would consider contributing.\nThanks for reading!\n","id":"https://nsmryan.github.com.com/first-experiences-with-rust/","title":"First Experiences with Rust"},"https://nsmryan.github.com.com/first-post/":{"body":"The first post on my new blog! My previous blog was here.\nThis blog is currently a combination of hakyll, linode, and github.\n","id":"https://nsmryan.github.com.com/first-post/","title":"First Post!"},"https://nsmryan.github.com.com/flight-software-architecture/":{"body":"I've found over the last 6 years that flight software is its own programming domain with its own techniques, concerns, tools,\nand mentality. I thought it would be good to go over some things I've learned and share my experiences with this kind of software and\nits design. Its a world in its own, and I've seen only a small slice of this world, but its still hard earned experience worth sharing.\nThis could go on for many posts after post, so this one will just introduce some ideas.\nWhat is \"Flight\"\nThe distinction of \"flight\" software versus other software is that it either goes on an airplane or in space. This software is often\nhigh assurance- it is built to more rigorous standards, with a more intensive process, than other software.\nNote however that being \"flight\" does not by itself make it high assurance software- there are classes that indicate how critical the software is. Class A include\nsoftware on vehicles with human beings, and critical functionality that humans depend on. Class B is for secondary systems, and for\nlarger robotic systems. The other classes can be smaller missions, and systems that are not used for critical functions\nand have no ability to impact critical systems. These classes are also used for ground software, but thats not the subject of this post.\nCFS\nThe best example that I can provide of flight software is CFS. Its well used, well documented, and comes with a unit test\nsuite for each module. The link is to CFE, the core set of modules for the CFS system,\nand there are other modules you can get here. This system implements core functionality for flight software systems in a set of\nmodules called CFE, and then provides a set of modules uses these core systems. The user then configures the core modules and any additional modules they need,\nand adds their own modules- either for generic functionality not provided by CFS or for mission-specific code like the control of a subsytem or a hardware interface\nto a spacecraft bus.\nI have worked with other flight software, and only recently gotten into using CFS. I like CFS, even when I disagree with parts of its design, and I have been\nimpressed with it in practice- I was able to get a fairly complete flight software system set up and start writing my mission code fairly quickly as a one-man\nteam on one of my projects. I haven't had to change almost anything within CFS itself- in the core CFE modules or the application modules- so in practice they\ntruely are generic and truely are modular.  It is not a perfect system, and I would like to work towards some improvements, but its very good, well tested and\nhas heritage in other missions, which does weigh in its favor.\nFlight Software Concepts\nThere are a series of concepts that seem common in flight software systems. Each one can be handled in a variety of ways, but in general flight software\ntends to have many of the following systems:\n\nTelemetry Collection\nCommand Handling/Routing\nFault Detection, Isolation, and Recovery (FDIR)\nSoftware Messages / Event Messages\nHardware interfaces\nMode Control\nTable Management (Configuration)\nCommand Sequences (relative time and absolute time)\nFile Transfer\nData Storage\nTask Scheduling\nTime Management\n\nThere are also some utilities that are common to see:\n\nFixed size allocation for packets and other structures\nTime stamp generation\nPacket creation/modification/inspection (usually CCSDS), and packet routing\nLogging\nCritical error reporting\n\nWe also need operating system functionality like:\n\nThreads\nQueues\nBinary semaphores\nMutexes\nCounting semaphores\nRing buffers\n\nOther concepts may be used if available, or built if needed, but this is a basic list of functionality you will need in a flight\nsoftware system. Some of this is overkill for smaller systems, but scales to larger ones.\nEach of these deserves a post of its own. There are a lot of details here.\nFlight Software Implementation\nThe flight software I've seen is either in C/C++ or plain C. CFS/CFE is an example of plain C, and I would like to do a future post on why I think\nC is the right language to have choosen for this work.\nThe code is broken up into modules called either modules, apps (in CFS), or CSC (computer software components). Each module implements one task\nor chunk of functionality- each of the concepts listed above can have its own module. Modules boundaries are controlled- memory is usually not shared,\nand communication is mostly through message passing. Function calls also occur for some functions, like getting a timestamp or unblocking a task on a\nschedule.\nA module may implement a hardware interface, a mission specific requirement like the managment of science data, or the management of a particular algorithm.\nThey tend to have acronyms for their names, like TBL for table management, SC for stored command management, or SB for a software bus.\nEach module is a sigificant amount of work requiring design and implementation, review, documention, and testing. The testing can be on a unit level, and a\nsystem level when possible.\nCommands and Telemetry\nFlight systems have a asymmetric communication model with the ground system. The distinction\nbetween packets received by your system, commands, and packets produced by your system,\ntelemetry, appears to be universal in these designs, and influences a lot of design.\nCommands\nGoing from the ground system or another flight system to your flight system are commands-\npackets, often small, that contain information about what actions to take. There is almost\nalways one hardware interface that accepts commands.\nCommands can contain data blocks in some cases, but they are often very short containing\nnot much more then more opcode indicting which action to take, followed by zero or more\narguments to control how the action is taken. The cases where a command contains a data\nblock might be to upload some configuration to the system, or to provide a small file.\nCommands are also sometimes called telecommands in analogy with telemetry. Some examples of\nwhat actions would be commands are:\n\nReset the system\nCapture an image\nCreate a report\nRun a pre-loaded command sequence\nTurn on or off power to a system\nChange mode\nClear storage\n\nTelemetry\nTelemetry packets can larger, and each contain a particular report about the state of a system,\nsometimes called housekeeping or health and status, or a block of data the system needs to\ndownlink, like a block of file data or a science measurement.\nUnlike commands, there can be many interfaces that provide telemetry. This depends on the\narchitecture of your system, but you may have a health and status interface as well as a higher\nspeed science downlink interface to get your data into a storage system.\nSome examples of telemetry packets would be:\n\nHealth and Status with the state of your system's CSCs\nScience measurements packets with the contents of a sensors measurement\nData downlink packets, either containing the data in a file, or a report generated about\nthe status of your software.\nEvent message packets containing one or more message generated by your software\nSubsystem telemetry generated by another system and received by your software. I recommend\nwrapping this kind of data in a new header generated by your system, even if you used the\nsame protocol as the subsystem.\n\nEvent Messages / Software Messages\nOne mechanism that is hugely useful in flight software is the capability to generate small\nmessages from anywhere in your software. These are either called event messages or software messages.\nIn some systems they contain text, and in others they contain binary data. For smaller systems,\ntext is nice because the human operator will want to look over these messages, and it gives you\na simple way to allow your software to communicate information to you in a quick and easy\nway.\nFor larger projects, binary data can be preferable to text. You can have a ground system\nmonitor for binary data more easily then it can parse text, and you can store and retrieve\nbinary data parameters in a database more easily then text. The tradeoff is that if you\nwant human readable output, you have to contruct it in your ground system.\nOne recommendation I have when designing event message systems is to provide a timestamp along\nwith every message, and to provide microsecond accuracy. This makes event messages a way\nto timestamp your softwares actions, giving you insight into its operation that is otherwise\nlost.\nExamples of software messages might be:\n\nSystem initialized successfully\nMemory corruption found, along with data on where the corruption was found\nScience data collected, along with the time and parameters for the data collection\nCommand rejected, along with some data on why it was rejected\nTemperature out of safe range, along with which temperature and its current value\n\nUse software messages liberally, reporting most things that your software does. However, be\ncareful to not to allow your software to report messages constantly, or they will drown\nout rarer but important messages.\nLabel your messages with which software component generated them, with a number indicating\nwhich message was generated, and with a severity indicating how important the message is.\nExamples of severities are warning, error, critical error, information, or routine.\nModing\nThese system have distinct modes that they can occupy. These should be designed early on\nas they influence a lot of parts of the system, and you need to decided what parts of the\nsystem can be used in each mode, and how to limit your system to only act appropriately for\nits mode.\nDesigning the system's state machine\nis a tricky thing- you have to be careful about limiting how many modes you have and what\ntransitions are possible. Each mode should have the system in a well defined state, and if\nthe system does not reach that state then you have to decide how to report that and what\n\"mode\" you are in for those cases.\nSystem states can be things like the power status of your subsystems. Ensuring this status\ncan also be tricky- you don't want your system to be too smart in trying to reach a particular\nstate if you can help it.\nExamples of modes might be Safe mode, Standby mode, Operation Mode, Science Mode, Idle Mode,\nor Configuration Mode. Each one would be named to reflect the way the system is operated while\nit occupies that mode. Note that while systems and subsystems have modes, there may be\noperational modes that are not part of the system, but are ways of using the system\nthat are for the human operators.\nComplex Algorithms\nIts common that flight software contains algorithms that are developed by an expert in some field. This can be something like predicting the geometry of a system\nthroughout its orbit, the sequence of actions for the system's main task like collecting science data, or other algorithms. Each of these is a challenge in software-\nthe algorithm is best understood by someone who is rarely a software engineer, and the implemention must be verified by a combination of software testing and \nalgorithm testing. The boundary between what is the responsiblity of the software engineer and the domain expert can be difficult.\nI've had good experience with algorithm designers that are willing to go through software processes, will provide test cases for me to run against my implementation,\nand will go over the implementation with me.\nOne lesson I've learned is to always set up your algorithm so it can be run off the flight system- it should be able to run on a laptop by anyone who needs to.\nThis allows us to experiment with the algorithm, do debugging in case of problems, and allow people to do their own analysis without flight software support.\nSoftware Tools\nOne lesson that I have taken to heart in the last year or so is that flight software teams need to produce tools. You need tools for decoding your telemetry, even if you\nalso have a ground system. You need tools to monitor for warnings and errors so they don't go unnoticed. You need tools for building your configuration tables, for\nvisualizing your system's operation, for simulating your subsystems.\nHaving tools for these things is a huge productivity boost. It also gives you the ability to review your processes- if you look over telemetry reports by hand and miss something,\nyou might miss it again, but if your tool misses something, you just change your tool and it will never miss that particular thing again. Your tools can be reviewed, you can\nreport what they do, and you can provide them to people in your project- it gives you a way to encode your expertise with your software into something other people can use.\nI have been writing a new tool every month or so for a while now, and I find that I'm a must bigger asset to my projects when I put in the time and effort to produce\nthese programs. In my case, they are usually either LabWindows GUI programs, simple command line C programs, or personal tools in Haskell or Lua that I use for one-off\ntasks or for visualizations that I have limited use for.\nSoftware Updating\nThe ability to update software in operation is vital. Its own of the reason to prefer doing things in software when possible- software is softer then firmware and hardware,\nas you might expect. This is a delicate process as a mistake here can render a system unbootable and end your mission. Test this as much as possible and always do it in the\nsame way.\nIts preferable to build your software into a single image when possible. This image can be stored in a persistant memory device like flash, and can be stored redundantly\nand with CRCs or other checks. My experience has been to prefer triple redundancy whenever possible, and to store a CRC32 with the data so you can check integrity without\nhaving to compare the images. One other detail is if you have no valid images, nominate one to boot anyway- its a last ditch effort but if all your images are corrupt its\nworth trying to boot so you can fix the problem with a running system just hope your corruption is in an non-vital area.\nThere will usually also be more then one version of the software on a system. My experience is that it is much better to keep a golden image that is never updated and a\nmain image that is used for operations then to allow multiple images that can each be updated. Keep this simple and avoid the possibility of confusion- when confusion is\npossible it will occur.\nFlight Software Reviews\nI've come to realize that software reviews are a vital part of creating high quality software. They do not ensure that software is high quality, but not holding reviews ensures\nthat it is not. Reviews don't just increase your software quality, they help with sharing knowledge about design and interfaces, they increase consistancy, and they\nmake you think about your systems from other people's perspectives.\nFor flight software reviews, my experience is that your reviewers should look over the code or documentation under review before hand and come with issues. Some reviews\nand go over the material during the review, but this is less effective, and its easier to miss things.\nReview issues must be tracked and closed one way or another. They can be deffered if necessary, or tracked by other systems, but they must not be dropped until there is some\nkind of resolution. This doesn't mean you have to fix every issues, but you at least have to document what you did and why.\nReviews should be harsh- you should nitpick and argument over everything. If you are going in with a design, be ready to defend it. I've found that vigorous debate in reviews\nkeeps your software at its best, and lax reviews are much less helpful. Its possible to get bogged down in nitpicking, or to bike-shed, but if you have a good moderator who\nkeeps the review on track then you can get a huge amount from each review.\nLook for everything you can in your review- is the documentation accurate and useful?, is the software as simple as it can be?, does it have edge case or can it be used\nincorrectly?, does it check every error condition?, does it present issues with future maintanance or changes?, does it meet its requirements?, does it correctly use its interfaces\nwith other software components?, does it present a useable interface out to other components?, does it perform well (when that is important)?, does it report its status or is there\nmore information you might want in case of a problem?, does it fail cleanly? There is a lot to think about, and reviews can take a considerable amount of each persons time for each \nreview they participate in.\nOne word of caution however- reviews are not a silver bullet. The result of a review is usually better software, but it often feels like a hill-climbing this to me. If the\nsoftware is badly designed, or doesn't meet its requirements, a review may not be able to fix that. Consider holding design meetings beforehand to vet each software component's\ndesign, and consider holding re-reviews if too much needs to be changed. If possible, review early and often so you don't go too far down a path with your software before learning\nthat someone has a serious issue with its design or implementation.\nFlight Software Mentaliity\nThere is a lot to say here, but I just want to say that I've learned to prefer flight software that is simple, uses as few concepts and syntax as possible, is as consistant\nin any way possible (variable and function names, checking, messaging, testing, debugging, comment- every you can), does not have too much extra functionality that can\nlead to errors while having nicities that your operators will thank you for, checks all possible error conditions, provides insight into its operation and is loud about\nall errors, contains as little state as possible, and as a rule is simple above almost anything else. It must be reviewable both by your coworkers, and by you in a year\nwhen you have forgotten how it works.\nFlight software is much, much more risk adverse then other software. This shows up in all places, and can lead to designs that would be hard to understand in other software.\nWe have a great deal of flexibility in software with how to do things, but in flight software we have to be more restricted and careful with our designs. It is better to\nlimit how the system works whenever possible so that only correct behavior is possible. We have to be very pessimistic: expect errors, expect hardware failures, expect\nsoftware failures (even in our own software), expect anything you can think of.\nFlight Software's Role\nAgain, there is too much to say, but I will try. This is something I am always learning about and trying to improve, but these are my current thoughts.\nThe software discipline needs to get people thinking about their conops and how they want to operate a system. We need to let them know\nwhat software can do and what the options are taking into account cost, complexity, and the effect of each feature on the software as a whole. We need to keep people up to date\non progress and implemention- people have a hard time understanding software, and we need to communicate what we are doing and why. We need to be transparent- our software repositories\nare a resource to the project and not just our own. Our documentation is important for operators. Our design decisions effect people just like the decisions of any other disicpline, and\nwe need to communicate those decisions and why we made them to the project, documenting our reasoning for the day that our implementation effects other peoples jobs.\nSoftware needs to be part of a project early on to get its needs and requirement in the mix, and to inform people about the cost and ability of software systems. People over and under\nestimate software in many areas and need a software domain expert to answer these questions. On the other hard, software often has little work early on, in the mission concept planning.\nIn that stage I think we can provide engineering insight and just help when possible, knowing that the actual role software itself is a long way off.\nSoftware needs to follow best practices and be ready to answer questions about your approach to requirements, design, development, testing, reviews, and releases. You need to track\nproblems with software, to track issues from reviews, and to track and document what testing has been done with what versions of software.\n","id":"https://nsmryan.github.com.com/flight-software-architecture/","title":"Flight Software Architecture"},"https://nsmryan.github.com.com/flight-software-components-events/":{"body":"This is the first in a series of posts on different software components that I've seen in flight software systems.\nThis continues the theme of this blog as a place to talk about what flight software is like for me at NASA Langley,\nwhere I work on science instruments for space, and some drone work on the ground.\nIt seems like programs in a particular programming domain there are certain software components that are in just about every production program. I\nsee this in games where there is always some kind rendering engine, often a physics engine, perhaps logging, events, user input\nhandling, configuration management, and all sorts of things. Its the same in flight software- most large flight software systems\nseem to have certain components, and it is useful to understand what they are and what they look like.\nI will go over as many of these systems as I can, and give some experience with uses and problems involves, different design choices,\nand anything else I can think of. The discussion will be colored by my experience in class C and class B software for science applications,\nwhich I know is different from human spaceflight, different from purely research code, and different from how many are doing things in industry.\nIn other words, understand what I say here in context- I have 7 years of experience in flight software at NASA, but that doesn't make me an expert\non space or even NASA software.\nThe discussion will focus on Langley software p have worked on, as well as of course the NASA flight software system cFE/CFS.\nEvents\nFlight software systems always produce periodic packets of status information, called Health and Status or Housekeeping. These\nmessages are good for periodic information, sampled data like temperatures or currents, or counts of occurrances within the system. Its\nnot good for rare events, high rate information, or a large number of rarely used structures. Sometimes we want to report an error to the user,\na sequence of quick events, or produce a stream of events to give some insight into whats happening onboard. With periodic data we might need\nflags to indicate events, and we would need space for everything that could possibly happen. The other option is to provide some kind of\nasynchronous way to produce data to send to the ground.\nEvents, sometimes called software messages, provide a means to record this kind of data. Any important event, error situation, or the start, stop,\nand progress of a long running process can be marked by an event. Usually these are very easy to add, and you end up with many (hundreds in my experience)\nof individuals events that your system can produce. Examples would be the start of a file transfer, an error on a hardware bus, the receipt of an incorrectly\nformatted command, or a limit exceedance. These may come with additional data, like which limit was exceeded, which file was transferred, what the\nerror was.\nThese events can come in many forms, and can be used in a variety of ways, which I hope to get into below.\nWhats in an Event?\nEvents are marked by calling a function that records the information for the event, and some meta information. This usually consists of an ID for the\nsoftware component that produced the event, and an identifier for the event that uniquely identifies it to the user. It may contain a text string for a\nhuman operator to read, as in cFE, or it may be a series of fixed size integers, or a structure of data whose interpretation is dependant on the event ID.\nOne thing to consider is that the component ID and message ID can be very useful for filtering messages. You can even use events for fault detection- if an event\nindicates a particular problem it can be tied to a fault isolation or recovery system.\nTimestamping\nOne consideration that I've learned is to make sure that each and every event is timestamped to at least microsecond accuracy. It is extremely useful\nto be able to trace what happens in your system with that level of resolution. One way to do this is to queue the information provided in the event function,\nalong with the timestamp, and then to have a task that retrieves from this queue and turns events in packets.\nThis might be useful if an error occurs and you want to correlate it with other data, or there is a sequence of events that need precise timing and you want\nto record the actual times, or different parts of the system are performing coordinated actions, and the timestamps show the true sequence that occurred.\nSeverity\nOne additional feature we can add here is to mark each event with a severity. These are very much like log levels, and indicate how to show or process the event.\nExamples are Informational, Warning, and Error. Other severities are possible, like Critical error for errors that may prevent the system from continueing to operate.\nOne consideration when deciding on severities is that they must be used consistently throughout the system. The severities are provided with the event data by the code\nthat generated the event, and chaning them will likely require a software update. It should be possible to tie events to a table of severities if you really wanted them\nto be updatable, but I've never gone down that route.\nIts very important to have a consistent idea of the meaning of the severities when considering the reaction of the ground system. The limits in the ground system \nmay or may not match the severities given by the flight software, and it can be messy when two systems disagree like this. If the ground system is the only place\nwhere the severity is used, consider checking the event IDs in the ground system and not in the flight system for flexibility and consistency.\nAnother thing to consider is whether a particular event can have multiple severities or not. It can happen that the same situation is sometimes good and sometimes\nbad, so it may come with different severities. There is an option to make a new event in this case just to keep severity consistent and tie it to the event identifier.\nEvent Contents\nThe cFE style of events as text strings has some advantages- it makes it very easy to read a log of events and understand what your system is doing. There is\nno extra effort required when an event is added to the software to display it- it comes with its own text representation. This is very convienent for some systems,\nbut certainly has its drawbacks. The main problem is that text is not easy for computers to process, and if you want to look through the data associated with an\nevent over time programmatically, text strings makes it very difficult to get this. \nThe other possibility is to provide binary data. This does make it hard to display to a user- you need to register each message somehow, and possibly provide a\nway to turn its contents into a string. I've done this with an AWK script before which produces the code to at least name each event, although in my experience\nits too much work to truely decode each event, and we don't end up with good reporting on events.\nWhether your events are going to be binary or strings you have to consider the problem of multiple arguments. There are several variations here- for strings you\nmight want to implement printf style formatting system so that your text strings can contain parameters relevant to the event, or for binary data you might want\nto provide a variable number of integer arguments. You could also just provide a pointer to a buffer contain the event data for event systems with binary data,\nbut its much easy to just provide a couple parameters then to create a struct when calling the function to create an event. If you are using C++ the binary event\ndata case becomes simplier because you can provide default arguments of 0.\nIf at all possible, use LINE when producing events to get the exact location in the code that the event occurred. In principal FILE could be used, \nperhaps by mapping files to integers, or just by transferring the whole file name in the event message, but in my experience the line number and module ID\nis enough to find the exact location within the codebase that generated a particular event.\nGeneric Messages\nThere are many situations within a system that merit an event that are common across modules, like a full queue, an errno from the operating system, or\na command that contains out of limit parameters. In this case it is possible to define either- a separate event ID for each situtation for each module,\nor a generic event ID used by all modules. In the latter case, the module ID is used to uniquely determine the source of the event, so there is no \nconfusion despite the shared event ID. There are advantages to both designs, either resulting in perfectly unique events which can mean slightly different\nthings in each module, or shared events which reduce the number of events, make it easier to filter and process events, but which might result in slightly\ndifferent uses across different modules.\nWhitelisting/Blacklisting\nOne final consideration is whether you want to protect against situations in which a module starts to send out messages continuously. Usually its better\nto avoid event messages when something occurs often (which would flood the list of events making it hard to find useful information). However, sometimes\nan error can cause a code path to occur more frequently then expected and an event may start to flood the system. In this case, it may be worth while\ntracking the number of messages received over a time period (say, 1 second) and then rejecting new messages after a certain limit. This can be done with\na table of module ID, counting the messages from that system, or could be done on a per-event ID basis. When a module or event is blocked, it is\nadded to the 'blacklist' meaning its events are rejected until a command is sent to accept them again.\nThe nice thing about a mechanism like this is that in the event of a problem that causes a flood of messages, there may be messages from other modules that\nexplain what happened that would get rejected if the module in error is filling the queues for events. Its also nice because you can avoid having your system\nspend a lot of time recording events, and filling your storage if you store them. \nIf you add this feature, consider having a way to 'whitelist' the module, allowing all of its messages ot get through. This is important in cases where you\ndo actually want all the messages, or a module is so vital that you want any data it produces even if it drowns out messages from other systems.\nEvents in Ground Systems\nMost of this post has been about events in the flight software, but there needs to be work on the ground side as well. Events are like a log, \nand are very useful simply as a list in chronological order. In addition, special processing is often useful for certain events, as they might\nprovide information like the start and end times of data capture that can be visualized separately and give insight into what the system has \nbeen doing.\nAnother consideration is limits for events- events are not like temperatures which can be limited with persistence, but are rather discrete things.\nIf an event indicates an error, it can be shown as an out of limit condition, or even shown as a separate kind of limit indicating a state of the\nsystem. When an event occurs that indicates a warning or error its very important to understand why- even a warning could indicate a larger problem\nif not fully understood. I've seen cases where a warning indicated a failure of a major part of a system, where the first manifestation was a queue\nfilling up and resulting in a periodic message.\nConclusion\nThis was a fairly short post, but events are not exactly the most complex thing. They are just a way to add logging to a system that does not work well with\ntext logging, where we are more likely to produce binary packets then lines of text.\nIf you are creating an embedded system, definitely consider adding an event system. It is a huge help for reporting information, tracking what your system is\ndoing, getting to the bottom of anamolies, and generally getting insight into the operation of your system.\nThanks for reading!\n","id":"https://nsmryan.github.com.com/flight-software-components-events/","title":"Flight Software Components - Events"},"https://nsmryan.github.com.com/floating-bar/":{"body":"There is an awesome power here by Inigo Quilez\nwhich develops his idea of a \"floating bar\" number. The core idea is to create a representation of rational\nnumbers that mimicks the \"floating\" property of floating points numbers.\nIts an amazing article, and while he develops the concept throughly, more work on this seems like it could be\nfruitful. The investigation for this article is related to graphics rendering, but I can't help work happens\nto other applications when floating point numbers are replaced by floating bar numbers. I imagine there\nare certain applicatiosn out there where a floating bar could fit better then a floating point.\nAnyway, I just wanted to put a link to this post on my blog because I love these alternative view of common\nthings, and I love thinking about the alternate world they imply.\nEnjoy!\n","id":"https://nsmryan.github.com.com/floating-bar/","title":"Floating Bar Numbers"},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"body":"Yet another little Elm experiment!\nThis time I wanted to visualize quad trees. By far the hardest part of this whole experience\nwas figuring out how to draw them. The mouse positions are received with the positive y direction\ngoing downwards from the top of the screen, the Graphics.Collage routines expect x and y\nto be centered in the middle of the screen (with y positive going up), and I structured the\ntrees to expect the origin to be the bottom left (y positive going up)!\nYou can play with it  here\nThe code is on my github repository in the Elm directory as\nquad.elm\n","id":"https://nsmryan.github.com.com/fourth-elm-project-quad/","title":"Fourth Elm Project- Quad"},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"body":"This post just lists some links to videos with Haskell content.\nSome of the best presenters are Conal Elliot, Gabriel Gonzalez and Edward Kmett.\nThere are a lot of good videos in this list. Its worth looking through them if you\nare interested in Haskell and Functional Programming.\nICFP\nhttps://www.youtube.com/channel/UCwRL68qZFfub1Ep1EScfmBw/videos\nICFP 2012 and 2014\nhttps://www.youtube.com/channel/UCP9g4dLR7xt6KzCYntNqYcw/videos\nCompose Conference\nhttps://www.youtube.com/channel/UC0pEknZxL7Q1j0Ok8qImWdQ/videos\nFP Syd\nhttps://www.youtube.com/channel/UCm1omK1YKzCzCV2yemL_NpA/videos?shelf_id=0&amp;view=0&amp;sort=dd\nHaskell to Hardware\nhttps://vimeo.com/125504650\nNew York Haskell\nhttps://www.youtube.com/channel/UCzNYHE7Kj6pBqq5h8LG9Zcg/videos\nYOW! Australia\nhttps://www.youtube.com/user/YOWAustralia/videos\nGoogle Tech Talks\nSome of the Haskell videos come from ZuriHac\nMonadic Warsaw\nhttps://www.youtube.com/channel/UCCeiYYR2fCXarkfSqqFBwuA\nBoston Haskell\nhttps://www.youtube.com/channel/UCUCpgCWjaniUkX88wZrK_Ig/videos\nBegriffs Videos:\nJust some of my favorite from begriffs\nhttps://begriffs.com/posts/2015-06-28-haskell-to-hardware.html\nhttps://begriffs.com/posts/2016-06-27-fast-haskell-regexes.html\nhttps://begriffs.com/posts/2015-12-14-fft-with-circat.html\n","id":"https://nsmryan.github.com.com/functional-programming-conference-videos/","title":"Functional Programming Conference Videos"},"https://nsmryan.github.com.com/generic-c/":{"body":"This post is about how to write generic code in C. This is a problem I often have- I write tools in C which are fairly\nsimple, but often would benefit from more advanced techniques as they get larger. I use C because it is the language we use for flight code,\nit is a simple language that I can expect people to know, and it is easier to control the layout of memory then other languages.\nI can write a useful GUI program in LabWindows in hours, talk to hardware, and process telemetry from other systems. Its by no means\nmy favorite language, but its often the right tool for the work that I do.\nThis is a language that does not include a lot of means for abstraction, and we will have to pull some tricks to reduce redundancy\nand express more complex concepts. These things do not feel native to the language, and I feel like I am usually using a fairly\nprimitive set of building blocks to create my programs.\nThe techniques we will look at are manual and its easier to get wrong in C then other languages, but still worth thinking about.\nSo- lets look at what we can do to get some polymorphism in C when we are not ready or able to reach for other languages.\nSome Context\nThe C language is fairly low level and explict. Sometimes it is not low level enough, and often it is much too low level.\nIn flight code (any code that runs on the embedded systems for space or aero applications) we keep a small subset of C and stray very little\ninto more advanced techniques in order to keep the code as understandable as possible. For me then, these techniques are things I would\nuse when no one is looking too closely at my code, or I'm writing something for myself.\nThe C Language\nThe main constructions in C are procedures, structs, unions, enums, global values, and \nproprocessor directives. I'm grouping the preprocessor into C as they are part of C programs in practice,\neven if they are a separate stage of compilation before the C language itself. C's type system\nhas primitive types (int, char, etc), the array type constructor, user types in the form\nof structs and unions, type alias in typedefs, and pointer types.\nOf these, pointer types give the most means for abstraction- they let you talk about data in an uniform way (through an address) that does not\ndepend on the structure of the data, as the pointer is always the same form regardless of what it points to.\nIn addition, function pointers get you the bare minimum to treat computation as a subject that one can control in\nC. There is no way to create functions at run time such as through composition, but at least we have first order functions.\nThe Cast\nPre-Processor Magic\nOne way to get a form of polymorphism in your code is to essentially expand it automatically to monomorphic code-\nin other words, create an entirely separate copy for each type you are interested in manipulating. This can be\ndone with the preprocessor, allowing entire data structures and their interfaces to be generated per type.\nThis reminds me in logic of expanding your inference rules so that there is technically a separate rule for each\nproposition, rather then using quantification and saying that the rules apply for all propositions.\nThis has the advantage of type safety, since the code is generated for a particular type, and it may have some\nperformance advantages when the implementation can make use of properties of the type like its size to generate\nspecific code like memory layouts.\nOne disadvantage is complexity- both in the implementation which must be written mostly within the pre-processor,\nand in the user code which must generate a great deal of code that can't be read directly. Even reading the generated\ncode is not as good as having simple code to read in the first place. I imagine this code is hard to write and test,\nalthough I've never done it myself.\nAn example of this approach is in sglib where the author create type safe\ndata structures and some higher order functionality like sorting with user-defined functions, in C.\nOne other note here is that I've seen this technique done manually as well- duplicate data structures and functions with\nalmost no difference all through codebases. This is bad programming practice and is wasteful in time for programming, testing,\nand reviewing, but in some contexts its hard to avoid.\nvoid * \nAnother possibility is to simply drop into the world of untyped data, making everything a pointer to void. This means\nthat you take responsibility for the types of your data. You can do this by always using void pointers to a particular type\nwith a section of code, such as in a data structure like a tree where all nodes point to data of the same type, or you can\ndo a manual kind of sum type and make an enum with all the types you want to use, tagging your pointers with a value of this enum\nto distinguish what it points to. This amounts to carving out a universe of types from the C type system, and when I've done this usually\nI only allow basic types like uint8, int16, uint32, etc, and then a generic buffer or C string type.\nThe advantage of this techinque is that your code works on many data types- you can store information like the size of the data along with it,\nand allocate, deallocate, move, and manipulate your data without knowing what it is. This is almost a parametric polymorphism in the sense that if you\ntruely do not know what your data contains, so you can only perform operations on it that work on all data. Nothing stops you from doing otherwise,\nbut we are in C and we have to accept this responsibility.\nThis is the technique I go for most often. I don't enjoy it, but it comes in useful too often to ignore.\nI know of no way to enforce constraints in this case, unless you consider the next technique a kind of constraint.\nOne example of this style can be found here. This is also the style used in LabWindows for its\ngeneric data structures in the programmer's toolbox.\nRow Polymorphism\nThis is perhaps the most interesting technique, at least to me. In this case you define a series of structures, some of which contain others as their\nfirst field. Doing this means that you can upcast a struct into one of the ones it contains, losing information about what it contains. This gives it a\nsimilar feel to subtyping (although this does not hold up formally), where you can go own the tree of subtypes and get more information, and up the tree\nto lose information when you want to express something more generically.\nI've wanted to explore this in more detail, as it opens up a lot of possibiilty in the restricted world of C. You do have to be careful with memory layout-\nyou can no longer assume you know the size of a structure based on its type. You are also restricted in the sense that you can extend in only one way per\nstruct- you can extend with new fields, but the order of extensions matters without some kind of dictionary or table lookup.\nOne example of this technique is the Linux kernel. Linux apparently uses this technique to embed structs in other struct,\nalong with macros for getting out to the containing structure.\nAnother example might be Cello, which is a very different implementation then the one used in Linux, and does use a lookup\nto dispatch functions. I hope to write a bit more about this in the future, but its definitely worth checking out, even if only for fun.\n_Generic\nIn C11 there was a feature added to the C language called _Generic. This is not a general technique for generic programming- all it allows you to do\nis to select a function based on a type. You can then write macros that select the right function but give a single interface which is nice, but to my knowledge\nthere is no way to use this more generally- you have to know beforehand which types you are concerned with. Its still a fine feature, its just got a more limited\napplication then the techniques above.\nConclusion\nI tend to stick to void* style generic programming in C because it is the most straightforward in my opinion and the easiest to review for. I'm more interested\nin sticking to conventions and keeping code simple then powerful and generic. I am even willing to trade the type safety of macros for code that uses the simplest\nsubset of C possible, but that is mostly my training and my application domain talking. I treat C more carefully than other languages because my C code must be\nhigher quality then my other code.\nAlso,for reference, here is another treatment of these same topics.\n","id":"https://nsmryan.github.com.com/generic-c/","title":"Generic C"},"https://nsmryan.github.com.com/git-working/":{"body":"The blog setup has been simplified a bit. Now I build the website locally, where I can test and commit if I want, and then I just copy the contents to the linode server.\nThis is less ideal then pushing a version to the server, but its easier and lowers the barrier to entry for writing new posts\n","id":"https://nsmryan.github.com.com/git-working/","title":"Simplified Blog Setup"},"https://nsmryan.github.com.com/handles-for-abstraction/":{"body":"Introduction\nI've been thinking about the use of the handle concept as a means of abstraction in C, and I wanted\nto give some details to one way to implement and use this idea. Its essentially taking the most basic\nmeans of changing an implementation in C, headers and implementation files, and introducing a single\nlevel of indirection such that the particular implementation can be selected at runtime. This introduces\na number of oppertunities which can be used to get some nice things that we usually don't have in C.\nThe particular implementation\nis very different from the one I've typically seen. It is the simplest implementation I can think of,\nnot requiring any kind of allocation, tables, or resource tracking. This whole thing is done with structs,\ntypedefs, functions, and function pointers. There are no macros to hide complexity- everything is done\nexplicitly with as low complexity as I can manage. The core concept is that we usually bind a function\nprototype to a particular implementation. In this case that implementation simply redirects to another function\nthrough a function pointer (dispatching based on runtime information).\nAbstraction\nThere are many ways to add abstraction\nin C, both in the form of libraries, macros, or entire languages started by extensions to C. Certainly\nwe have C++, Objective C, C#, etc by adding to the language itself. However, we don't always have\nthis option, especially in embedded systems or legacy systems. Looking for pure C ways to control complexity is\ncertainly worth looking into, and handles give a good amount of flexibility for the relatively low additional\ncomplexity in my experience.\nAbstraction in C be done in many ways- some programs add object systems like GObject, abstraction\nlike publish/subscribe systems (SB App in cFS), or other infrastructure. Everything comes with tradeoffs, and certainly we have to consider\nthese tradeoffs, especially in flight software where the cost of complexity is high. This is where\nthe lower complexity can come in handy.\nThere are also more transformative changes like using fat pointers to add all sorts of capabilities \n(see Cello), or an object system like COS. These add a\ngreat complexity to programs from the start, and I imagine that this pays off more in very large systems or when\none is very familiar with the language. I don't think I would want to introduce these in flight software, although\nI know COS was intended for large scientific computing programs. What I would consider, however, is a concept or\nlibrary that provides some means of abstraction without being quite so disruptive to the programs that use them. I'm\nalso not looking to add an object system or reinvent the world within a system- I would rather just have some means\nto abstract when and where I need it.\nIn the case of handles, we take a particular API and produce an abstract implementation that can be redirected to concrete\nimplementations, allowing multiple implementations to exist at a time. We can have testing implementations, real ones,\nand mixed implementations which combine testing and real work. We have even have some interesting higher level implementations\nwhich transform implementations. In principal we could also compile with a concrete implementation at some point, using the\nindirection of the handle only during development. However, this indirection can be useful in production systems as it allows\nmultiple implementations of a single interface to exist within a single system at the same time.\nOne nice thing here is that the API's can be small and self contained. These are not monolithic hardware abstraction layers,\noperation system abstraction layers, or do they require you to shoehorn all use of a device through the same API (like treating\neverything as a file). Instead you get APIs specific to each concept (logging, mutexes, files, networking, etc) which can be\nused independantly, and which take very little code to deine. You can redifine the interface for each operating system,\nor have multiple implementations for different hardware devices, or have something like ML functors which transform interfaces.\nWith that introduction, lets go through a case study by defining a logging interface, implemenent the abstract implmentation,\nand then look at a concrete implementation.\nLogging\nFor our case study of a logging system, we will start by defining an interface and proceed to an implementation which\nsimply prints text to the screen using printf. A full implemenatation would open files and place text, but this one\nmight be used for debugging, or in addition to an implementation which logs to a file.\nInterface\nEach interface is written individually- each is a simple application of the concept, and each is pretty easy to write.\nWe only need a small number of functions\nto log raw text, log entries of text, and to close a log. Other functions could be added, but for this post we will focus on\nthese three.\nLets start with a simple header file defining the Log struct that we will use as a handle to a log:\n#ifndef __HANDLE_LOGGING__\n#define __HANDLE_LOGGING__\n\n/* Handle implementation for logging */\ntypedef enum LogLevel\n{\n  LOG_LEVEL_INFORMATIONAL,\n  LOG_LEVEL_WARNING,\n  LOG_LEVEL_ERROR,\n  LOG_LEVEL_DEBUG,\n  LOG_LEVEL_TRACE,\n} LogLevel;\n\ntypedef struct Log;\n\ntypedef int LogTextFunc(struct Log *log, const char *log_text);\ntypedef int LogEntryFunc(struct Log *log, LogLevel level, const char *log_text);\ntypedef int LogCloseFunc(struct Log *log);\n\ntypedef struct Log {\n  LogTextFunc *log;\n  LogEntryFunc *entry;\n  LogCloseFunc *close;\n} Log;\n\nint LogText(Log *log, const char *log_text);\nint LogEntry(Log *log, LogLevel level, const char *log_text);\nint LogClose(Log *log);\n\n#endif /* def __HANDLE_LOGGING__ */\n\nWe start with include guards, and we need an enum for the particular interface we are defining called\nLogLevel, which indicates the severity of a log entry\nThe next part is important- we need a forward declaration of our Log structure with the:\ntypedef struct Log;\n\nThis is the best way I've found to do this. We need the structure name to exist to define function pointer typedefs which use it, but the\nstruct Log will contain functions pointers using those typedefs, so we need a forward declaration to break the cycle.\nThe lines are typedefs which define LogTextFunc, LogEntryFunc, and LogCloseFunc.\nEach function takes a pointer to a struct as a first argument, and then as many arguments as required for the function.\nThe next thing to do is to define our struct. We need a field for each function in our interface, and fields for any data that is used by all interfaces.\nThis is done so that when we have one of these structures, we have a concrete implmentation of each of these functions which together are an implementation of the interface.\nNow that we have our struct, we define each of the functions that define our interface. This is a place where there is some duplication- the function definitions\nneed to be the same as the typedefs for function pointers before. I don't know of a way to avoid this, buts its not too be of a deal. Certainly we could\nimagine generating all of this code from a specification, as it is very formulaic. However, I have preferred to write it out to make things explicit.\nAt this point the interface is finished. We have a struct type to use as a handle (using pointers to the struct to keep the handles small and consistently sized),\nand function prototypes for each function we will be exposing to the user. In this case the functions are able to log raw text (Logtext), logging an entry with\na timestamp and log level (LogEntry), and to close a log (LogClose). We don't have a LogCreate or LogOpen in this design- creating logs is left to the \nparticular implementations as it may be different for each one.\nImplementation\nThe C file is so small I'll just show it without further ado:\n#include \"log.h\"\n\nint LogText(Log *log, const char *log_text) {\n  log-&gt;log(log, log_text);\n}\n\nint LogEntry(Log *log, LogLevel level, const char *log_text) {\n  log-&gt;entry(log, level, log_text);\n}\n\nint LogClose(Log *log) {\n  log-&gt;close(log);\n}\n\nThere is almost nothing to the implementation file for these interfaces. For each function in our interface, we just write a \nfunction which uses the given struct pointer to call the corresponding function within the struct. The LogText function\ncalls the 'log' function, LogEntry calls the 'entry' function, and LogClose calls 'close'.\nThe reason for this is that the functions we are \nexposing in our header file will be implemented multiple times, and we need a way to call the right set of function for a particular implementation.\nWe do this by placing pointers to those functions in a Log struct, and then calling one of these functions. The functions will then dispatch directly to\nthe function provided by the interface.\nThis is another place where we have some duplication- any functions we define must pass their parameters to the particular function implementation.\nNote the trick here- usually this file would do the actual logging. Instead, the functions in the header file are linked against an implementation that\ncalls a function pointer provided at runtime, allowing the function to do anything we want even though our code calls a particular function. This means\nthat the graph of dependancies will be very simple- we have moved dependencies to run time so we don't necessarily have to link against a particular\nimplementation when compiling. This could allow us, for example, to run the same object file in a test harness and then on a target system without\nrecompiling. Pretty neat.\nPrintf Logging\nNow lets go through an implementation of this interface that prints to the screen. This would be used for debugging, or could be combined with\nan implementation that tees log data to this implementation as well as one that actually writes to a file.\nWe will provide implementaions for each of the necessary functions, and then an additional function for initialing a Log struct to use this interface.\nInterface\n#ifndef __HANDLE_LOGGING_PRINT__\n#define __HANDLE_LOGGING_PRINT__\n\n#include \"log.h\"\n\n/* Concrete implementation for logging */\ntypedef struct LogPrint {\n  Log interface;\n} LogPrint;\n\nvoid LogPrintInit(LogPrint *log_print);\nint LogTextPrint(Log *log, const char *log_text);\nint LogEntryPrint(Log *log, LogLevel level, const char *log_text);\nint LogClosePrint(Log *log);\n\n#endif /* def __HANDLE_LOGGING_PRINT__ */\n\nWe have to define a new struct which will hold our interface (the Log struct of function pointers) and any additional data. In this case we don't need\nanything additional so the struct has only one field.\nWe then define function prototypes for our implementation of our interface's functions. Again, duplication is required which could be automated if desired,\nbut otherwise must be made to match up manually (this is C afterall).\nImplementation\nFor the implementation of the printf version of logging, we will start with an instance of the Log struct, and then\ndefine each of our functions. The global variable gv_log_print_interface is not entirely necessary- its just used to copy\nin the function pointers we will use for this implementation. The 'gv_' is a convention for 'global variable' if you haven't seen\nthat before.\n#include \"stdio.h\"\n\n#include \"logprint.h\"\n\n// The Log interface must be filled out with the function pointers defined for this implementation. \nLog gv_log_print_interface \n  = { LogTextPrint,\n      LogEntryPrint,\n    };\n\n// Implementations have custom init functions which provide\n// whatever parameters are necessary for their particular\n// use case.\nvoid LogPrintInit(LogPrint *log_print) {\n  log_print-&gt;interface = gv_log_print_interface;\n}\n\nint LogTextPrint(Log *log, const char *log_text) {\n  printf(\"Logged: %s\\n\", log_text);\n\n  return 0;\n}\n\nint LogEntryPrint(Log *log, LogLevel level, const char *log_text) {\n  int result = 0;\n\n  switch (level) {\n    case LOG_LEVEL_INFORMATIONAL:\n      printf(\"Info: %s\\n\", log_text);\n      break;\n\n    case LOG_LEVEL_WARNING:\n      printf(\"Warning: %s\\n\", log_text);\n      break;\n\n    case LOG_LEVEL_ERROR:\n      printf(\"Error: %s\\n\", log_text);\n      break;\n\n    case LOG_LEVEL_DEBUG:\n      printf(\"Debug: %s\\n\", log_text);\n      break;\n\n    case LOG_LEVEL_TRACE:\n      printf(\"Trace: %s\\n\", log_text);\n      break;\n\n    default:\n      result = -1;\n      break;\n  }\n\n  return result;\n}\n\n// There is nothing required to close this log, as it only prints to std out.\nint LogClosePrint(Log \\*log) {\n}\n\nTo initialize a printf log, we just copy the function pointers from our implementations into the Log struct we are given.\nIn this case that is all we need, but in general this function could do whatever is required to set up our log. Note that the\ninitialization function was left to the interface. This is because initializing may require any number of arguments so it is easier\nto let the implementation decide how it is initialized, even though every implementation will have to at least fill out a struct\nwith its function pointers.\nTo implement a function, we take in a Log pointer. This is our handle, and it must be to a LogPrint struct. We accept a Log pointer to\nsatisfy our interface, but then cast it to the particular type of struct for our implementation (like subtyping of some kind).\nIn this case we simply take our arguments and print them. In the case of LogEntryPrint we also print out the log level.\nNote that these functions would not be called directly- the user calls LogText or LogEntry, which then call a function pointer which pointers\nto LogTextPrint or LogTextEntry.\nDiscussion\nSo far we have defined an interface, which has to be done for each interface we want to defined (logging, serial, files, ethernet, etc) with a similar\nheader and implemenation file. Each one has the forward declaration of a struct, function pointer typedefs, a struct full of function pointer fields, and\nfunction prototypes. \nThe implementation file (.c file) contains implemenations that simple call the structs function pointers. This is done so that we can always call the interface's\nfunctions, like LogEntry, regardless of the implementation. When we call that function, the result will be the function we placed in our struct when we initialized it.\nThen, each time we want to define an implementation of this interface, we need a header file and C file which provides its own struct and functions. These can do\nwhatever we want. There are some implementations that could apply to any interface, like one that always succeeds (for testing) or always fails, or one that\ntakes two or more handles (pointers to struct with function pointers) as inputs and calls these, perhaps combining the results. This could be used to, for example,\ntee off data from a serial interface to both the interface and a log. We could also define interfaces that act as proxies, which might for example modify data\nbefore passing it on to another implementation, or might simply count how many times a function was called.\nUsage\nNow that we have an interface defined, and an implementation of that interface, lets make use of it. We will set up our implementaion, and then\ncall our interface. The result will be that the behavior of the code depends on the choice of implementation, and the code using the interface would\nnot have to change. If this were a large codebase which required logging we could use an implementation that logs to a file, test by logging to\nthe screen, and perhaps calling out to a logging framework for production use.\n#include \"log.h\"\n#include \"logprint.h\"\n\n\n/* Main function using the logging handle */\nint main(int argc, char *argv[]) {\n  // Create our LogPrint struct\n  LogPrint log_print;\n\n  // Initialize it with a function specific to the LogFile implementation\n  LogPrintInit(&amp;log_print);\n\n  // Log things, passing our LogFile structure.\n  LogEntry((Log*)&amp;log_print, LOG_LEVEL_TRACE, \"Logging started\");\n\n  LogText((Log*)&amp;log_print, \"Hello, Handles!\");\n\n  LogEntry((Log*)&amp;log_print, LOG_LEVEL_DEBUG, \"Debugging info\");\n\n  LogEntry((Log*)&amp;log_print, LOG_LEVEL_TRACE, \"Main finished\");\n}\nConclusion\nIn this post we have shown how to create a simple interface to a logging system, and produced a sample implementation which simply prints the the screen\nfor debugging. This concept could be applied to a wide range of iterfaces- operation system ones, drivers, hardware interfaces, or interfaces within \na codebase. Once an interface has been defined we can produce as many interfaces as we want, and use them in whatever combination we want. The code\nusing the interface does not need to change- it would just take a pointer to the implementation struct (perhaps many struct if we have many interfaces).\nWe could spend some time constructing these interfaces, especially if we have to create higher order interfaces which transform other interfaces to add\nfeatures.\nI believe that this concept could be useful. It provides some interesting directions for abstraction and extension of interfaces, and could be used to write\ncode that can be run on different operating systems, with different hardware, within a test framework, or against a simulator. This is important for complex\nalgorithms which must be run on a target system, but where testing and development could take place on a laptop.\nPerhaps the most exciting possibilities are transforming interfaces to add tracing, logging, or other capabilties. This can be used to add cross cutting concerns,\nadding and removing them without changing your code. I realize that this is like a Python decorator, and in fact it is like many things in many languages, but \nit is not what we are used to in C.\nThe real use case that motivated me to think about this was to abstract all effects (in the Haskell sense) from an algorithm with operating system dependancies,\nand which occurs over time. The idea was to see if algorithms which are not pure mappings from input to output could be abstracted and run without the rest of\nthe codebase. I've found that this is indeed possible if all its interfaces to other code are made into these handle abstractions. I can run the algorithm outside\nof the target computer, faster than real time, and add things like tracing, testing, and all sorts of capabilities to it.\nHopefully this is useful to someone. I hope to continue to talk about this concept in the future, as I think it is underutilzed yet provides a good tradeoff in \ncomplexity verse the advantages we get out of it.\n","id":"https://nsmryan.github.com.com/handles-for-abstraction/","title":"Handles for Abstraction"},"https://nsmryan.github.com.com/interests/":{"body":"This post is mostly a test of the website, but I thought I would also list some of the people I've been listening to recently:\n\n  Bret Victor- Just about everything this guy does is interesting. Look for \"Stop Drawing Dead Fish\", \"The Humane Representation of Thought\", \"Media for Thinking the Unthinkable\", and \"Seeing Spaces\"\n Jonathan Blow- The maker of Braid and The Witness, Jonathan Blow talks about a more mature form of video game design. He talks about meaningful work, respecting your players, and creating interesting games. Examples are \"How to Design Deep Games\", \"Video Games and the Human Condition\", \"A Programming Language for Games\"\n Darren Gray- I've also very much enjoyed Roguelike Radio, especially Darren Gray's very considered view of the rougelike genre.\n Edward Kmett- Kmett is always working on something interesting, and it always has to do with Haskell. Some articles are at \"https://www.schoolofhaskell.com/user/edwardk\", while some libraries he has:\n  \n     lens- implementing the concept of lens in a nice, practical way. Lots of fun math behind this.\n     discrimination- perform sorting and other tasks in linear time.\n     ad- automatic differentiation. This can be used to write functions and getting their derivatives automatically. He has talks about succinct data structures, lens, discrimination, and functional cache oblivious algorithms.\n     propagators- This seems to be his recent interest.\n     succient data structures- informally these are data structures that are partially compressed and allow certain operations to be performed on them without decompressing them first.\n  \n\n","id":"https://nsmryan.github.com.com/interests/","title":"Interesting Material"},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"body":"One of my goals with this blog is to talk about flight software- what it looks\nlike, how it is developed, and what it is like to be in the aerospace domain. I\nthink it would be nice to see more discussion of this kind of programming,\nespecially as space becomes available to more people through small satellites.\nTo do my part, I will discuss some of my thoughts on the Core Flight Executive\nand Core Flight Software system developed by NASA, along with the Operating\nsystem abstraction layer (OSAL) used by this project. This post will just be a\nbrief introduction to lay the groundwork for a more in depth look at the system.\nI want to be clear in that I only see a particular slice of the aerospace world-\nI don't work on planes or rockets or human rated systems . I have worked on a\nsafety critical piece of software for UAV applications, and the science payload\nSAGE III, and I'm currently working on a small satellite science mission called\nARCSTONE that will use CFE/CFS for its flight software. I say this to give some\ncontext in my background and where I'm coming from in this post.\nCFE/CFS\nThere are a number of resources on CFE/CFS out\nthere, including its github page, community\nsite, sourceforge\nsite, and the CFS\napplications on the NASA github.\nIn addition, the project has a significant amount of documentation available\nfor each module, both as PDF files and Doxygen pages included in the source\ndistribution.\nA brief overview is that CFE consists of a set of software components that\nprovide the main services used by flight software, whether that software is for\nspace, UAVs, or other embedded applications. It turns out that when writing\nflight software there are some system one seems to need on every project, and\nCFE is an attempt to package these systems up for reuse across many projects,\nwhile providing additional modules that are not used in all projects but are\nstill common. This is done in an operating system agnostic way, assisting\nportability.\nThese core components provide mechanisms for managing tables, sending packets\nbetween software components, logging system events, creating small messages to\ncommunicate the system's state to a user, allocating blocks of memory from a\npool, performing performance monitoring, managing files, managing time and\ntimestamping, and more.\nIn addition to these core modules, there are additional modules called apps that\nare part of the larger CFS system, where you can add whichever Apps you want to\nyour project to get additional capabilities that are common but not neccesarily\nin every project. Some examples of these additional modules are limit\nmonitoring, stored command execution, telemtry packet creation (HouseKeeping),\nfile management, data storage, and task scheduling.\nAll of these software modules do things like spawn tasks, create and use message\nqueues, semaphores, files, etc. When they need to do these things, they do not\ncall operating system functions directly, as that would tie the code to a\nparticular system. Instead they call functions defined in the header files of\nthe OSAL project. The OSAL software provides an\ninterface which is then implemented in a set of C files for a specific operating\nsystem. The operating systems available on github are Posix (which has worked\nfor me on both desktop and embedded Linux), VxWorks 6.7, and RTEMS. I've only\nhad experience running the Posix implementation of OSAL on Linux systems.\nThere seems to be a common confusing about the OSAL layer and CFS in general-\nif you write software as a CFS application there is absolutely nothing hiding\nthe operating system or hardware from you. It is more accurate to say that you\ncan choose to use the OSAL (and PSP) functions to make your software more\nportable, but if you need low level access to hardware you do so just as you\nmight in other software.\nRunning CFE/CFS\nThe CFE/CFS project has an extensive makefile system which builds the core\ncomponents including OSAL, CFE, and the PSP (the platform specific code that is not\npart of OSAL), and can be extended to call makefiles in subfolders of the apps\ndirectory in order to build additional modules.\nOnce CFS is built, you end up with a single executable file, a series of\nobject files, and a\ncfe_es_startup.scr.\nWhen the executable is run (core-linux.bin for the POSIX build), it starts\nup the CFE components, and reads the cfe_es_startup.scr file. This file\nlists the additional modules to load, and the executable will load each\none in turn and call an initialization function listed in the\ncfe_es_startup.scr file.\nAt this point you have a series of operating system threads running,\nmessage queues created, semaphores, and files open. The CFS flight\nsoftware is running, logging, updating time, perhaps executing a schedule\nof task executions using the SCH\napplication, creating telemetry packets which might be stored in a file by\nthe DS app, and so on.\nYou have to provide input and output to this system somehow, often with a\nproject specific module which know about your hardware's interfaces and perhaps\nthe ground system you are talking to. There are some modules called Command\nIngest and Telemetry Output, each of which has a \"lab\" version for development\nwhich forward commands over UDP to send to the Software Bus, and receive\ntelemetry packets from the Software Bus to send out over UDP.\nConclusion\nHopefully this provides some references and a vague idea of what CFE/CFS is. I\nhope to keep posting about this software, and get more into the architecture and\ntradeoffs it makes in future posts.\n","id":"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/","title":"Brief Introduction Flight Software - CFE/CFS"},"https://nsmryan.github.com.com/just-rust/":{"body":"I wanted to mention an awesome tool call just written in Rust.\nI've started using it in my everyday toolchain, and its been very pleasant and useful, so I wanted\nto mention it here.\nThe tool is very simple- you make a file called justfile or Justfile and add rules that, when run, perform\nsome action you want to take. This replaces the series of shell scripts, or the makefile, that might\ndevelop with a project which runs common commands like building, testing, or performing a frequent\naction.\nAt first I was somewhat skeptical- I was already using make for this kind of thing, and it was\nworking well enough without adding a new tool in the mix. However, when I gave 'just' a try,\nit made keeping these commands around much simpler and easier. The tool does only one thing,\nunlike make, and it is specialized for its use case.\nIts very easy to add a command, to list commands, and to run them. There are a couple extra features\nlike command arguments, but nothing like the huge documents describing how to use make.\nI expect to continue to use this tool as a simpler way to manage my project-specific commands, and if\nyou have any interest in simplifying your workflow, give it a try.\n","id":"https://nsmryan.github.com.com/just-rust/","title":"Just Rust"},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"body":"I have been teaching my twin brother Vim recently, which has lead to an insight- the\nkind of insight you get when you are forced to articulate something that you only know implicitly.\nThe insight is that when I use Vim, I make use of as many as 4 separate \"levels\" of movement, each of which makes larger\njumps but is less accurate then the next level. Each level requires a separate set of commands, and mastering each set\nmakes programming as a whole much, much faster. I use Vim partially for speed, so this is very important for me.\nThis kind of movement is a very important part of text editing- a project can have thousands, tens of thousands,\nperhaps millions of lines of text, and many millions of individual characters, and you need to get the cursor to\nthe exact character you need in order to start editing. This is greatly assisted by movements going from\nvery course to increasingly fine until you get where you want to go.\nThis is a process I have improved over the years, but certainly there are places I could improve\n(especially through integration with plugins). Even so, with a couple plugins and a lot of bulit in Vim commands,\nthere is a lot of sublety in movement in Vim, multiple sets of commands, and optimization of the common case.\nMove Between Source Locations in 4 Easy Steps\nVim, like many well-used tools, provides a series of differerent levels of precision depending on the task at handle.\nTo prevent unnecessary suspense, I will just list the levels of movement as I see them:\n\nMovement between files/buffers\nMovement within a file\nMovement within the screen\nMovement within a line of text.\n\nNot all levels are necessarily used- more that the levels exist and are useful in different situations. Its also worth\nstating that you don't necessarily have to move to an exact character to do a particular edit- deleting a line or\nseries of lines, for example, can be done by moving to the right line, regardless of the particular character.\nStage 1- The File\nThis stage gets you to the file you need to edit. If you are already there, skip to the next stage. \nNote that am not talking about moving between projects (which would come before moving between files)\n\nI don't have a good session manangement or project management solution for myself anyway.\n\nBuffers\nFor files, the main way I move to a file is using buffers. I used tabs for a good bit of time, but like many\npeople once I got used to buffers I never looked back. To move to a file that is in an open buffer, say a file\nnamed \"main.rs\", I might type:\n:b main&lt;CR&gt;\n\nThe '' means pressing enter, as in Vim key-bindings..\nThis is very fast, as long as you know what file you want, you know a part of the file name that is not ambiguous, and \nthe file is open in a buffer. One can also use the 'edit' command:\n:e main.rs\n\nIf the file is not open, as long as you don't mind typing the full path. I do this very rarely, as I use NerdTree for this\nsituation.\nAs with other levels, as we will see, there are commands to optimize the common case. There are commands to\ngo forward in the buffer list, backwards in the buffer list, and best of all to switch to the last file used. Even\nthese commands, optimized for the common case, are themselves optimized by providing short versions, like using\n':bn' for \":bnext\"- command prefixes will be expanded automatically if they are unambiguous.\nSomething to notice about swapping buffesr is that the choice of the tab key is very quick, which makes it a great mapping\nfor switch buffers. Its especially good to have this mapping take only a single character, as I often want to flip\nback and forth between files (even when using splits I sometimes toggle files in some situations).\nNerdTree (File Explorer)\nIf a file is not in a buffer, I don't know which one I want, or if I have to look around within directories, I open NerdTree\n(mapped to ',n' for me). This is fast, and I can toggle it back within another ',n'. There is not much else to say- its a great plugin for looking over your project, opening files in several ways, and probably lots of things I don't know about.\nCtrl-P (Fuzzy Search)\nThe last method I use for getting to a file is a fuzzy search tool called Ctrl-P. I just type \"P\" and type some piece\nof the file name I want to open, and Ctrl-P will find files that seem like what I wanted. This is especially good for very complex,\nnested projects where I don't want to hunt around in 4 levels of hierarchy for a file whose name I already know all or part of.\nThis tool is amazing and I highly recommand it- I feel like my brief description doesn't get across how important it can be for\nproductivity in larger projects.\nStage 2- The Screen\nThe next stage is getting the text you want to edit within the current screen. I currently have 75 lines viewable, and over 220\ncolumns, so splits are very nice in providing different views witihin files. How fast you get to the right lines within a buffer\ncan depend on your knowledge of the code, and whether you have edited that section recently.\nSearching\nTo get a section of text within your current pane, the main thing I do is simply search. Either a '/' or a '?' can usually get\nyou where you need to go quickly. There are some settings having to do with searching, like highlighting search results with:\nset hlsearch\n\nor making it easy to clear the highlighting with\nnmap &lt;Leader&gt;h :noh&lt;CR&gt;\n\nI'm no expert on all the other settings- see my vimrc for my personal configuration.\nJumps\nAnother common type of movement is to just move the screen a certain amount up or down within the file. Again, there are several commands-\n\n'e' to move one line down (to the end of the file)\n'y' to move one line up\n'f' to move forward a screen\n'b' to move back a screen\n'gg' to move to the top of a file\n'G' to move to the bottom of a file.\n\nYou can also just use the normal movement keys 'j' or 'k' if the cursor is at the bottom or top of the screen. If you like the simple 'j' 'k'\nmovements, use 'H' or 'L' to get to the top and bottom quickly without having to wait or type a line number.\nNote that there are again course movements as well as fine movements- Vim provides a gradient of refinements that each provide a smoother\nexperience in a small way, adding up to a unique editing system (can you tell that I like Vim? I do like it, for all its arcane warts, weirdness,\nand weaknesses).\nMarks\nAnother method that I use on occasion is marks- you can mark a location within a file and return to it at any time. You mark a location\nby giving a letter, allowing 26 separate marks to be made within a file (I use between 1 and 3 for the most part). You can move to\nthe line a mark is on with \"'\" (single tick) and the exact cursor position with '`' (back-tick).\nA mark labeled with the\nletter 'a' is made by:\nma\n\nYou return to the cursor position marked with the letter 'a' by:\n`a\n\nWhich is a backtick (tilde key) followed by the character used when making the mark. Again, using \"'a\" would return to the line the mark is on,\nwhich I actually learned while writing this article, after using Vim for around 10 years.\nThere are several markers that set themselves in certain situations.\n\nMy favorite is '``' which is two back-ticks, which returns to the location\nbefore the last jump. This allows you to edit text, jump to a location you set, and then immediately jump back to where you where. This is very confusing\nfor anyone that is watching you. The next best mark is the '`.' mark (back-tick and then dot) which moves to the last place that you edited text.\n\nThis is a huge help in certain macros, where you need to mark locations that you move to and return to them, perhaps changing the text and remarking\nfor the next iteration of the macro. It provides a way for macros to communicate locations, which would have to be a whole other post.\nStage 3- The Line\nThe next stage of our journey is to the line of text we want to edit.\nAbsolute and Relative Line Numbers\nThere is always a way to get to the exact line of text you want to see, as long as you have line numbers enabled (\":set number\") or relative line numbers\n(\"set relativenumber\"). If you are on line 10, and you want to go to line number 55, either type:\n\n':55' which jumps to the absolute line number 55.\n'55G' which does the same thing- jumps to the absolute line number 55. I tend to use the command mode method, but I may retrain myself as the 'G' method\nis fewer keystrokes.\n\nTo move a relative number, like down 40 lines, simply type '40j'. This repeats the movement 'j' 40 times, and works with other movements and commands as well.\nCourse Jumps\nThere are keys to move to certain regions of the screen:\n\n'H' moves to the High part of the screen (the top).\n'M' moves to the Middle of the screen.\n'L' moves to the Low part of the screen (the bottom line).\n\nThis won't get you to the line you want, but it might be close enough for a few 'j's or 'k's to get you there. It can also narrow the distance for other\nmovements like a search to make it more likely that you will get to where you want to go quickly.\nSearch\nAs with finding text in a file, searching can be used to move to text on the screen. This is especially helpful there is something unique on that line that you \ncan search for and get to quickly without having to move between search results or type a long search string.\nSimple Movement\nOf course, you can always just 'j' and 'k' around if you are not up for fancy commands. I will often guess how many lines I need to move and type something like\n'15k' or '15j', and see how well I did.\nStage 4- The Character Within a Line\nThis stage moves the cursor within a line, and like all the previous stage has its own set of commands. In a certain sense I distinguish between moving within \na block of characters and moving within blocks- this comes up within source code fairly often. There are commands that treat punction different that facilitate\nthese two types of movement.\nEnds of Line\n\n'0' to move to the beginning of the line.\n'^' to move to the first non-space character of the line.\n'$' to move to the end of the line.\n\nWithin a Line\nThe following commands move within a line. Note that many can be repeated by prefixing them with a number.\n\n'W' to move a Word forward.\n'B' to move a word 'B'ackward.\n'f' to move 'f'orward to a character, such as typing 'f(' to move the cursor to the next open parenthesis.\n'F' to move 'F' backwards to a character, such as typing 'F(' to move the cursor to the previous open parenthesis.\n't' to move 't'oward a character, such as typing 't(' to move the cursor to just before the next open parenthesis.\n'T' to move 'T' backwards to a character, such as typing 'T(' to move the cursor to just before the previous open parenthesis.\n'h' to move one character to the left.\n'l' to move one character to the right.\n\nThere is also a plugin 'vim-sneak' that I never got used to but seems like a good augmentation to Vim for this kind of movement.\nWhat to do When You Find The Character You Were Looking For\nOkay, so we have managed, through a long complex process requiring many separate decisions, to move a cursor to a character within a file. Congradulations!\nMaybe its time to take a break, or drink a cup of tea.\nTo be serious, it seems like the complexity might be overwhelming for someone new to Vim, but its something that can be learned slowly over time,\nand Vim will be productive the whole time you are learning after the initial learning curve.\nWhat commands we have access to to actually edit text once we are where we want to go is outside the scope of this article- maybe another day.\nThank you for reading!\n","id":"https://nsmryan.github.com.com/layers-of-movement-in-vim/","title":"The Many Layers of Movement in Vim"},"https://nsmryan.github.com.com/lua-games/":{"body":"I've been playing around with Lua and the LOVE game engine recently, and it is a lot of fun.\nI am finding that there is something about this combination that is just fun. I can put together concepts quickly, get things on the screen,\nand iterate very quickly.\nOne of the fun things about LOVE is that it is so easy to get simple, geometric things on the screen. I missed being able to just draw on canvases in Unity.\nThe other fun thing is that it is so much easier to get a shader in place then other systems I've used (Unity, GameMaker, and the Elm language). This is great because\nshaders offer so much power to make fun visuals. \nI've also enjoyed some of the libraries that are available. I especially like imgui- its got a really nice developer gui feel, its easy to use, and gives a lot of the abilities of the Unity\neditor, but in a way that you can put together yourself for your needs. \nI also like love-toys, which is an entity component system. Its been interesting going from Unity, where everything is built-in, to LOVE where you can kind of assemble the peices you want.\nIn the case of the entity system, its much more manual then it is in C# in Unity, but much better. I would rather do things programatically and be able to control how things work then\noffer up my code to a framework and try to figure out what it is doing.\nThe last thing is just the fun of using Lua. Its fun to use a new language, and its kind of a fun language by itself. \nIts dynamically typed, and has all the problems that come with that, but for simply fun programs that is fine. Its tables are quite strange, but are useful in a lot of cases. Hopefully \nI will write more about this in another post.\nThere is one game at http://github.com/nsmryan/lua-games, and one start of another.\nThe one game (first-game) happened organically while trying things out. It consists of dots that split periodically, and a cursor with certain powers to remove or effect the dots.\nThere is no real point- you can remove the dots if you want, and try out different keyboard keys to see what happens, but there is objective or ending.\nThe second is just lots of experiments with shaders, flocking, cellular things, nearest neighbors, and cursors. Its not necessarily going anywhere, but its got some simple behaviors,\ngrowth, and flocking, which are things I'm interested in. It was partially an experiment in structuring code in Lua and LOVE- where the first game became unweldy, the entity system\ngives a way to structure data and code.\nAnyway, I recommend Lua, LOVE, and imgui both for fun, and for work. You can put together tools pretty quickly, and get visuals on the screen with very little code. The LuaJit FFI also\ngives me ideas about visualizing information from embedded systems code.\n","id":"https://nsmryan.github.com.com/lua-games/","title":"Lua Games!"},"https://nsmryan.github.com.com/lua-tables/":{"body":"This is a post about Lua's tables. Its not an introduction (its gotten too long as it is) but rather some thoughts on their uses, how they fit into the context of structures\nin other languages, and some of the trade-offs that they make.\nLua tables are odd structures, mixing an array, a key-value map, a namespace, or an object depending on how you use it. It can be other things too, if\nyou play around with meta-tables. It can even mix and match between these, which creates hybrid use-cases.\nCore Data Structures\nA language with a core data structure is not unusual, and comes with some trade-offs. I have been finding that the Lua table takes an unusual place in the scheme of core data structures,\nbeing more flexible and powerful then the core structure of other languages. I do wish for static types, and I'm not a fan of re-using a single structure for everything, but this situation is\nat least an interesting point in that design space.\nThere are many languages that have a single data structure that is core to their mentality, or at least implementation. They are \"core\" in different ways, and play different roles- the\nthing that ties them together is just that using the language means understanding the relationship between the structure and the language.\nThis can be in the everything-is-an-X (or almost-everything-is-an-X), like how in python (and other languages) everything is an object (I'm ignoring some technicalities to make the point here).\nIt can also be that a language has a core data structure, even when it has other primitive structures, like cons cells and Lisp.\nFor Forth, everything is a cell (not the same as a cons cell) even though the core unit of organization is a word (like a function, not a machine word). \nIn C everthing is an integer- function pointers, pointers to anything, return codes, enumerations- everything ends up being an integer.\nTradeoffs\nRe-using a structure is not necessarily the best approach, for a number of reasons. One is that building a universe of structures out of a single structure means that 1) the core structure\nwill fit some situations well, and some less well, 2) if the core structure is complex, the result will be complex (like in the case of objects), but if the core structure is simple then\nthe result will consist of a complex arrangement of simple things, which leads into 3) which is that programs will usually rely on a convention or concept of what the larger structure is\nsupposed to look like (invariants) without any way of enforcing it. This last one is especially bad in dynamic languages where you have to understand the complex structure though reading code and \ndocumentation, and trying to imagine how its supposed to look. This requires dynamic information which is not immediately available and requires a lot of mental evaluation, making it difficult\nto reason locally about code and data.\nLua Tables\nIn the case of Lua Tables, the core structure is somewhat complex, and contains some unusual features (metatables in particular). It is essentially a mapping. If you give it integers\nas indices, then it is like an array, if you give it strings as keys it acts as a namespace, and if you give it arbitrary values it is just a key-value map. It happens that integers\nare treated specially so that you can get the length of the table as an array (for items with integer keys). If you give consequtive integers then it is an array, and non-consequtive integers\nmap a sparse array.\nIf you use strings, then they can be used with dot notation as fields of an object. Whats weird is that if you do both integers and strings, you get an object with access to an array. I'm\nnot sure that this is a good idea, but it does package your meta information with the array data itself.\nThe other dimension here is metatables. These expand the abilies of Lua tables in a couple of ways- you can specify the behavior in certain situations, like handling the situation where\na key is not found in a table (either to look up in a parent table, or return a calculated value, or anything else), intercepting indexing into the table, or to do operator overloading.\nYou can even use this to create your own object system if that is your thing. I'm no object oriented programmer, but I'm using the middleclass system in Lua and finding it not bad for\nmy toy games.\nSome Experience\nWhen making the simple games with the Love framework, I've found these tables to be quite useful. You can have an entity that contains a grid of cells, and keep information about how many\ncells are used within the same strucuture. You can create your own grid data structure which store your grid sparsely by using the index metamethod. You use the same structure for keeping\nyour entities in a structure as the entities themselves, and all your other data, so that you always know what structure to reach for.\nType Systems\nFor my plug for good type systems, its worth mentioning that in some languages (Haskell) the type system makes many more distinctions between structures, allowing more structure to be described.\nThis means that the complex structures are made of a set of simple basic structures, composed in a set of simple ways. This leads to structures that can be understood and checked statically.\nI won't go too much into this- its been described enough elsewhere.\n","id":"https://nsmryan.github.com.com/lua-tables/","title":"Lua Tables"},"https://nsmryan.github.com.com/more-fun-algorithm/":{"body":"This post is another gruop of fun algorithms (and data structures). These particular techniques are fun because they\nare a core concept that can be applied to many different situations by simply changing some structure that the algorithm\nis parameterized by. I won't go into much detail here, but rather provide links to articles with more depth.\nGuass-Jordan-Floyd-Warshall-McNaughton-Yamada\nThe first one is the Guass-Jordan-Floyd-Warshall-McNaughton-Yamada algorithm. This algorithm\nsolves a variety of problems, including finding shortest (max capcacity, most reliable, etc) pathes in a graph, finding an automata for a\nregular expression, and solving linear equations. I like the linked article because it takes some bits of abstract algebra and frames these problems\nin a general way, and then shows how you can see each problem as a special case of a single concept (asteration of a matrix). It also shows\nhow these positive ring structures appear to be common in computer science. They also appear in systems of algebraic data structures, so \nnaturally I wonder if these algorithm can be used to solve any problems in that realm.\nFinger Trees\nThe next algorithm is the fingertree, which is parameterized by a monoid.\nOne introduction can be found here.\nThis data structure has good asymptotics for a range of operations, and can be used for a wide range of applications.\nThe implementation and uses are also described here. The thing I have used this structure for is simply as a\nsequence structure that supports log(n) update to an index, and log(n) splitting and concatenation, but there is more to it then just that.\nThe core ability that this structure gives you is that it takes a computation that you would like to do over a data set, and performs your calculation incrementally.\nThis can be the calculation of indices, as when you use it as a sequence, but can also be for statistics\non data that is updated over time, without recalculating over the whole data set. It can be used to get constant time access and log time update to properties of your\ntree, like its size, depth, the value of a predicate over its leaves, the greatest or least element (as in a priority queue), \nincremental regular expression matching\nA couple other notes- there is a Haskell implementation here for the general structure, and the specific use as a\nrandom-access sequence here. There is also a Haskell package implementing a\ntree that accumulates both upwards (from the leaves) and downwards (from the root) found here.\nLenses\nThe concept of a lens is a fascinating exploration into structure and computation, but there are plenty of resources on lenses, and I won't be able to do it justice\nhere. The implementation here is the main one to look at, although there \nare \na\nnumber\nof\nothers, usually much simplier then the lens package. There are also implementations in other languages of course,\nI'm just more familiar with Haskell. One particularly good introduction starts here.\nTo tie this into the common thread in this post, the properties of a lens depends on the choice of constraints on the type- in the type \nLens s t a b = forall f. (Functor f) =&gt; (a -&gt; f b) -&gt; s -&gt; f t the type constructor \"f\" must be a functor, and this gives you a lens. If you constrain this type\nwith Applicative, you get a traversal, and so on.\nYou can even take this further and go up to the Optic type of this library, Optic p f s t a b = p a (f b) -&gt; p s (f t), and look at what structure you get with\na different profunctor. This can give you back lens when p is the function arrow, or Prisms with it is constrained by Choice, for example.\nThis can lead you to different universes of lens- I once used this to create lens that could pass data between each other, although I admit I abandended that approach as too complex.\nThis might be easier with profunctor lenses, I'm not sure.\nI find this interesting because it seems like all of these universes of structures have their place, you just have to discover them.\nMonads From Types\nThis deserves its own post, but this is another situation where you can get a lot of different systems out of a single concept. In this case, you can take many simple types,\nand determine how they can form a monad, and it gets you a variety of forms of computation. For example, sum types give you the Either monad for computations that can fail,\nthe product type gives you the writer monad (requiring a monoid for one of the types), and the function arrow gives you the Reader monad. Any type (of kind * ) also gives you\nthe Identity Monad, trivially. One thing that is really cool here is to explore the duality between types, and then the duality between the forms of computation that they \ngive rise to (sum vs product, monad vs comonad) creating a web of different concepts that also deserves its own post. Look at the Env comonad vs the Writer monad, the\ntraced comonad vs the Reader monad. For some reason there doesn't appear to be a comonad for sum types. It seems like you need a constraint on the type argument in order\nto implement extract, perhaps excluding them from normal use.\nI like this because it shows one way in which data and computation are related- the building block of data structures each give a form of computation. This is common in Haskell\nprogramming, where complex structures and algorithms come out of simple data types, set up just right. This reveals interesting subtlies in these definitions, where small variations\ncan have consequences in use, performance, or generality. One such example is shown here.\nInterestingly, combinations of these can give you different forms of computation that are not the same as composing the resulting monads. Products and arrow gives you the state\nmonad, or the Store comonad, depending on the order you compose them. See here for more variations on this concept. This also\nshows how sometimes contraints are necessary to get the correct structure, as in the Monoid constraint in the Writer monad, or the .\nConclusion\nI think that is enough for now. These algorithms/structures show how sometimes a choice of type or algebraic structure can either formulate a problem in a generic way, or\ncan give rise to a landscape of interesting objects, each with its own personality. I always enjoy seeing these different landscapes- there is something enjoyable about\nlearning that there are whole alternate universes of thought based on a different fundemental choice, each with different uses that bend ones mind to new worlds.\n","id":"https://nsmryan.github.com.com/more-fun-algorithm/","title":"More Fun Algorithms"},"https://nsmryan.github.com.com/my-current-tool-set/":{"body":"I've accumulated a certain set of tools over the years for various aspects of programming and for various programming tasks.\nI like to look at other peoples tools and configurations, so I figured I should talk about my own.\nVim\nAs mentioned on this blog, I use vim for text editing. I have become much more proficient in the last year, using a number of plugins \nand new techinques (new to me) like using only buffers and forgoing tabs.\nI use vim for several reasons- it is fast, configurable, and has a lot of useful built-in command and great plugins. It may not be the\nbest possible text editor in all ways, and I may move on one day (perhaps just to neovim) but it has served me well these many years.\nI can edit text faster, ensure more consistent style, perform transformations on data, view and edit raw binary data, and many other \ntasks far faster then I would be able to. Its a huge win in so many ways, and I do not regret in the slightest the modest investment of \neffort required to become proficient in it.\nC/C++\nFor embedded systems work, I use C and a limit amount of C++. The C++ I have seen in these system is a tiny corner of the full language-\ndon't expect lambdas, templates, or even inherence to come up.\nI find C a sharp scalpal to use for this kind of work- its easy to do a lot of tasks that are tedious in other languages when dealing with\nhardware and externally defined data, but the techniques and means of expression are very limited for many tasks. I don't see an alternative\nright now, even with some contenders that seem to be getting some use like Simulink.\nI also use C for certain other tasks, like ground tools that interact directly with binary data produced by an embedded system or deal with hardware\nthat only has a C API. For these tasks it can be surprisingly straightfoward to use with the right environmnent (see LabWindows below).\nLabWindows\nLabWindows is a development enviroment for C that comes with a visual GUI builder and a lot of libraries and utilities. The development environment\nhas a very nice debugger, which is missing a lot of the time on the systems I use. The GUI has a lot of controls and the utilities have been adaquate\nfor my needs in building simulators, configuration tools, ground systems, and algorithm visualizations.\nI can get a GUI program set up and running in an afternoon which can easily interact with an embedded system, which is a niche that I am quite\nhappy to have filled.\nBeing pure C has advantages-\nit is simple, it is compatable with a lot of hardware, and its easier to share code between an embedded system and LabWindows as long as you ensure\nthat your embedded systems code or headers files are pure C even in a C++ project. I'm sure it could be made more typesafe and concise, but\nsimplicity is nice in this niche- the cognitive overhead is not too much and I can concentrate on the task at hand for the most part.\nNote that LabWindows is not free- its a tool that I learned about at work and is paid for by NASA. I don't use it outside of work and I don't think\nI ever will, which is a shame to say about a tool you invest time in learning.\nR\nI have picked up R as a way to do statistics, plotting (the plot command and ggplot2), data analysis and exploration.\nThere are a lot of libraries, and the user experience is very good.  I've had very few problems installing libraries and getting them to work.\nThe documentation has been adaquate, although sometimes lacking in some key examples.\nOne great thing about R is the ability to get your data processing and plotting into a script. In excel, the results of your efforts are encoded into the contents\nof the spreadsheet. Even using formulas isn't enough- you lose the thread of execution that gets you from your input to your output in a maze of columns and references.\nWith R, the logic is in a program, the data is in an easy enough form to use (usually dataframes, although I'm sure I'm missing out by not using more advanced libraries).\nOne of my major complaints with R is that it can be difficult to tell what a function will do at times. It seems to be a do-as-I-mean language, where functions\nwill often attempt to do the right thing with the input they are given, which can make it hard to determine exactly what it is they did do. This is fine when\nthings work, but when they do not, you have to track down exactly which path will be taken. This comes up especially often when I have something returned\nby a library function and I'm passing it to another library function- what will this function do with the type of object returned by this other function?\nExcel\nI felt that Excel deserves a mention here. I don't particularly like using it, and I will use R when possible. Excel may not be the best, it may not be\nable to operate on very much data without slowing down, it might not have all the formulas I need, or the ability (to the best of my knowledge) to\ncreate repeated graphs or act on a series of separate data sets conviently, but it still has a use.\nThe main thing Excel does is allow you to explore your data quickly- even in R I have to write an expression to dsecribe what I want to see, but in Excel\nI can plot, jump to cells, and quickly get a series of different views on a certain amount of data. \nOne other advantage is that while R lets you encode your processing in a program, if you do too much exploration from the command line then your progress is\nsomewhat lost unless you take the time to put it into a script. In contrast, in Excel your actions are recorded in cells and you leave a trail as you go. As I said\nabove, its not the best trail to follow, but at least the data is all there, visible, and persisting the calculations I did when exploring a data set with no\nextra effort on my part.\nHaskell\nHaskell is my hobby language, and every so often my language for tools that need to do parsing, complex algorithms, or small data handling tasks.\nFor work tasks, its great for parsing (I've used attoparsec for large, custom log files from COTS hardware), parsing custom binary data for statistics\nand reporting, and streaming data (I use pipes, but I'm sure conduit would also work). I find that the types guide me to correct implementations,\nfind my mistakes, and teach me about my problem domain.\nFor hobby projects, its great for encoding ideas, teaching my about type theory, category theory, and other amazing things.\nI know I can be productive in Haskell, my programs will be far more stable and robust then with my other options, and I will encode the problem\nI am solving more concisely and with more clarity with the help of its type system then I would be able to in other languages.\nIn an engineering capacity I have to use the tool best suited for the job, so as much as I would use Haskell in every project, I often work in other languages.\nMy main complaint with Haskell is the occasional lack of a library which, say, Python or R might have.\nI would like to say I've contributed a library when it was missing and helped the ecosystem, but to my shame I have not.\nPython\nPython has occasionally filled a niche left by the other languages in my list. Its got a lot of packages available, including bindings to C libraries.\nIts an easier sell than Haskell for a tool that other people will use. I have not used it much, but increasingly there is a gap between the high level Haskell tools\nI write for small, specialized tasks, and the low level C programs which Python fills.\nMy biggest complaint with Python is the type system- its like I have my hands typed behind my back compared to Haskell. I can't reason locally about my code- I have\nto understand the whole program and its inputs and outputs to understand what happens within a function. The reasoning is about the dynamic behavior of the program\nand not its specification, and the larger the program the worse this becomes. Its the right choice for me for some programs, but I do wish it could do more to help\nme with my programs.\nTmux\nI've been using tmux recently, just to make my development environment in Cygwin (at work) and in Linux (at home) a little nicer. I don't have much else to say- its very good\nand easier and the vim interoperation has been enough for my needs.\nConclusion\nThis is not a list of all languages or programs that I use- its just my toolbox for common tasks, and the tools are what I reach for most often.\n","id":"https://nsmryan.github.com.com/my-current-tool-set/","title":"My Current Toolset"},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"body":"This post is just a couple of thoughts on detection and correction of corruption in stored data. This applies to\nany data, but I'm talking from the perspective of space systems which experience occasional corruption in any onboard\nstorage device (Flash, RAM, EEPROM). There are a lot of ways to deal with this, and I just wanted to put down some\nexperience and some different designs I've seen over time as a way to share knowledge.\nThe general concern of radiation is a much broader topic, and this post is only about what we can do in software to\naddress corruption in our data. Some techniques require hardware support, and of course part selection is a vital aspect\nof creating a tolerant system. On top of the hardware, we can do a number of things in software to get the final level\nof protection. \nThe Setup\nThe reason that we need to think about corruption from radiation for space system is that any data we store may become corrupt.\nThis includes anything in RAM, and stored files such as software images or configuration files, or data in a storage device.\nIf your software is corrupt the system can become inoperable if it is unable to boot up, and if RAM is corrupt it can \nhave unexpected consequences on operation which are immpossible to predict (likely causing software crashes).\nIn this environment we have to ensure that our data is protected, and often we end up using different protections for each type of\ndata due to differences in the devices or the criticality of the data. It is therefore important to understand some options when designing\na system for space, which is what this post is about- we will go over a few options to consider.\nAssumptions\nFor our detection and correction of data corruption we have to make a few assumptions. If these are violated then these techniques will\ndegrade in effectiveness or simply not work.\nOne assumption is that corruption occurs infrequently. If your data is corrupting constantly all over the place you need some serious protection,\nbut in my experience we are talking on the order of minutes, hours, or days between radiation hits that cause corruption depending on the system,\nthe memory device, and the orbit. I've never done extra-planetary missions where the radiation is much higher then, say, the ISS orbit so they\nmay be doing more extensive protection then I will discuss here.\nAnother assumption is that radiation is essentially random- it is unlikely for a single device to be hit in the same place more then once. This\nassumption may be somewhat violated as a device degrades and becomes more sensitive. However, in general if a single bit is corrupt, it does not\nseem likely for nearly bits to be necessarily corrupt.\nThe last assumption we will make is that the corruption occurs in memory devices liek flash, RAM, or EEPROM, but not in other devices. We need\nhardware mechanisms to prevent, for example, our processor registers from becoming corrupt. This can be done, either through design, redundancy,\nor choice of components to reduce sensitivity to radiation, but I'm no expert in that kind of thing and won't talk about it here.\nTechniques for Detection and Correction of Radiation Corruption\nScrubbing\nCorruption is something that accumulates over time, so a system must check periodically in case it has been getting data corruption.\nThe more corruption is present the harder it is to fix, so its important to check all memory devices at fixed intervels. This can be done around the\norder of minutes- every 10 minutes or every hour is not uncommon.\nNearly every system has some scrubbing, whether is it done automatically or by command. There can also be a mixture where some devices are scrubbed\nautomatically while others are checked infrequently or even checked manually by downlinking their data and checking it on the ground.\nErrors are detected on reads when the detection is done in hardware, so often a scrubber is just a low priority task that reads from certain memory\nranges corresponding to each device that requires protection. If an error occurs, we get a notification and we can correct it- say a corruption in\nRAM that triggers an interrupt with a register giving the location and corrected value to write back to RAM.\nMake sure to report when errors have to be corrected. This is the kind of information we can track on the ground and start to determine if a\nparticular location is failing more often then others for trending purposes. In some cases we can start to avoid that location if it exceeds a \ncertain error rate. The one pitfall here is to make sure to limit the number of errors you report- there are a lot of locations in a memory device\nand you don't want to report thousands of errors in some kind of anamolous case where every location is in error.\nCRC\nOne way to detect errors is to store a CRC along with your data. This is especially useful for data that changes infrequently like software images\nor configuration files. A CRC is the result of a calculation which can be performed on the data (say, on the ground and uploaded with the data),\nwhich can then we reperformed and compared against the stored result to see if we get the same result. Its like a stronger form of checksum.\nA CRC can only help with detection, but in general it is very good at this. A single bit corruption in a software image is very likely to be\ndetected, the CRC only takes up a small amount of storage (4 bytes for a CRC32), and the calculation, while not exactly the fastest, is not\na problem if performed relatively infrequently.\nOne quick note- its generally better to not implement a CRC algorithm yourself. Its better to take an implementation that you know is correct and\nnot risk a mistake- its just not worth the risk and development cost.\nRedundant Copies\nThe easiest way to detect corruption is to store redundant copies of your data. With two copies you can detect corruption but do not necessarily\nknow which copy is correct, while with three copies you can \"vote\" and use the version of the data that occurs the most frequently.\nIt is always possible to have two images corrupt, but it is very unlikely. This is especially true because you can vote the data on a byte or\neven bit level and the likelyhood of two bits being corrupt in the same location in two copies is extrememly low. This is especially true when\nthe hardware is designed with multiple storage devices, such as three identical RAM chips, each of which is offset in space from the others so\nthat radiation should not hit them in the same way.\nOne consideration when storing multiple copies of something is adding a CRC along with these copies. This allows a couple of additional protections\nto be put into place- when voting we can check CRCs and determine if any copy is prestine, and after voting we can check the CRC and determine\nif the resulting image is correct. This final point is important in case we have to correct multiple locations- we don't want to reconstruct an\nimage with corruption and assume it is correct.\nOf course, the CRC can itself become corrupt. However, if the CRC is stored redundantly then we have a very high chance of being able to vote these\nand get the correct CRC. If we can't, we don't need to store a CRC for our CRCs or anything like that- if the CRC check fails we just have to recognize\nthat this indicates either corruption in our data or in our CRC and that we don't know which is corrupt, which is generally true with this kind of\ncheck.\nThere is an obvious tradeoff when storing data redundantly, which is that we need more storage and software complexity to manage it all. This can\nincrease hardware cost, and in some cases cannot be accomidated. This is especially true in storing your software images in a flash device with a\nsmall, fixed capacity. I've seen several systems use two redundant flash devices, and store two copies of the software in each, resulting in a \ntotal of four images.\nRedundancy can take different forms depending on the data dn device- if we want executing code to be stored redundantly we might need multiple entire\nprocessor, if we want to store software images redunantly we might store multiple copies in a single flash device, or if we want RAM redunancy we might\nhave multiple RAM device and vote their values as we read them out (a hardware implementation).\nSingle Error Detection, Multiple Error Detection (SECDED)\nAnother mechanism for protecting data that is in a sense an intermediate between a CRC and redunant image is hamming codes. In this case\nwe store extra data proportional to the data set size and use it to detect and correct errors.\nThis is very commonly used, and in some systems\nthere is a separate device to store this extra data, such as a flash device of a smaller size that stores the hamming codes used when reading\nfrom the primary flash to detect corrupt data. In this case you might be given an interrupt which you can use to record the problem and correct\nthe corruption. This techique can be done in software, but it is very nice to have hardware support that can do the calculations and notify you\nof any errors. Note that errors are usually only detected on reads, so your scrubber should be reading these devices to trigger error detection.\nAs the name suggests, these codes are usually used in a form that can correct a single bit and detect double bit errors. Note that there are several\nparameters involves that trade off the amount of extra data and the number of errors we can detect and correct, but in every case I've seen these\nused the parameters are set up for the SECDED scheme. I imagine that it is a good middle ground between correction and storage, especially if\ncorruption is infrequent and we expect to see almost all single bit errors.\nI found a paper on the CALIPSO system which introduced me to a neat technique when using SECDED. If we store a single redunant image as well as\nthe SECDED data, we use less storage then three redundant images. However, consider the possible cases of corruption. If there is a single corruption\nin any data, we can of course correct it. If there is two corruptions in different locations, then we can of course correct them. If there are\ntwo corrupt bits in a single location then we can detect it with SECDED data, and correct it with the redundant copy. If there are three errors\nin a single location, we can detect it again and correct with the correct data. If the three errors are split into two in one location, and one\nin the corresponding location in the redundant copy, then we can correc the single bit error and then use the corrected result to correct the\ndouble bit error in the other image. Its only when we get to 4 errors split into two corruptions in corresponding locations in each of the\ntwo images that we can't correct the data. This means that we go from single error correction to triple error detection with a single\nredunant image, which is quite cool.\nBoot Up\nThere are some aspects of the boot process that should be noted when it comes to memory corruption. If software images are corrupt, they can\nbecome unbootable which is one potentially mission ending problem. There may be no way to correct this kind of issue, and you might end up in\na frozen state or a reboot loop which never ends.\nWith this said we should take bootup very seriously. The boot process should be able to perform checks on images, either voting them or\nperforming a CRC check and switching images if an error is detected. In the worst case we have no correct images, and in that case the\nonly thing to do is boot an image and hope that it works. Even if the image is corrupt, there is a good chance it will still boot at least\nwell enough to reimage the storage device and fix the problem.\nThere are a number of schemes we can implement here, and I think every system I've seen uses a different strategy. Some options are to \nhave to boot process check an input discrete, and boot a different image depending on its value. This can be used to boot a 'golden image'\nwhich is not updated during the mission, in case the normal image is corrupt (or just has a bug that we need to fix using the known good image).\nI've never seen a system that votes images as they are read from flash- they usually seem to check a CRC and have a strategy for cycling\nimages when corruption is found. There can also be a system in place for the system to know that it did not finish booting, so that\nit can try a different image next time it boots to prevent a cycle where the system resets (such as due to a watchdog timer) during bootup\nand never gets to an operational state.\nStuck Bits\nThere is a complication that we might want to think about when designing our storage system, which is that it is possible for a storage device\nto fail in such a way as to have a bit that is stuck as a 1 or 0. In this case we can't just write our data back to fix the corruption- it might\nbe uncorrectable. In this case we might need to be able to move our data to another location in storage, although with a flash file system we\nmight not have this kind of control.\nThis is also important in large storage devices where we might want to mark a block of flash as a \"bad block\" and stop using it. Again a flash\nfile system will do this automatically, but if we manage flash by hand we should be able to detect this situation and avoid these parts of the\nstorage device.\nConclusion\nI hope this has been interesting or useful as a practical set of techniques for systems which have to operate in the presence of radiation.\nI didn't go into details on hamming codes, or other codes for that matter, and I haven't given a full example design for how to apply these ideas,\nbut I just wanted to get some ideas down and make them available to others that might be in this situation.\n","id":"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/","title":"Notes On Radiation Tolerance of Stored Data"},"https://nsmryan.github.com.com/processing-particles-art/":{"body":"I have been wanting to create some kind of simple computer art for a long time. Recently\na coworker mentioned Processing to me, and I thought I would try it out. \nThe program I ended up writing was an exploration of calculating shapes implicitly by a function which\ntakes a point and gives a vector to the surface of the shape. I wanted to do something with this\nconcept as I've found it to be interesting for a long time.\nThere is a github release of the project\nwith a Windows executable that you can download if you want to run the thing yourself.\nThe controls are simple- left clicking cycles through shapes, and right clicking changes the mode. The modes are:\n\nparticles move to random locations on the surface, 2) particles move to predetermined places on the surface, creating\na very different effect, and 3) the same as 2 but cycling through shapes on a timer.\n\nThats all- its just a little thing to see how I liked Processing. I do like it, even though it is weird programming\nin Java again. I found that just getting things on the screen was very easy, which is my main concern for projects\nlike this.\nThanks for reading!\n","id":"https://nsmryan.github.com.com/processing-particles-art/","title":"Processing Particles Art"},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"body":"Like many programmers, I have used several languages for fun, for work, and for learning.\nI wouldn't say that I know these languages, only that I have written at least a tiny thing\nwith them. \nI thought it would be fun to list them out, in some sort of order relating to how much I've used\nthem, for the record. I will try to remember them all, but will likely miss a couple obscure ones.\nI tried to include some examples of how I've used them as well.\n\nC for embedded stuff, flight software, user interfaces, and simulators\nC++ for embedded stuff\nHaskell for personal projects\nR for data processing at work\nPython for personal projects and some for GUIs at work\nRuby for use with COSMOS and once at an internship\nRust for personal projects\nMatLab for work, creating a scripting interface to a camera\nSimulink for work, wrapping up a controls algorithm in a real-time system\nLua for games, and once for a tool at work\nC# for a game in Unity\nForth for fun with my Ti83 and Arduino\nZ80 Assembly for writing a Forth for my TI83\nGame Maker Language for making a game\nBash for odd tasks, as one does\nPerl for extracting comments from a codebase and creating a website to view them\nJavaScript for learning about web stuff many years ago\nCoq for a small project at school\nPHP for a project at school\nAWK for some simple text process stuff\nVisual Basic for learning in a class in high school\nLisp for learning functional stuff, before I started learning Haskell\nScheme for learning functional stuff, before I started learning Haskell\nProlog for school projects\n\nThats all I can think of!\n","id":"https://nsmryan.github.com.com/programming-languages-i-have-used/","title":"Programming Languages I Have Used"},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"body":"I've had some experiences recently where I've seen code written in C/C++ for embedded systems\nthat benefited from my experiences with Haskell. In short, I've found that pure functions make code more robust, easier to test,\neasier to document, easier to reason about, and easier to extend to new situations (porting between systems, and wrapping in simulators/ground systems)\nand changing requirements.  The only thing I've regretted using this technique is that I don't do enough of it.\nThis post describes some of my experiences factoring out portions of\nmy code into pure functions on Class B and Class B Safety Critical software. There are other applications of functional programming and type theory\nto embedded systems programming, but this is a big one.\nSome examples from my experience are fault detection systems (Fault Detection, Isolation, and Recovery or FDIR), core algorithms like\norbit propagation (as well as boundary determination in a geofencing system, predicting vehicle dynamics and other such algorithms), input\naccepting systems for communication like state machines, validation functions for data, converting data (including packetizing it, converting\nbetween time formats, and parsing configuation), and applying filters to data or packets. Some of these applications are described in more detail below.\nPure Functions\nBriely, a pure function should will always produce the same result for the same input, regardless of when or how many times it is run.\nThis prevents IO, global state, network traffic etc- anything that might modify how a function runs or make it non-deterministic.\nThis is a situation where restricting what you make use of is a hugely powerful technique, and having the discipline to\nenfore purity (even in a language which does nothing to help you do that) yields huge benefits that pay for the time invested many times over.\nIn embedded systems, software is written as a series of modules, each with a particular task or roles within the system. Look at\nCore Flight Software (CFS) for an example of this kind of architecture. Within this architecture, there tend to be several types of modules. Some examples are\nmodules that that perform software tasks (ie routing messages, packaging data, monitoring telemetry), modules that provide utility functions,\nmodules that run a particular algorithm, and modules that interface with hardware.\nAll of these modules can benefit from pure functions. Code that does not need to interface with hardware (utilities and algorithms) is especially good for this\nkind of design, but even modules that interface with hardware can section off parts of their processing into pure functions and get the benefits.\nFDIR\nA concrete example is a fault detection system that takes a series of structures defining what to monitor, and recieves a packet to inspect at a given rate.\nThis kind of system benefits from factoring all the monitoring code out into pure functions which apply single monitors. With that design, test cases can produce\na variety of things to monitor throughout a packet, and feed both the packet and what to look for within that packet, into a single function. The result can be\nautomatically inspected, and the resulting test cases left as a regression test for future maintenance. This isn't the only oppertunity here- if the whole monitoring\nalgorithm is pure then it can be tested in the same way, leading to a larger percentage of easily testable code.\nConsider what happens if these functions are not pure- what if you have to reconfigure the system between test cases, or if you can only test at a system level\nbecause the code requires interaction with other modules to run? In my experience the unit testing is less rigorous, and the system level testing is very complex\nand time consuming. There is no good way to do random testing, and its essentially impossible to test every function in isolation- the testing ends up being at a higher\nlevel. \nIn other words, the core enabling aspect of the design that allows it to be testable is to ensure that as much as possible is written in a way that can be\nreasoned about in isolation. Pure functions are the best way that I know to accomplish this.\nCore Algorithm - Case 1\nAnother example I've seen is the core algorithms of a system. These algorithms may be defined by domain experts, and require validation effort to ensure that the\nimplementation matches the intention. These algorithms are a lot of work, and must be specified carefully and tested rigorously.\nEven when these algorithms end up effecting the system's state, it is worth while designing them to take in all of their required input (not relying on other state or\ninteraction with the rest of the system) and to produce a structure describing their result instead of acting on it while the algorithm runs.\nI have seen situations where an algorithm is only partially pure- parts are factored out into pure functions and part is not. The parts that were pure were easier\nto re-use as the project matured, while the parts that were not couldn't be repurposed without a major rewrite late on in the project. Had the whole algorithm been\nkept pure, it could have been run by request of the user and reported its results instead of acting on them. This would have given more insight into the system that\nis not available if the algorithm has its actions built in.\nThis left the system less useable then it might have been. The system was a high assurance piece of software, and we couldn't afford to re-write it,\nso it was left as is.  This is where my mistake was only making part of the code pure. The C language does not help you write pure code, and it doesn't make\nfactoring code out terribly easy as well with its limited abilities for abstraction, but its worth the effort if you can do it.\nThe lesson for me here was that keeping as much code pure as possible would have enabled it to be tested in isolation and reasoned about locally, allowing\nit to be moved or re-used without having to ensure that it operated the same in the new configuration. That additional effort it a hidden cost to side-effecting\ncode that can make it completely unmaintainable in a large enough scale (I have seen this first hand as well).\nCore Algorithm - Case 2\nAnother example from that project was an algorithm that integrates an equation of motion for the vehicle it is on to predict its future positions. This algorithm was written\nas a library with all pure functions from the beginning- I was not going to repeat my mistake from the previous example. \nThe result was something that could be tested as a whole and in parts in the units tests, both with fixed inputs and random inputs. It was ported to a laptop\nvisualization with nearly no effort to explore and understand the results it would give in different situations. All of this left me very confident in its\ndefinition, and confident that it would continue to work in operation- no latent dependance on the system's state is possible if you don't depend on state\nat all.\nSerial Communications\nOne last example is code that recieves data on a serial port (or over TCP) and validates it before sending it on. This kind of code can be implemented as a state machine\nwhich transitions states as it receives different parts of a packet- first a sync word, then a header with a length, then the data, then a checksum or CRC.\nThis is an interesting example for several reasons- one is that it involves hardware, which one might think as difficult to handle with pure functions, and that it uses a \nstate machine, meaning it relies on state. However, if the code to receive data is decoupled from this state machine then the state machine can be implemented as a pure function\nthat takes in the current state (and usually some description of the processing so far), and produces a new state and a new description.\nThis design, as in the above cases, allows a large portion of the code to be easily tested- all state transitions can be tested in different situations. Good data can be injected\nduring a test, such as from a file, and random data can be created to test edge cases.\nUsually this kind of data is injected into the interface itself, which would work. However, if the system doesn't work then you have to ask whether its the code or the interface.\nIf the code can be tested seperately you can have more confidence in it from the start, and you can add test cases to the code as you find them, rather then relying on someone\ninjecting all the test cases using a simulator every time they run the code.\nConclusion\nThis is just the tip of the iceburg on this subject in terms of the application so of purity in embedded systems, and in applying lessons from functional programming to\nembedded systems programming. I've been looking at other examples on a new project where I've found that my designs differ depending on whether I'm wearing my\nflight software systems hat or my functional programming hat, and the latter designs seem to have all the advantages I've described above.\n","id":"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/","title":"Pure Functions in Embedded Systems Programming"},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"body":"This post is about what a Genetic Algorithm would look like if seen through the lense of functional programming.\nThis means we will look at functional programming techniques and see if they have anything interesting to say about\nGenetic Algorithms (and perhaps evolutionary algorithms in general). This post will focus on data structure choice more\nthen architecture or design, but I think there are interesting things to say about these types of topics as well.\nYou do see functional programming in Genetic Programming sometimes, but this post is specifically about\nGenetic Algorithms.\nWhy is this Interesting?\nI believe that by making use of some unconventional thinking in the implementation of a Genetic Algorithm we can get some\nperformance improvements that you would not normally see. It seems like the GA literature generally considers\nperformance a secondary concern with these algorthms- the conventional wisdom is that fitness evaluation for your particular\nproblem is so expensive that the GA performance doesn't make much or any impact. This is predicated on an unstated premise,\nwhich is that the GA itself is independant of fitness evaluation, and can't effect its performance.\nI believe that this is not true, and that the use of a couple of fairly simple changes to a GA can actually speed up not just\nevolution, but also your fitness evaluation. This is a pretty strange claim, and unfortunately I don't have the benchmarks to\nshow for it. I have had this idea for a while, but I don't have the time to put in the work to prove it, so I wanted to get\nthis concept out there in case I never have a chance to show it empirically.\nTo avoid keeping you waiting- it looks like you can reduce the algorithm complexity of a GA from its usual, imperative,\nimplementation while also using structural sharing to reduce the size of the population, which should result in better cache\nuse when performing fitness evalution. It may be that this does not have enough effect in practice to counter the branching\ndata structures we will use, which is why it needs to be evaluated in practice.\nThere is another aspect to this that I think is of independant interest, which is whether the functional programming community\nhas something to add to the machine learning discussion. There are other examples of this ,\nbut I haven't seen the equivalent for Genetic Algorithms. I think GAs are an interesting thing to point this FP light on because their\nusual implementation is very dense and mutation heavy, which is very different from the tree structures and immutable structures we see\nin some functional programming languages.\nThis post is not quite at the conceptual level as the neural network posts, but currently the only example of a GA paper from the FP community is\na simple implementation\nA genetic algorithm framework using Haskell,\nand a number of very good an interesting, but fairly traditional libraries.\nI may be wrong about this, but this is what I have been able to find.\nLets Look at Genetic Operations\nMutation\nSpeeding Up Mutation\nLets start with mutation. Nearly every GA library I've ever seen (and I've checked dozens) implements mutation as a loop which\nchecks whether to mutate each index of each individual. I've seen some libraries that technically cheat and just mutate a fixed\nnumber of locations: 1 / pm locations, where pm is the mutation rate.\nI've found that this is a particularly slow operation- if you are evolving an individual of bits, you have to inspect every single\nbit and generate a random number even though most bits will not be mutated. Instead, we could just sample from a geometric distribution\nwhich tells us how many locations to skip before the next mutation. Sampling a geometric distribution tells you how many times a \nbiased coin would land on tails before the first head. This means that a sample tells us how many times we would have passed over\na location before we mutated one without actually checking each one individually!\nThis technique is not actually specific to FP (although we will see some implications later to this choice), but I've never seen it\ndone in the wild.\nNote that this idea works best for low mutation rates- as your mutation rate goes up this will actually become slower. For a mutation\nrate of 0.01 (1% of locations mutated) we can skip an expected 100 locations per jump as the expected value of a geometric distribution\nis just one over the probability of success. If our mutation rate is 0.001 then we will skip an expected 1000 locations! However, if our\nprobability is 0.5, we are doing a more complex computation to get our random value then we would from a bernoulli distribution. This is\na tradeoff, and perhaps the library could switch when it estimates that the payoff is no longer worth it to avoid this slowdown.\nMutation in a Purely Functional Language\nIf we are going to make this purely functional, we certainly won't be mutating data while doing a literal mutatation operation. We also\ndon't want to do the naive method of copying all of our data and changing only the places we mutate- this would work, but it will put us\nbehind the imperative approach on our first operator!\nInstead, lets use a data structure that allows us to traverse it quickly by splitting it, changing individual locations, and then concatenating\nthe results. As we will see later, a (finger tree)[http://hackage.haskell.org/package/containers] is a good choice for this kind of operation, taking\nlog time (its actually better then log time, but for simplicity I will refer to it as a log time operation).\nTo do this, we would sample from our geometric distribution, split our individual at the location we get (a log time operation), mutate the\nhead of the resulting list (a constant time operation), and continue.\nNote that even this is not as fast as it would be if we directly modified data. We have turned the usually random access to the individual into\na log time operation to get to the data we want to change, and a log time operation to put it back together. Technically, the log is not of the \nindividual size, but of the expected number of locations we skip to get to the next mutation, making it p*n*log(1/pm), which is still a \np*n complexity with a weird constant.\nHowever, we will see later that this data structure choice will result in a lower algorithmic complexity for the GA overall, so bear with me.\nComplexity\nFor those of you keeping score, the complexity of mutation is usually the size of the population times the length of the individuals- p*n lets say.\nThe geometric distribution does not technically lower the complexity from being linear in the length of the individuals, but the constants should be\nmore like p*n*pm where we multiple the amount of work my the mutation rate. Due to our functional data structure's log time features, we end up with\np*n**pm*log(n) as we have to do a log time operation as many as n*pm times.\nOkay, so far we are slightly worst then the imperative implementation, but keep reading.\nCrossover\nIn a typical implementation of a GA, crossover involves copying or swapping data between individuals, resulting in an operation that is linear in the\nlength of the individuals, and linear in the number of individuals.\nThis is where our choice of finger tree starts to pay off- splitting and concatenating finger trees is only logorithmic! This leaves us with a complexity\nthat is p*log(n), which is better then the p*n we get in the imperative setting.\nSelection\nSelection is a population-level operator- the selection operators (examples being roulette wheel, stochastic universal sampling, tournament\nselection, etc) don't make use of the particular representation of individuals. So far we have not nailed down what structure to use for our\npopulation itself.\nMorally, a population is usually a multiset, except for a cellular genetic algorithm where you introduce some kind of topology.  However,\nfor simplicity and speed we can just use an (array/vector type)[http://hackage.haskell.org/package/vector]. At first this seems like we are not\ngaining anything on the imperative implementation, but in fact our choice of an immutable data structure has started to pay off. When we select\nan individual more then once, we don't have to copy them at all! Our vector simply points to the same individual multiple times, safe in the knowledge\nthat it won't change. This moves us from an p*n operation (at worst the whole population has to be moved during selection) to an p time operator, depending\nonly on the size of the population. This does not take into account any processing we need to do for a particular selection algorithm which should not\nchange from the usual implementation.\nWhile this reduction in complexity is great by itself, there is a more subtle effect here- after the first generation, some individuals will start\nsharing the same data (structural sharing). Even after mutation and crossover, much of the data will continue to be shared. The amount of shared\ndata seems like it is related closely to the diversity of the population, so as the population converges and diversity falls, the amount of memory\nthat your population takes falls with it.\nI would expect that this could have an effect on both the performance of the genetic algorithm, and of the fitness function. The fitness function is working on a\npotentially much smaller data set then it would other be working on. There is a tradeoff however- the tree structures may be splayed out all over memory at this point\nand we may actually lose all the gains we got from our smaller data set. There is some possibility of \"compacting\" the population at some point, organizing it\nto avoid some of the problems here, but I don't know right now how we would do this or if it would mitigate this problem.\nConclusion\nThe resulting algorithm should go from a p*n + p*n + p*n algorithm to p*n*log(1/pm)*pm + p*log(n) + p time algorithm. The complexity class has not\nchanged, and mutation will be slower (by a log factor, which isn't so bad) compared to the imperative algorithm (if it implements the geometric\ndistribution trick). However, crossover and selection seem like they should be much, much faster, and there is potentially gains in cache\nusage as our population diversity decreases.\nAs mentioned, I would love to see some fair benchmarks that show whether this works in practice. I'm truely not sure whether data set size or predicatble organization\nmatters more on a modern processor.\nAlso as mentioned, this post did not mention the application of functional programming techniques to the concept of Genetic Algorithms, their architecture, or to the\nimplementation of their operations beyond data struture choice. I have thoughts on this as well, but the use of finger trees was the concept I wanted to get out their\nfirst.\nThank you for reading!\n","id":"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/","title":"Purely Functional Genetic Algorithms"},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"body":"I published my first crate! Its called ccsds_primary_header and it contains an \nimplementation of the CCSDS header defined in the Space Packet Protocol document.\nThis header is used in a lot of space systems, including the Interational Space\nStation, satellites, and many (but not all) cubesat applications. Its very simple,\nbut has a lot of extensions that are not standardized and depend on the application.\nThe ISS has a whole series of secondary headers used for different packets, and the\nCCSDS standards themselves have a whole document on the format of time fields in\nsecondary headers.\nI only implemented the very basics, with the idea that it could be extended with\nextra information for specific projects. This post is about what I ended up with,\nand what the experience was like.\nFinishing Up The Crate\nI talked in a previous post about writes and re-writes that I ended up attempting\nwhile writing this crate. I tried the bitfields crate, and found that I didn't\nknow how to enforce a bigendian format on the packets, so I ended up just\nimplementing functions for getters and setters for each field in the packet using\nbyteorder.\nThis interface is somewhat awkward because you have to type something like\npri_header.control.apid()\n\nTo get the APID of a packet- you need to drill down to the word where your data\nis contained and then get the field as a function.\nI decided to not implement the functions at the PrimaryHeader struct level, despite\nthe extra typing, because I think they make more sense where they are.\nMy favorite thing about the representation I ended up with is that the PrimaryHeader\nstruct is laid out in memory according to the standard-- there is no serialize or\ndeserialize step. This is more like how one would likely do this in C, and I like\nthis for manipulating packets without a lot of ceremony.\nSimilar Crates\nTo my surprise, I stumbled on this repo\nwhile publishing my crate. It seems to be another implementation of CCSDS, along with\nsome secondary header functions for checksums and time. It uses more abstraction,\nwith its own bit field macros. Interesting to see this- some one else seems to be\ngoing down a similar route as me, although with wider goals. I was just trying to\npublish a crate with a trivial definition in it, and I don't support all the\nextra fields and secondary header stuff, or a way to include the CCSDS header into\nanother structure the way space_rust_library (or the pnet crate) do.\nPublishing a Crate\nRust has been very friendly for me in a lot of ways so far. There is good information\non publishing a crate, and the process is very straightforward. Having the whole\nthing built into cargo, including documentation, is just great. I know other\nlanguages do things like this, but its still worth noting especially as I'm not\nsure how they compare.\nIts nice to see my documentation up there in the nice format that docs.rs puts them in,\neven if the documentation itself is pretty minimal.\nConclusion\nI published my first crate! My goal was to be a contributor and give something,\nno matter how small, to the community. I hope someone (perhaps myself)\nuses this crate one day, but even if they don't, it feels good to share it.\nNow I have to figure out what I want to do next. I would love\nto be able to continue using Rust- its been a lot of fun! There are \ndefinitely projects I would like to work on, and having the control and knowledge\nof memory layout combined with a certain amount of functional programming\nsounds good to me!\n","id":"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/","title":"Rust CCSDS Primary Header Crate"},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"body":"I've been looking into Rust recently, and I am finding that I like it, and that\nI want to like it.\nIf nothing else, that language community choses the best names for things:\n\nRust\nDeisal\nRefraction\nIron\nNickel\nServo\nTendril\n\nand probably many more. I just can't help but like them.\n","id":"https://nsmryan.github.com.com/rust-has-the-best-names/","title":"Rust has the Best Names"},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"body":"This post is about the cfs-sys Rust crate which generates the\nbindings required to write CFS Apps in Rust. This include all public include files from CFE,\nOSAL, and the PSP.\nThe idea is that this is a step in the direction\nof getting Rust into space by allowing it to interoperate with NASA's open source flight software\narchitecture CFS. Its not likely that this will be the first way Rust gets into space (see\nthe work that Kubos is doing), but the\nmore Rust in space the better in my opinion. If you are already using CFS, and want to integrate some\nRust into your codebase, this crate can help you make that happen.\nA very brief description of CFS- CFS is a combination of projects (OSAL, CFE,\nCFS) which provide a core set of functionality commonly seen in space and drone system. It was \ndeveloped and released by NASA and is used by many projects across many NASA centers.\nThe functionality it provides includes\nconfiguration tables, time management, module communication, logging, event messages, memory\npools, and much more. This is all on top of an abstraction layer to assist with portability across\noperating systems (OSAL) and across different boards (PSP).\nIn addition, there is a way to add new modules, and a library of existing modules that can be plugged in\ncalled Apps. The existing apps provide task scheduling, stored commands, data storage, file\ntransfer, limit monitoring, housekeeping, and a number of other capabilities.\ncfs-sys\nThe cfs-sys crate is intended to be used in a situation where you have a build of CFS that you are\nusing, and you want to write an App in Rust. This App will integrate with the rest of the CFS system\njust like any other App- I didn't have to make any changes to the rest of CFS to get this working.\nThe bindings are generated using BindGen in the build.rs file. This turned out to be fairly straightforward-\nI just used the environmental variables provided by CFS to point bindgen to the right files. BindGen is\namazingly easy to use, so this was not nearly as painful as I expected.\nThere is an example App,\nwhich is in the apps/rust/ directory in that project, which builds an .so which can be loaded by\nCFS. This module is loaded by adding it to the build/cpu1/cfe_es_startup.scr\nscript which is used by CFS to determine which modules to load at runtime.\nLuckily the CFS build system does not build Apps directly- it just calls make files in each App's\ndirectory. This way we can build a Rust project and just make sure that the resulting files end up in\nthe right place, with the rest of CFS none the wiser about how the module was built.\nBuilding\nThe cfs-sys crate it integrates into the CFS build through environment\nvariables defined in the setvars.sh script that you run before building CFS. The cfs_app_rs repo \nshows how to integrate your Rust app by adding it to the build/cpu1/Makefile just like any other app,\nand then using the apps/rust/fsw/for_build/Makefile to set up your Rust App and build it using cargo.\nThe bindings are generated with BindGen and appear to work as expected. I have not wrapped them in a Rustic\ninterface, so they are used raw with all the *mut that this implies.\nUsage\nThe cfs-sys crate is on crates.io, so you can depend on it in Cargo.toml with:\ncfs-sys=\"0.1\"\n\nAdding cfs-sys to a Rust file is as easy as:\nextern crate cfs_sys;\nuse cfs_sys::*;\n\nI haven't split out the bindings into separate modules to allow more fine grain control, opting for simplicity\nfor now. \nOnce the bindings are imported, you proceed like any other CFS App- call CFE_ES_RegisterApp, call CFE_ES_GetAppID to\nget your APID, register events with CFE_EVS_Register, set up messages with CFE_SB_InitMsg/CFE_SB_CreatePipe/CFE_SB_Subscribe.\nThen just wait for CFE_ES_WaitForStartupSync, and loop blocking for CFE_SB_RcvMsg. You can check for system shutdown with CFE_ES_RunLoop,\nand mark sections of you code with CFE_ES_PerfLogEnter and CFE_ES_PerfLogExit as normal, although I did have to wrap the perf log\nfunctions up as they are macros in CFS and don't seem to get turned into Rust functions.\nThe example app shows how you can do this and get your App talking to CFS. It could use some work, but it runs\nand proves that Rust is useable with CFS. It is even configured in the SCH App to receive its wakeup message every second, although\nthe message is build with hardcoded values rather then putting those in headers and then generating Rust bindings for them.\nLimitations\nThe cfs-sys bindings are only for OSAL/CFE/PSP includes- if you need to bind against a particular CFS App's headers, that would either have to be\ndone separately or the cfs-sys would need flags to build bindings for a particular set of Apps. I could easily see a set of crates like\ncfe-hk-sys, cfe-sch-sys, etc which provide bindings to each App.\nI have not wrapped the bindings in a Rustic interface (hence the -sys in the name), which makes them awkward to use. Nearly all code\nmust be unsafe in a Rust App right now. In addition, macros in CFS do not result in bindings in cfs-sys for some reason. I thought \ngenerate_inline_functions was supposed to do this, but I haven't been able to get it to work.\nThe integration of the build process for a Rust App and the rest of CFS does work, but does not include unit testing or documentation generation.\nI also haven't looked at how the CFS cmake system might integrate with Rust as I do not currently use it.\nThe build currently forces the target for cargo to be 'i686-unknown-linux-gnu', which could be made configurable. I don't have a good\ntest system to work on generalizing this, but it shouldn't be hard.\nI also hardcoded the choice LINUX_OS required for network_includes.h in CFE. This is in the build.rs for cfe-sys.\nA CFS App is expected to have a series of header files for message IDs, configuration parameters, etc. These are usually internal,\nbut certain tools expect them to be there, and if you have to, say, add a message to the SCH App's schedule for a particular App,\nyou need to include these files. A Rust App should really create these files like a C App would, and then generate bindings for\nRust. This way the App fits into the ecosystem without requiring special cases for Rust Apps. The example App does not do this,\nso when it is integrated with SCH, I'm using a hardcoded number instead of including a header file.\nFuture Work\nFrom the list of limitations, it should be clear that this is a prototype and a work in progress.\nWhile I am using CFS for software that will one day make its way to space, I may or may not be able to integrate Rust into that codebase.\nThis means that this project will continue to be a proof of concept unless someone can help make it more professional and better integrated\ninto CFS, ideally by using it in practice.\nI would like to keep working on it, especially the example App since it is an important starting point for people. If I do end up\nusing Rust at work, I will certainly post about it, so stay tuned if this interests you. I expect the fires of production use would\nforge this project into a full solution for Rust/CFS integration.\nOtherwise, I hope this is interesting for someone, and Rust on!\n","id":"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/","title":" Rust In Space- Integrating CFS And Rust"},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"body":"I have had a vision of a flight software system written in Rust that I wanted to write down.\nThe concept is a little rough, so this post is also a way to feel out the design and how it\nfits into flight software design in general.\nThis is coming from a lot of thought into what makes a good flight software system, and from\nworking on and reading code from multiple systems, including CFS (a flight software system\ndeveloped by NASA). The result is something that combines ideas from several systems,\nand from experience building and testing these systems, but with a re-imagining\nin Rust.\nModules vs Layers\nOne of the main things I see in the architecture of flight software systems, and generally\nin embedded systems, is that the system is a series of modules which communicate through\nfunction calls or messages. Function calls give sychronious communication when necessary,\nand messages (say, CCSDS packets) give asynchronous communication.\nTypes of modules\nThere are several types of modules in these systems, which I will attempt to enumerate:\n\nHardware abstraction modules- these can be drivers, generic libaries wrapping hardware,\nor may have project-specific logic for talking to a particular piece of hardware over\na particular link\nInfrastructure modules- these provide services to other modules. This can be things like\nmessage routing, configuration, time, software/event messages, logging, memory block allocation/deallocation,\nand can include many other things. These modules tend to be directly depended on, and in a sense they\nfix the architecture in place- while other modules can be added and removed between projects, the\narchitectural modules are usually deeply embedded in the dependancies and logic of other modules.\nProject modules- these are specific to a project, and are not intended to be portable or abstract.\nThey implement specific science objectives or project requirements. They may be tightly coupled\nto each other to accomplish highly coordinated and precise tasks.\nLibrary modules- these provide algorithms or interfaces, but have no tasks. They are often, but\nnot always, very portable and testable.\n\nCFE/CFS Approach\nCFS factors the abstraction into the OSAL (Operating System Abstraction Layer) and PSP (Platform Support\nPackage) code, and builds the rest of the system on top of these. The next layer up is the CFE (Core\nFlight Executive) which factors all of the infrastructure modules into a single tightly coupled group,\nessentially removing coupling from the rest of the system. This feels like a kind of quotient group,\nif you have some abstract algebra.\nThe nice thing about this is that while all modules rely on dependance to CFE, many things that are otherwise\nservices become independant by working through CFE's services- task schedule is done through the software bus,\nand so is telemetry monitoring, health and status generation, and many other features.\nThis is not a bad architecture, but I think there is value in modularity over laying, and I think there are alternative\narchitectures which have some very nice properties along those lines.\nPurely Modular Approach\nIn a purely modular approach to this problem, each module would expose an API that other modules could depend on.\nRather then layering the system, each module could receive an implementation of each interface it uses, perhaps\nat runtime in a dependancy injection style. This lack of laying creates a web of modules rather then a heirarchy,\nwhich should assist in swapping out modules and implementations.\nPotential Advantages\nThe advantage to this is that modules would be exchangable even in the core infrastructure, and no module would be\ntreated specially. The other advantage would be testing- each module could provide a kind of mock implementation\nas well as a real one, and each module that uses an interface could test without the other module's code running by\nusing this mocked implemnatation.\nModularity here is not a purely acedemic goal. For example, CFS has a single monolithic abstraction layer, which helps\nmake the task of porting straightforward (it is clear what you need to implement to create a new implementation), but\nit means that it is very hard to extend without modifying all other implementations. It also means you take around\nall components provided, even though I know many systems which do not use them all.\nThe other advantage I could see is potentially huge- composability of modules. This would either take the form\nof interfaces implemented in terms of other interfaces, or interfaces composed together to provide the final\nimplmementation. One place where this could be helpful is to create an implementation that logged function\ncalls in some way before passing the data around- none of the flight software would have to change, but you\ncould get instrumentation that visualized or at least recorded interactions between components with very\nlittle effort. An example of composing interfaces might just be that a configuration manager interface might\nbe implemented in terms of a file system interface, or an interface that both forwards data to the intended\ntarget and records it to a log file for later downlink.\nLoose Coupling and Types\nInterestingly, it seems that this kind of design involve systems that talk, but are developed without knowledge of\neach other types. Configuration management won't know about the configuration structures it provides, a software\nbus would not nescessarily know about the message types it routes, etc. Currently this is often done in C through pointer\ncasting. I'm not sure what this would look like in Rust- either through generics, type ids or Any types, or perhaps\nsome unsafe code if all else fails.\nRustic Flight Software\nHere is the idea- each module takes a series of interfaces at startup and uses them for all outside communication.\nThis acts as a kind of software abstraction layer- I imagine hardware could be abstracted in a HAL (Hardware Abstraction\nLayer) approach as is currently being used in the Rust ecosystem, so I'm talking only about software abstraction here.\nThe software abstraction might take the form of types implementing a particular interface, or could perhaps\nbe a Trait object.  Either way, it would contain a way to register and discover services provided elsewhere in\nthe system.\nTo support this concept, I think the system would use a registry of interfaces, where each module provides a way to\nsupply implementations of one or more interfaces, and modules can request an implementation of one or more interfaces.\nI would imagine that the system requires that all modules get each interface they require, and that no interface is\nprovided more then once.\nFor hardware there is an advantage to multiple implementations of the same interface in\ncase the system has multiple components that use the same hardware abstraction but are different under the hood,\nbut for software I feel that having multiple implementations is too likely to be a source of bugs and should be avoided\nin flight software.\nInterface Registry\nMy current thinking is that the interface registry is a map from type ids to Trait objects. Each module might expose\na function that takes a mutable reference to this registry and inserts its own implementation of its interfaces.\nIf an implementation already exists, this is an error at startup.\nThen each module provides a function that takes an immutable reference to this registry and pull out a reference\nto each interface it needs to use. A module might request access to the software message interface to report\nits progress and errors, the configuration interface to get access to its configuration table, the software bus\ninterface to send and receive packets, and the time interface to generate timestamps in the system's time reference.\nOne nice thing that comes out of this registery is that a system needs to only implement interfaces it uses-\nthe selection of modules for a new system is very fine grain and matches only what the system needs without\ntaking in a group of required modules. Ideally the dependacy information between modules would be easily\ndiscoverable or reportable in this system, as they would form a web of dependancy which the user would have to\nbe aware of.\nStartup\nIdeally each module could be statically linked, creating a single executable from the whole system, or could be loaded\nas a shared object.\nIf loaded as a shared object, the module's functions to provide interfaces and request interface could\nbe called- all module's functions to provide interfaces would be called first, and then all module's functions to request\ninterface, and then finally perhaps a function to initialize the modules.\nIf loaded as a static object, the modules might just be provided their implementations directly.\nI imagine that in a flight software system this registry might also be filled out manually in a top level function\nso there is no ambiguity about what it contains- sometimes flexibility is more dangerous then its worth.\nTesting\nOne of the advantages to this system is testability. Each module is self contained- it requires linking against\nan interface definition, but not an implementation, so it can be mocked out and tested independantly.\nThis would allow testing that is currently very difficult. In CFS there is an extensive testing system which\ndoes someting similar, but I think the design in this post allows a much lower effort way to do this kind\nof module testing.\nIdeally each module could be tested on the development system, with as much unit testing as possible. The\ntests could also be run on the target system, followed by system level tests of the combined system.\nOne thing that would be a huge gain that I haven't seen done is that a group of modules could be started,\neach depending on each other, but with some modules mocked out, and then the group could be tested together.\nThis could lead a huge amount of flexibility in testing where whole sections of the system could be started and\nstopped for a single test of their interfaces.\nI find that it is commonly true that interfaces betweeen components are a source of bugs, so this kind of\nisolated interface testing could be a huge gain for a Rustic Flight Software.\nImplementation\nI've done some experiements implementing this kind of archtitecture in C, and I found that while it is possible,\nit is certainly not what I'm used to doing in flight software. There is a certain amount of indirection- in my\nimplementation abstracted function calls take a pointer to a struct containing function pointers (basically\na Trait object). \nThis does work, but I haven't been able to think of a path in which this effort goes anywhere- I would have to\nre-invent an entire flight software system for this to work. While it would be cool to do this, and maybe run\nit on some hobby electronics system, if I'm going to put this concept into practice\nI would rather do it in Rust and see if a Rustic Flight Software system is doable.\nI currently have no plans to start serious work on this concept- I hope to play around with it and see where it goes,\nperhaps building tiny systems to see where it works and where it doesn't. However, I have so many other\nprojects with more immediate gains to be had, while this one is more an idle concept for now. That is one\nof the reasons I wanted to write this post and get the idea down while it incubates in my subconcious.\nPrototype\nA minimum prototype of this concept might have the following pieces:\n\nA crate implementating the interface registry concept.\nA group of crates with interface traits and types, as well as the testing implementation\nof the interface.\nA group of crates with implementations of those interfaces. This would be limited to some\nbasic interface for the prototype.\nA crate that combines these pieces into a single project, depending on interface and implementation\ncrates, and loading (dynamically or statically) a system made out of these parts.\n\nThe components I would probably start with would be a software message/event message component (because\nit should be simple), a software bus (because it is a fairly central service), and perhaps a time\ninterface (because it is different from the other two). \nThe final system would ideally run in Window and Linux, and do some kind of communication between components.\nIf it was integrated with COSMOS and could be commanded and provided telemetry it would go a long way\nto feeling like a legitimate system.\nThe goals for the prototype would be to see the loose coupling of the module system in work, see how Rust's\ntype system helps or impedes modularity in this design, and get some evidence to suggest how Rust fits\ninto this kind of software. I would be interested in things like command/telemetry generation, inspection\nof types, re-use between ground and flight software, testing, safety in memory use and concurrency,\nand what difference show up when flight software concepts are implemented in Rust.\nConclusion\nHopefully this post presents a useful flight software system design and the start of how a Rust flight software\nsystem might have advantages over what is currently available.\nI would very much like to make progress on this, and I will try to keep this blog updated with new posts\nif I do.\n","id":"https://nsmryan.github.com.com/rustic-flight-software-concept/","title":"Rustic Flight Software Concept"},"https://nsmryan.github.com.com/sageiii-launch/":{"body":"The SAGE III payload launched on SpaceX CRS-10 last weekend. I worked on the software for the flight computer for this payload, the IAM, and I got to see the launch.o\nCheck out the technical webcast from SpaceX (https://www.youtube.com/watch?v=rUDLxFUMC9c) at 25:03.\nYou can see the SAGE III Payload inside the Dragon trunk, along with the NVP that the payload mounts to. Its really incredible to see.\n","id":"https://nsmryan.github.com.com/sageiii-launch/","title":"SAGE III Launch"},"https://nsmryan.github.com.com/second-elm-project-circles/":{"body":"I have another little Elm program up. This one just animates some circles with\nrandom sizes and colors. The most interesting thing about it is that it randomly\nchooses among a group of transformations that it applies to a preset list of base colors.\nThis means that the colors are always new and always take characteristics of the hard coded\npalette that I came up with.\nYou can see it here\nThe code is on my github repository in the Elm directory as\ncircles.elm\n","id":"https://nsmryan.github.com.com/second-elm-project-circles/","title":"Second Elm Project- Circles"},"https://nsmryan.github.com.com/second-experience-with-rust/":{"body":"After my first pleasant but failed attempt to use Rust, I decided to try to\ncontribute a crate to the ecosystem. There are a lot of crates out there,\ndepsite the relative youth of the language, so I wanted to find something\nthat was not done and that I knew I could do. It had to be small- I don't have \na lot of time for working on things, and I wanted to be able to see it through\nfrom start to finish. I wanted to see this crate have documentation, tests, and\nan example like a good crate should.\nPeople sometimes suggest definitions and a parser for a file format or network packet\nthat hasn't been done before as a small project, so I decided to try to go through\nroute with CCSDS.  This is a progress report on a half finished library that provides\nthe primary header defined in the CCSDS Space Packet Protocol document.\nCCSDS\nThe CCSDS Space Packet Protocol defines a very simple header called the primary\nheader, as well as a flag indicating whether another header follows.\nThis protocol is used in a lot of space systems, including the International Space\nStation and many satellites. The header is really very simple, containing only:\n\nA version number, currently always 0\nA flag indicating whether a second header follows. In my experience there is always\na secondary header, which usually provides a timestamp.\nA flag indicating whether the packet is a command or a data (telemetry) packet. This is\nan important distinction in space systems, which have an asymmetric communication path\nand treat commands very differently from telemetry.\nA number called an Application Identifier (APID, usually pronouced App-Id, or A-pid). This\nis a project-specific number that identifies the packet, and in some projects identifies\nthe source, destination, and the packet type all in one number.\nAn enum identifying the interpretation of the sequence count. This can be used to split\nlarge packets into several smaller ones. Usually packets are \"unsegmented\" and the sequence\ncount is just a counter, but it can be used to indicate a kind of block number is a series\nof packets.\nA sequence count (14-bits) whose intepretation is based on the sequence flag field above.\nA packet length, giving the number of bytes after the primary header, not including the first\nbyte of data. This is a slightly strange choice- the length is not the length of the data section-\nits the length of the data section minus 1. This is because CCSDS packets cannot have an\nempty data section, so they must have at least 1 byte. The packet length is defined as the number\nof bytes beyond the minimum required data section size. This often leads to increments and\ndecrements in code dealing with packet length to add in and take out this extra byte.\n\nThe Crate, Take One\nMy first attempt to write this crate went well- I found the parsing library\nnom and assumed this was what I needed. In hindsight,\nit was like using Haskell's Parsec\ninstead of Binary\nor Cereal.\nI wrote a simple primary header struct, with enums for the sequence flags, the secondary\nheader flag, and the command/data flag. This is essentially what I would have done in C,\nexcept for the automatic deriving of a debug format, equality, and partial equality. I also\nderived Copy and Clone because I think I'm supposed to, but I'm not sure- in C you would not\nhave to think about these things. In the Haskell approach you want to\nderive a bunch of typeclasses to tie your data into the ecosystem and language a bit,\nbut I'm not sure what the right Traits to tie into are for Rust.\nI wrote a Nom parser that could read off the primary header and put it into this struct.\nI was able to get the Nom version working after some experimenting and looking at other crates.\nI was used to the Haskell style where parser combinators are a data structure and we just\ncombine them with combinators and a Monad instance. The macro style felt unfamiliar and made\nwe worried that I didn't understand what the code was doing since it defines a language\nwithin Rust for defining these parsers, but I found it easy enough to use and for my\nneeds it was a simple task to get working.\nThen I realized that I wanted to both read and write packets, and Nom was only for parsing.\nOh well, time for take two.\nThe Crate, Take Two\nI looked around for how people do serializtion and deserialization in Rust. There are usually\ntwo types of libraries for this task- ones that use a format like CBOR or a language-specific\nformat like EDN for Clojure where you want to serialize and deserialize data in your language,\nand libraries that provide ways to lay out memory explicitly where you are going to \ntransfer it over the network or interact with hardware. I'm usually in the second camp, where\nthe format I want isn't one of the popular formats, and I have to lay out data explicitly in\nmemory. I've used Haskell's binary for this, and of course done it in C many many times without\na library.\nLooking for this kind of thing in Rust, I started to look at serde.\nHowever, it seems to only support these serialization formats, and not the explicit memory\nuse style. There are a number of different formats supported, and I like the idea that you\ncan break the language down into a small(ish) number of cases (like Haskell's GHC Generics or\nGenerics SOP). The Rust equivalent seems to have a good number of cases (29 or something), but\nstill, I like that it is possible.\nUltimately I was able to search around crates.io until I found the\nbytes crate. This seems to be what\nnetworking libraries are using in Rust, and the documentation is great. I'm used to the idea\nof looking around at the data structures and what traits they implement from Haskell and its\ntypeclasses, so I was eventually able to piece together the story of how I would use bytes\nto do CCSDS packets.\nI wrote up this implementation and had the following experience:\n\nImplementing the traits for quickcheck was easy enough, and I could test roundtripping\nserialization/deserialization. This found a couple bit shifting bugs in my implementation! Nice.\nThe Rust idiom of writing a From trait and getting a To trait works pretty well. In C, I would\nhave just cast enums and integers with no extra code, but I don't mind writing more code\nfor more safety. In Haskell, I believe I would have been able to derive the Enum typeclass\nand avoided some of this work, but its not too much trouble.\nTesting is very easy in Rust. I don't know why I find it easier then Haskell exactly,\nexcept that the integration with cargo just seems simplier then \"stack test\".\nThe bit shifting/masking code seems very similar to C. I know there is a bitfield and a \nbitflag crate, but at the time I wanted to try out just doing this stuff by hard as I would\nin C.\n\nOverall, I was happy with the implementation. I don't plan on publishing it though, as I realize\nthat I was forcing the user to deserialize their headers into a data structure with no\nway to act on the raw bits as you would in C. I feel like in a large system I would want to\nbe able to pass packets around and not always have them in a deserialized form depending\non the use-case.\nOh well, time for take three.\nThe Crate, Take Three\nProviding bit-level access to the header seems like it will require either a getter/setter\npair for each field (\"packet_type\" and \"get_packet_type\"), or the use of the bitfields\ncrate. I have not yet completed this iteration, but I am going to work on providing\nboth the deserialized form of a primary header as a struct, and a bitfields version which\ndeals with the header on the bit level.\nConclusion\nAs part of my desire to contribute to the Rust community, I'm trying to write up my experience\nHaskell in this regard because of Haskell [language-c][http://hackage.haskell.org/package/language-c]\nlibrary, which provides a nice way to parse C. I know you can use the Rust clang, but\nI'm worried that with something as complex as a C AST I will get overwhelmed with\ncomplexity if I don't use Haskell.\n","id":"https://nsmryan.github.com.com/second-experience-with-rust/","title":"Second Experience with Rust"},"https://nsmryan.github.com.com/some-fun-algorithms/":{"body":"There are many interesting algorithms and data structures out there, but here are just some that I like.\n\n\nHyperloglog- This is a algorithm for getting an approximate count for a large number of items in very little space.\nIt requires only a single pass through the data, which is useful for when not all elements can be held in memory at one time.\nThe paper is available here for a complete description,\nand here. is a blog post\ndescribing the algorithm.\nThere is also a Haskell implementation.\n\n\nJump Flooding Algorithm- This is an algorithm for creating a discrete voronoi diagram on the GPU in log(n) time where n is the larger of the\nwidth and height of the grid. This also works just as well in 3D, its just easier to talk about a grid then a 3D space.\nThe main idea is to propogate information about the nearest neighbor of a cell around the grid by having each cell look not at its\nimmediate neighbors, but at the cells n/2 cells away, then n/4, then n/8, etc. This halving is what gives this algorithm its log time complexity.\nThe original paper is good, as well as some useful [variations](http://www.comp.nus.edu.sg/~tants/jfa/JFA-Variants.pdf].\nI have also used it to produce a signed distance transform of an image in Unity, based on this blog post.\n\n\nHash Array Mapped Tree- This data structure provides some really nice asymptotics for a sequence data structure. The complexity of some operations is \nconstant because the tree has a maximum depth, so it can only require so many operations to walk down in the worst case.\nA paper\nThere are other interesting sequence structures like Finger Trees and Relaxed Radix Balanced Trees.\n\n\nDiscrimination- Sorting in linear time, as well as other operations involving grouping objects.\nThe idea here is that you can perform these operations, sorting in particular, on generic data structures. I haven't looked into much more\nthen the talk (by Edward Kmett), but he talks about applying radix sort and American flag sort to generic data, as well as a whole\ndiversion into a vocabulary of contravariant functors and other fun things.\nThe page of the author, the Haskell implementation,\nand a talk about the Haskell implementation.\n\n\nGenetic Algorithms- I should mention these, since I have been interested in them since Grad school. I won't go into detail here- they are\ndiscussed in thousands of places. I just want to mention some of the interesting variations like Gene Expression Programming, Genetic Programming,\nPopulation Based Incremental Learning, Grammatical Evolution, and Developmental Evolution. Every part of Genetic Algorithms has been investigated,\nso there are a huge number of variations in operators, population structure, individual structure, etc.\n\n\nLearning Classifier Systems- These are a very cool variation of Genetic Algorithms. They describe a system that takes input (say, from\na sensor), and determines an output by matching a series of templates against the input. The templates that match include an action to take,\nas well as extra data depending on the variation of this algorithm such as the expected payoff of the action.\nThese systems are interesting because the templates are created by a Genetic Algorithm which is evolving an entire population that collectively\ndetermines the system's behavior. The contents of the matching templates, as well as the actions and some of the extra data, are the subject\nof evolution.\nThe fun thing about this algorithm, which is really a whole family of algorithms), is that it takes Genetic Algorithms from an optimization\nalgorithm to something that reacts to an environment. I find this a fascinating transformation.\n\n\nCondensed Probability Tables- This is a case where a technique that was not feasible when it was invented (due to memory constraints) is now\neasily useable and very fast. It essentially precomputes a table used to sample from a certain discrete probability distribution.\nYou just give a series of elements and a weigh or probability, and you can get a constant time sampling from that distribution.\nFor an example, here is a Haskell implementation.\n\n\n","id":"https://nsmryan.github.com.com/some-fun-algorithms/","title":"Some Fun Algorithms"},"https://nsmryan.github.com.com/third-elm-project-split/":{"body":"A third elm program!\nTry pressing any key to split the line as it grows.\nThe program is here\nThe code is on my github repository in the Elm directory as\nsplit.elm\nHave fun.\n","id":"https://nsmryan.github.com.com/third-elm-project-split/","title":"Third Elm Project-Split"},"https://nsmryan.github.com.com/this-blog/":{"body":"This blog has been a project in itself for me. I was inspired by Chris Done's blog which sets up a nice workflow for a static site.\nI wanted to include Haskell in more of my projects, so having a site generated by Haskell was a big incentive.\nThis blog is generated by Hakyll, hosted on Linode by an Apache server, and stored on github\nThe server setup was perhaps the most difficult for me, so I took the easy way out and installed one of the pre-made configurations available for linode which installs a LAMP stack.\nThe only configuration change I made was in /etc/apache2/sites-available/ where I set the default directory to /var/www/itscomputersciencetime.com.\nThe Hakyll part is fairly easy. I created a cabal file (so I can use cabal sandboxes) but the main thing is just building and running the sample Hakyll file. At least initially I have made no changes to the sample site and sample site generating code.\nThe Hakyll preview command is quite useful for checking out posts before committing them. Once they look the way I want, I commit them to github and then pull them from the linode server. This isn't as fancy as Chris Done's approach, which was more automated and worth looking at.\nFinally, on the linode server I build the site into the _sites directory which is a symlink to /var/www/itscomputerscience.com.\nThis process is more complex then I would like. I need to perform multiple steps before adding a post, which will likely turn out to be too much work. I would like to do everything locally and have the site update and build itself.\nThats it for now. I'm glad to be blogging again, and this time with a personalized setup that involves Haskell.\n","id":"https://nsmryan.github.com.com/this-blog/","title":"This Blog"},"https://nsmryan.github.com.com/vim-keybindings/":{"body":"If you are interested in improving your productivty with Vim, its worth checking out\nother people's .vimrc files. There are many github repositories with personal dot files,\nincluding my own config files.\nOne that has helped me a lot is begriff's\nhaskell-vim-now\nand blaenk's dot files. Incidentally, their blogs\nbegriffs and blaenkdenum\nare worth checking out.\nI thought I would go over some of my configuration, covering both old and new features\nthat I find useful.\n\nComma as Leader\nnnoremap ,, ,\nlet mapleader=\",\"\nI used ** as the leader key for several years before moving to ,. I find that , is\neasier to type because it is closer to the home row. This is a minor change, but making\ncustom key bindings behind leader easier to type makes you use them more, so its important\nto find a key that works well for you.\nRelative Line Numbers\nset invrelativenumber\nFirst of all, set number puts line numbers on the left side of a window. I thought this\nwas what I wanted, but it turns out that absolute line numbers are less useful than relative\nline number: set invrelativenumber.\nThis took some getting used to, and I almost went back to absolute numbers. However, after a\nwhile something clicked for me and I almost never use absolute line numbers anymore.\nRelative line numbers are much better for navigation- vim motion commands that take line\nnumbers often need relative numbers. Now I can look at a line and see the number I need to\ntype to get there with j or k. This is also useful in line selection mode.\nI did map ,er to toggle relative line numbers for when I do care about absolute line numbers,\nlike during a code review.\nHighlight Search\nset hlsearch\nThe option set hlsearch highlights the current search term. This is useful for finding\noccurrances of a pattern, like highlighting tabs with /\\t or uses of a variable name that\nis under the cursor with *. You can remove the highlighting of the last search with :noh,\nor map it to something like ,h.\nLeave Insert Mode\ninoremap jj \nI found a nice trick for quickly leaving insert mode without typing ctrl-esc. I've been\nusing ctrl-[ for almost as long as I've been using vim to avoid having to move up to\nthe esc key, but recently I've also added jj as an option. This key combination almost\nnever comes up, and it is easy to type. This cuts down on using my pinky fingers which reduces\nthe strain on my hands.\nSaving Current File\nnmap m :w\nTyping :w is another key combination that can strain my hands, especially since I'm a\ncompulsive saver. I have conciously reduced the number of times I save, but I've also added\nthe key binding ,m as a quick and easy alternate to :w. This works well with the previous\nbinding jj so I can type jj,m to leave insert mode and save my changes.\nSelect Last Paste\nnmap v V`]\nI find that I frequently need to edit text that I've just pasted- either to realign it or\nreformat in some way. There is already V`] for this, but I find it easier to remember ,v.\nBuffers\nset hidden\nmap  :bnext\nmap  :bprev\nnmap  :b#\nnmap et :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,\nI used tabs for years before understanding the advantages of buffers. If you still use tabs,\nor use neither, I highly recommend trying out buffers for a while. This has been one of the\nbiggest changes in my workflow- I can't stress it enough. My workflow with tabs was clunky\nand didn't scale well. With buffers, once you are used to moving between them, you can have\na huge number of open files and still navigate. The speedup using buffers in vim compared to\ntabs in vim or in an IDE (I use eclipse at work) is huge.\nTo facilitate using buffers, I recommend the set hidden option to allow buffers to be\nopen with unsaved changes. Without this, buffers would be a huge pain to use.\nI also recommend addding key bindings to cycle through buffers. You will usually use :b and\neither the buffer number (use :ls to get a list of buffers and their numbers) or part of the\nfile name to switch better buffers. However, if you have two files open, or you need to look\nthrough all open files, its nice to have a quick cycling keybinding.\nI use ctrl-j and ctrl-k for cycling, and tab for switching with the \nlast buffer viewed. I also have a map I found online for ,et to toggle between .h and .cpp\nfiles since I use C++ at work. This finds the file with the same name but the opposite extension\nand switches to that buffer, if it is already open.\nDon't Redraw\nset lazyredraw\nThis option prevents redrawing the screen while vim is executing macros. I often use macros to \nreformat huge text files (often datasets) at work, and I've found that redrawing the screen \nslows these down a huge amount. I used to just minimize the vim window, but this option makes \nthis easier by preventing the redraws in the first place.\nIf this is a problem for you, I also recommend using the :g command and :s when possible-\nthey are much faster even on files with millions of lines.\nDon't Show \"Hit Enter\" Prompts\nset shortmess=a\nIf you find the \"Hit Enter\" prompt that comes up when there are messages to confirm, then set \nthis option. It will supress these prompts. You can always use :messages if you want to\nreview the messages anyway.\nHex Editor\nnnoremap  :call ToggleHex()\nYou can find a definition for a function ToggleHex on the vim wiki\nThis keybinding toggles between viewing a file as hex and viewing it as text. I've been using\nthis for years, and although its not the best hex editor in the world, I do like having the\npower of vim when viewing and editing hex.\nThis binding is mostly useful if you deal with binary formats frequently- I do embedded systems\nprogramming at work so this comes up all the time. These are better editors out these, including\nsome quite expensive ones, but this one command gives me most of what I want without a separate\nprogram.\n\nThats some of the bindings and options I use often. There are many others, some much more\nsophisticated then mine. A .vimrc file accumulates features over the years, and every so often\nits worth looking them over and deciding what you need to automate to write better code, what\nyou spend the most time doing, and what small tweaks make your editing experience better.\n","id":"https://nsmryan.github.com.com/vim-keybindings/","title":"Vim Keybinding and Options"},"https://nsmryan.github.com.com/vim-plugins/":{"body":"I've been using vim/gvim for about 8 or 9 years now, but I stopped improving my\nvim experience after I reached a certain level of proficiency.\nRecently I've made some huge improvements to my vim workflow that has rekindled my interest\nin vim and made my daily life much better.\nI have nearly 30 plugins right now, but I thought I would list some of the more important\nones here. My hope is that this helps someone else improve their vim experience.\nPlug\nI tried several plugin managers, and I was using Vundle for a while. However, I found that\nit didn't work well on Windows, and instead of messing around with it I started using the\nvery simple Plug plugin. Now I just list the plugins in want in my .vimrc, and when I need to\nupdate to setup a new system I just run :PlugInstall and watch it download all my plugins.\nNice.\nCtrl-P\nThis plugin gives you a fuzzy file search with the default keybinding ctrl-p. This means that\nyou can type \"ctrl-p cabal\", for example, and it will list the files with that name. You can\nselect a file and press enter to open it in a new buffer. This is much faster for opening new\nfiles if you know the name of the file you want to open.\nIf you don't know the name, or you want to explore files, there is always NERDTree.\nNERDTree\nI finally installed NerdTree, which is a much better file explorer then the build in\none in vim. I have it mapped to ,n to toggle the left pane with the file explorer.\nI also have been using rooter to set the current directory, which makes using NERDTree even nicer\nbecause it always opens in the current directory, or in the root of the current project.\nRooter\nThis one just sets the current directory to the project root. It detects certains files\n(which is extendable) to determine where the root directory is. These are things like\nsource control configuration files, but you can add .cabal or any other file if it makes\nsense for your project.\nSolarized\nI used the colorscheme desert for a long time, but it is not perfect. Some research revealed the\ncolorscheme Solarized. I recommend it for most tasks.\nThe color of comments or plain text is a little light for me, so I also have the colorscheme\ncorporation installed, and I switch between them with ,ec for corporation and ,eo for solarized.\nFor example, I'm writing this post in corporation because on this monitor the white text is\nsharp and visible, while on my work computer it is too bright and I would use solarized.\nBoth use very rich oranges and some nicely desaturated colors which I find very pleasing to look at.\nTabular\nThe code I write for work (C/C++ embedded system code for space and aero at NASA) has become must\nbetter formatted since I found tabular. I usually use it to select a couple of lines of code\nand align them on \"=\" or \",\".\nIt may seem like a small thing, but making good formatting easy means that I do it more often, and\nits a noticable difference in the code I produce.\nTagbar\nThis is a fantastic plugin that gives you a bar displaying the symbols defined in your code.\nThis is something I used to miss from eclipse when using vim but no longer!\nI have it mapped to \",g\" so I can toggle it on and off. Screen space is too precious to keep it\nup all the time, but its great to have when you want it.\nOthers\nI have also installed Fugitive, sneak, easy-motion, syntastic, ack, vim-textobj-user, and some\nHaskell specific plugins like ghc-mod, haskell-vim, and neco-ghc. I haven't looked into these\nmuch, but the whole text-obj concept is worth looking into to understand vim, ack seems like\na huge help in finding things in large projects, syntastic closes the gap for me between vim\nand an IDE, and sneak and easy-motion seem nice in principal even though I haven't been using them\nmuch.\nThat is a selection of the plugins I have found interesting. I have also found some keybindings\nand vim tricks recently that I will discuss in another post.\n","id":"https://nsmryan.github.com.com/vim-plugins/","title":"My Vim Plugins"},"https://nsmryan.github.com.com/vxworks-tricks/":{"body":"I had never heard of VxWorks before coming to NASA, but now I have been using it for \nover 5 years. I thought I would write down some things I've learned- some tricks and\ncommands, concepts it uses, and larger scale considerations for programs written\nfor it.\nIn some ways, using VxWorks is simpler than, say, Linux. Once you spawn your tasks in\nusrAppInit they just run- there is no file system assumed, very few other tasks, and very\nfew concepts to learn. A particular BSP (board support package) may have its own complexity,\nbut VxWorks itself is surprisingly simple. Code written for it will have only a couple \nof special types and a couple of libraries like msgQLib, semLib, taskLib, and for the\nmost part the operating system will just get out of your way. This\ndoes have downsides when you wish certain features, primitives, programs, etc were\navailable. The situation seems to be getting better and better with new versions, but\nyou are sometimes at the mercy of your BSP.\nNote that I've used VxWorks 6.7 for most of the development I've done, and only recently\nstarted to use VxWorks 7.0. I haven't used the new command line features much, the new\nconfiguration system, or many of the new libraries. It seems much more complex, but\nsome of the libraries provide standard was to access hardware that are much better then\nusing system specific libraries for each project.\nI also haven't used the RTP features even in 6.7- we build a single kernel module which\nruns in a single memory space.  This is simple, but less safe then the alternative.\n\nCommand Line\nFirst off, the VxWorks command line is indespensible. I have used VxWorks 6.7 for almost\nthe whole time I've been at NASA, and I haven't gotten accustomed to the new VxWorks 7.0\nextended command line, so these commands are for the default one that the system boots up\ninto in 6.7 and 7.0\n\n\ni The information command i lists the current status of all VxWorks tasks.\nI mostly use this for task status in case a task is suspended, making sure a task is present, \ngetting the task id to use with another command, or for checking for errnos in tasks.\n\n\nti The task information command takes either the task name or the task id number and prints\na detailed description of the task and its current status. I usually need this when a task\ncrashes and I want to look at the exception, the program counter, the stack pointer, and\nthe memory location that cause the crash for a memory access exception.\n\n\ntt The task trace command shows the current stack trace of a task. This is useful for\nquickly finding the code that caused a trask to crash even without the debugger provided\nby Workbench. Note that this command attempts to build a stack trace by inspection of the state\nof the tasks stack- if there is memory corruption then it can be wrong.\n\n\nl The list command takes a memory location and produces a disassembly of the memory at that\nlocation. It can also take a count of how many instructions to print.\nIf you don't mind reading assembly, this can be a huge help. I've used it to understand stack\ncorruption problems, and to debug a very tricky problem that turned out to be caused by\nloading a floating point number from a misaligned address on a PowerPC processor.\n\n\nd The dump command displays the contents of memory at a given location. It takes the\naddress to display from, the number of items to display, and the size of the items\n(1, 2, 4, or 8).\nThis is one of my most used commands. If you need to inspect memory to understand how\na structure is layed out, find corruption, or inspect a stack then this command is the\nfastest option. Against, you may be able to use the debugger, but more often I just\nwant to look around in memory, and this is the best way to do that.\n\n\nspy The spy command is a quick way to profile processor use. You provide it a period\nand the number of samples per second, and it will print out a report at the end of the\nperiod with processor usage information.\nThe profiling that it does is based on frequently sampling which task is running, and counting\nhow many times each task is observed to be running.\nThis is a command I've only recently discovered, and it immediately uncovered an issue with\nlog files on my current project. A single task was taking 30% to 40% of the total processor\ntime, which is a problem that could have gone unnoticed for a long time and only come up\nmonthes or years down the road.\nNote that you can enable this command the kernel configuration if it is not available to you.\n\n\nlkup The lookup command is another one I use frequently. It takes a string argument and\nsearches for occurrances of that string in all defined symbols. This is a great way to\nfind function names that you can't rememeber, or to inspect a system that you don't have\ncode for to find useful information and functionality.\nOne other use is if your program's symbols get any C++ name mangling.\n\n\nperiod The period command, gives you a way to spawn a process that you want to run \non a period basis. You can use this to monitor or log information periodly and see how\nthings change over time.\n\n\nsp The spawn command lets you spawn any function as a task. One thing I use this for\nis to run a long running function at a lower priority then the command line task. There are\ntwo reasons to do this- one is that you can still use the command line while the other\ntask runs, and the other is that we always have watchdogs in our systems, and if the command\nline task runs too long the task petting the watchdog can be starved, resetting the system.\n\n\nThe defaults that *sp** provides are usually fine, but if you want you can specify\ntask priorities, stack sizes, etc with the taskSpawn command.\n\n\n\nThe last thing I use the command line for is running my own functions. Any function that\nis not declared static can be run from the command line.\nThis is a way to test functions and inspect the system at runtime. I write a lot of\nutility functions, especially early on in a project, as well as units tests to run on\nthe command line.\nNote that the command line doesn't accept floats or doubles, so you have to be\na little tricker there.\n\n\nTasks\nTasks are allocated a single block of memory that contains both their TCB (task control block)\nand their stack. Note that in a kernel module all tasks run in the same flat memory space, allowing\nthem to corrupt each other's memory.\nTask priorities are ordered to that lower numbers mean higher priorities. Priorities greater then\n10 are open for use by user code, with priorities lower than 10 reserved for VxWorks tasks.\nIf you need more control over task scheduling then priorities give you, such as maintaining\na global processing cycle with time slices allocated to different tasks, or a way to easily\nschedule a task at a given rate, or just to monitor running tasks, consider writing a task\nscheduler task. This task can use semaphores to release tasks, monitor that the tasks complete,\nand could even keep statistics on tasks if you wanted. This sort of thing isn't built into\nVxWorks, but it makes a system much easier to reason about as compared to separate tasks all\nscheduling themselves.\nSince VxWorks is a real time operating system, the task with the highest priority that is ready\nto run will have as much time as it needs. Lower priority tasks will be starved forever if\ntasks do not release control by pending or delaying with taskDelay.\nTask scheduling occurs after iterrupts, and in every system call. This is how a msgQSend or\nsemGive or any other call causes a rescheduling- a piece of VxWorks code is run to determine\nif a new task with higher priority can now run.\nIf two tasks have the same priority then a round-robin scheduler is used. I've never used\nthis functionality, but it could be useful for tasks that can trade off control between\neach other when they block.\nOne thing that always come up when talking about task priorities is (re)inversion of control.\nIf a low priority task task a resource, but is interrupted by a higher priority task, then it\nwill of course lose control. If the higher priority task then pends on the resource it will block\nuntil the lower priority task releases it. This is called inversion of control because the lower\npriority task now controls the higher priority one. The problem here is that the lower priority\ntask may not run if a medium priority task is ready, which blocks the high priority task, perhaps\nindefinitely.\nVxWorks deals with this by re-inversion of control- the task priority of a task that takes a\nresource is the highest priority of any task pending on that resource.This means that a low\npriority task with a resource will run until it gives up that resource to prevent it from blocking\nout a higher priority task that is pending on the same resource.\nMessage Queues\nThe main communication we use between tasks are message queues. Message queues\nin VxWorks are great, but they do have some limitations- you can't empty a queue without just reading out\nall of its messages, and they allocate space for the largest message you can receive. This means\nthat if you have a queue that needs to receive a lot of types of messages, and needs to be large,\nyou either waste a lot of space or you need a series of queues of different sizes.\nThis comes up when writing logging tasks that store data from the rest of the system. These\ntasks usually have low priorities and huge queues- you don't want to lose data, but logging can \nhappen at any time.\nIf you split the messages into several queues just be aware that you can't\nsimply pend on the first message from any queue- you have to poll, release a semphore when\nqueuing, use a counting semaphore, or have a \"message description\" queue. The last option is\nwhere you have a separate queue where you queue an indicator of which of the other queues to\nread from- if you receive a small message, you put it on the smallest queue and write\nSMALL_MESSAGE_QUEUED (for exampled) to the message description queue. You can then pend on this\nqueue, and it will tell you which of the other queues to read from.\nInterrupts\nThe main thing to know about interrupts in VxWorks is that you are allowed to release semaphores\nand write to queues with NO_WAIT, but not to take semaphores or to receive messages.\nIf you need to print from an ISR (for debugging) you have to use logMsg from logLib- this will\nlog the message you want to print to a queue which is when printed when the log task runs.\nAnother thing to know about ISRs- when they perform system calls like message queue sends or\nsemaphore gives, the action they request is not actually performed. It is merely logged to a\nglobal queue, and then run when the ISR exits. This prevents inconsistent views of the VxWorks\noperating system state.\nWhen an ISR exits, the system does not simply return to the last running task. There is a piece\nof VxWorks operation system code that performs the ISR's actions and reschedules tasks if\nnecessary.\nAlso note that ISR (interrupt service routines) run in a special interrupt stack (as far as I\nknow). I believe in older VxWorks versions they use the current task's stack, but that was changed.\nIt goes without saying, but I will say it anyway- keep your ISRs short. This is true in any\nsystem- interrupt latency is a global issue. Any time you spend in an interrupt will create\njitter in measurements and hold off other interrupts. Some ISRs have do a lot of work,\nespecially when trying to figure out who caused a hardware interrupt.\nIf you interact with the hardware in your own interrupts, just be aware that things like \ntransactions with hardware, say across a PCI or cPCI bus, are expensive.\nWatchdogs\nVxWorks provides a software watchdog mechanism. You register a function to run after a certain\nnumber of system clock ticks, and VxWorks will call your function is its own system clock tick\ninterrupt. This means that precautions related to writing ISRs apply to watchdog functions.\nI've used these for keeping track of system time, incrementing a counter when the watchdog goes\noff, and for ensuring that certain events occur. The second use is more like what a hardware\nwatchdog would do- if you don't keep rescheduling your software watchdog it goes off and\neither resets the system, or reports a problem.\nThis is especially important in hard real time system where exceeding a time limit is a\ncatastropic problem and there needs to be a fail-safe executed if that occurs.\nRing Buffers\nVxWorks does have ring buffers. Read rngLib documenation for details, but these ring buffers\ndo not perform locking and unlocking- they are intended to be used in a single reader, single\nwriter context between tasks without requiring synchronization. If you need mutual exclusion\nbecause you have multiple readers or writers, you need to ensure that yourself with a mutex.\nThese ring buffers are byte based- you can read and write a whole buffer into the ring buffer\nin one function call, but the buffer itself only knows about bytes. This means you either\nhave to have fixed size messages, a message header, or some other way to know how to decode\nthe data on the ring buffer.\nSemaphores\nVxWorks provides a couple of different semaphore types. Like with message queues, VxWorks doens't\nprovide every nice feature, it just provides simple features with solid implementations.\nThe semaphores that it provides are binary semaphores (mostly for signalling), counting semaphores\n(mostly for resource control), and mutexes (for mutual exclusion of a resource). There is\nalso a shared memory semaphore which I have never used, but is perhaps useful in shared memory\nsystems.\nThese concurrency primitives are common, so I won't go into detail on them in this post.\nThere are certainly other primitives one might want (like MVars or concurrent ring buffers),\nso just note that you might have to implement them yourselve using the primitives VxWorks provides.\nErrno\nVxWorks keeps a task-local errno for each task. You can access this with the variable errno, which\nis just a macro that expands out to an access to the errno field of the current task's TCB.\nThe way to use errno is to check the return of all system calls, and if it is not OK then to\nlook at the errno. You can clear the errno with errnoSet if you know a call will set the errno\nand you don't want it to be left set.\nThe main thing that triggers errnos for me is timeouts on semaphore or queues, and sometimes\ninvalid handles to queues or semaphores. Other conditions are definitely possible though.\nThe one time I actually cleared an errno was to detect when a task overran its allocated time.\nIt was important that the task not start itself in the middle of its time slice, but if it overran\nits time limit and attempted to pend for its scheduling semaphore (released by another task)\nthen it would immediately see that the sempahore had been given and start in the middle of the\ntime slice.\nWhat I ended up doing was attempting to take the semahpore with NO_WAIT as soon as the task\nwas complete, and if this succeeded then the task must have overran its time limit enough\nthat it had been scheduled again. In this case I would wait for the next time slice by\ntaking the semaphore (after reporting the problem of course). If the semaphore had not been given, \nthen the task would just take the semaphore again with a longer wait time.\nTime\nTime is a very complex topic, so I will just mention sysLib and timerLib. Note that your system\nmay has a primary and an auxiliary clock with different rates, and that you may need to set\nthe system clock rate with sysClkRateSet during initialization.\nScheduling wait times and delays usually use sysClkRateGet, and you can connect a callback\nto the system clock with sysClkConnect.\nMake sure you understand time in your system, and if timestamps are important make sure\nyou look at drift with respect to a trusted time source (like a pulse generator) so you\ncan correct for drift in software, hardware, and due to thermal effects on the oscillator\nused for the system clock.\n\nThe documentation I use the most when programming in VxWorks is here.\nVxWorks 7.0 is different in some ways from 6.7, and its worth looking over the documentation of the version\nyou are using to make sure you get the right information.\nThere is a lot more to say about using VxWorks, but I think this is all I can handle for now.\n","id":"https://nsmryan.github.com.com/vxworks-tricks/","title":"VxWorks"},"https://nsmryan.github.com.com/why-i-like-rust/":{"body":"I've been very much into Rust recently. I try to write some Rust every day, and I've\nreleased two crates to crates.io (an implementation of the CCSDS Primary Header, and \nRustic bindings to the C library jsmn).\nWhen asked why I like Rust, I have only been able to give partial answers. I hope this\npost can give a more complete answer. The take-aways are that Rust fulfills a set of\nrequired criteria for use in my work, it provides nice things built in to the language\nand ecosystem, ways of thinkings that\nmake software development fun, and it provides a set of tradeoffs that fit the needs\nthat I personally have in the programs that I write.\nCriteria\nIn aerospace software work, there are some fairly strict criteria on what languages are\neven potential candidates for us to use. Rust manages to fulfill the criteria that I personally\nhave, which is so rare that the only other languages I can think of that do this are C, C++,\nand perhaps Ada (although I've never used Ada). I'm not saying there are no other options, just\nnone that I'm familiar with.\nNo Garbage Collection\nOne example is that a garbage collected language is\na complete non-starter for us- the complexity and lack of control over latency is a real issue. As\nI've noted in other posts, we don't release memory, much less allow it to be collected- you\nask for as much as you need and you stay within those bounds. We also are usually more\nconcerned about latency then about throughput- we often have fast enough processors to do the\nwork, but we need to get certain things done in tight time constraints.\nMemory Layout\nAnother criteria is control over memory layout- we often deal with packets and other structures\nwhere every bit and every byte must be placed correctly in memory. C provides this control, although\nfor bit layout it is either messy or non-portable, but you can do it. If a language does not\nprovide this control, or requires marshalling and unmarshalling into its internal structures, it is\nnot a non-starter, but its a big impediance mismatch that effects a great deal of code.\nMaturity\nImmature languages can be a non-starter. Rust fall into this to a certain extent, but the\ndifference is that it looks like it is going to be around for a long time, while many other\nlanguages that have promised to be safer systems language seem to have faded out or never\nmade it beyond the original group developing them. \nIntegration with C/C++\nIntegration with C, and ideally C++, is a must-have. There is just too much code written\nin C/C++ out there that we depend on to ignore this. Rust's FFI is the best that I've personally used,\nand I've found that bindgen allows very easy binding generation. I would imagine that Rust could\nget into aerospace in small pieces, replacing a module here and there, and interoperation with C/C++\nis what would allow that to happen.\nSimplicity\nIdeally, any language we used would be very simple- the more concepts that you introduce into your\nprograms the more interactions between those concepts are possible, and the more ways you can make\nmistakes. With C++ we deal with that the way I think everyone does- we use a certain subset of the\nlanguage. I could see something like this with Rust- restrict how we use abstraction, probably\nforbid macros, perhaps limit use of Traits, things like that. This would have to be developed out\nof experience developing high-assurance Rust, which I certainly don't have.\nSafety and Restrictions\nThe last criteria that I can see would be restrictions- I want a language that is more restrictive in\nwhat it allows me to do. There are a lot of ways to make mistakes in programming, and I am more concerned about\npreventing mistakes then about moving quickly. I want as large a class of mistakes as possible to be caught\nautomatically and every time I compile so I can focus on the more complex issues and system level problems rather\nthen the low level memory use problems.\nIn this area, I may actually want Rust to be more restrictive then it is, but I don't have enough experience to say.\nRust\nNot only does Rust seem to deliver on all of my requirements, it just feel productive, and it provides so many nice things that make software\ndevelopment a better experience. I was used to an integrated build tool and easy dependancies from Haskell, and \na mess of different tools and difficult dependancies from C/C++. With Rust, cargo has been easier for me to learn\nand less error prone then stack (in my own experience), and I have had remarkably few issues with building and\ndependancies. \nRust feels to me like a mixture of Haskell and C, with good parts of both and very few compromises on each.\nI like thinking and modeling problems in terms of algebraic data types, and I like knowing how my memory is\narranged, and knowing when my code is doing what. As much as I like Haskell, it was hard for me to give up\nthat kind of control, even though I understand the composability advantages of lazyness and the advantages of\nimmutability, I wanted more control, and perhaps I also just wanted more of what I was used to in other languages.\nIn C I feel like I can never go beyond a certain level of abstraction- the language is just too primitive\nto think very abstract thoughts. Very often I don't want abstraction, but when I do it is not available.\nOn the other hand, Haskell is very abstract and we can think thoughts that I would find almost unimaginable\nin C. Rust is a middle ground- there is enough abstraction that I haven't felt confined, but not so much\nthat I don't have control over what is happening. This did cause me some trouble in Haskell, where the barrier\nbetween Haskell and system was always hard for me to cross and feel like I understand exactly what was happening.\nI like the fact that data is immutable by default in Rust, and I am so very, very glad that Rust uses a \ntype-class-like mechanism instead of being Object Oriented. I don't think I would have ever started writing\nRust if it supported, or even just encouraged, object oriented programming. The Trait system has worked out\nwell for me so far, although the syntax can be a bit complex when handling type variables. However, I am willing\nto put up with small things like that for a safer system's language. The automatic deriving mechanism is similar\nto Haskell, where you tie your data types into the language and ecosystem in a very lightweight way. I haven't\ntried to do my own automatic deriving, but at least it is possible.\nThere is not as much advanced type theory as Haskell, but since I don't program in Haskell enough to effectively\nuse much of its abstractions, they were always more of a distraction. In Rust, I just do what works using tools\nthat are more familiar, and it doesn't both me if there is duplication or things aren't perfect the way it would\nin Haskell. This is mostly my own fault, but Haskell programming never felt as productive as I feel in Rust.\nSpeaking of productivity, I like that Rust is fast. I write a lot of C, and I kind of expect performance, so its\nnice to know that I can generally expect high performance on normal tasks in Rust. I know that for many tasks,\nperformance isn't really that critical, but its nice to know you can get it when you need it, and its just nicer\nwhen things are fast.\nThe memory safety of Rust is another huge advantage for me. Its not exactly that we have a lot of memory corruption\nissues at work, but when they do happen they are hard to track down, and can cause very bad things to happen. I\ndon't like knowing that there could be hidden issues buried somewhere in our code base that could cause a crash\nsome time in the future- there is just no way to be completely sure we did everything right everywhere even with\nstatic analysis, reviews, and multiple levels of testing. If we could use a more restricted language, even if only\nfor certain modules, it would reduce the error surface of the code and give me more confidence in its correctness, which\nis a big deal. Its especially a big deal because it is not a separate tool, or a proof in a formal methods system, it is\nbuilt in and run every time you compile- its likely not as complete as a more expensive formal methods approach, say, but\nit is fast and automatic.\nRust also just has nice features, like integrated tests in code modules that reduce the barrier to testing. I can\njust put in a couple quick sanity checks and run them at a moments notice, or every time I save, with no\nextra infrastructure or work on my part. I haven't used the built in benchmarked, but I hope it is as easy\nas testing. That is not to say that I'm doing testing the best way in Rust, but the lower barrier to entry\njust makes it so easy to get started.\nOne features that makes a big difference to me is error handling. The Option/Maybe type and Result/Either type\nare not new to me, but being able to use them in embedded code is a big deal. My C code spends much more time\nchecking for errors then actually doing work, and propagating errors within a code base takes a great deal of\neffort. I've seen places where C's error handling leads to very inconsistent mechanisms even within related code,\nand it is a lot of work to try to ensure all errors are checked, handled correctly, and propagated throughout the\ncode correctly. I like the idea of the '?' operator, and I could imagine it replacing my current strategy of\nsurrounding all code blocks in a check for whether any errors have occurred.  In VxWorks this looks like\nSTATUS result = OK;\n\nresult = XX_SomeFunction();\n\nif (result == OK)\n{\n  result = XX_NextFunction();\n}\n\nif (result == OK)\n{\n  result = XX_AnotherFunction();\n}\n\nwhich would become\nXX_SomeFunction()?;\nXX_NextFunction()?;\nXX_AnotherFunction()?;\n\nI've also just found that when I wanted something, Rust has had an answer that fits well in my use-case. When I wanted\nto generate bindings to a C library, there was bindgen, when I wanted control over my memory layout, there was repr(C),\nwhen I wanted to allow a choice of compile directives when compiling jsmn in the jsmn-rs crate, there was features,\nwhen I wanted to decode binary data, there was bytes. One of the first things I did with Rust was try to cross compile\nit for an ARM board I had, just to see if it would work, and I was amazed by how much easier rustup is to use compared\nto cross compiling in C. \nSome Negatives, to Balance out the Post\nOf course, there are some areas of Rust that are not ideal. I'm will to accept a lot of issues to get all the nice\nthings Rust provides, and I don't expect perfection, so these are not deal-breakers, but they are there.\nOne is that I find the use of macros in Rust a little concerning. I don't like looking at a library, and realizing that\nit is some kind of DSL, the rules of which I have to determine from examples or documentation. They can be very easy to use at\ntimes, but as soon as you want to go off the beaten path, or you need to know exactly how they work, there is a lot of work\ninvolved in decoding them. This is partially my lack of familiarity with Rust macros, but it just makes me wonder what is lacking\nin the language that the best way to express something is a DSL. I'm a fan of DSLs in general, but it just feels wrong to me\nto use them for basic tasks. This is something I need to think more deeply about to understand the core reason they are used\nso much in Rust.\nAnother issue is language immaturity- it would be a hard sell to try to get a newer language used on a large project at work.\nMaybe on a smaller project I could get it in, but there is a lot of trust in experience in aerospace.\nThe Trait system, while I like it in many ways, can lead to situations where it is hard to figure out how to accomplish a particular\ntask. There is enough abstraction that the available functions you can call on a type can be a hunt around documenation. Its not\nbeen too bad for me, and I'm used to this from Haskell, but at times I rely on documentation to provide examples, and have trouble\nfiguring out how to accomplish something due to the amount of type resolution one needs to do in one's head. Again, this hasn't\nbeen a big problem, but the complexity is there, and its very visible in the docs section on Traits for certain types.\nOne aspect of Rust development I have had a problem with occasionally is compile times. They aren't as bad as I had in Haskell,\nbut they don't seem nearly as fast as C. Luckily we have 'cargo check', which helps a great deal, and I think the compile time\nissue has seen a lot of work and is being taken seriously, but its worth mentioning.\nWhen trying out Rust integration with CFS, I have found that the large object files it produces are a problem. If I needed to\nuplink a 3 MB binary file just to update a single module, then it is a problem. I know that there are ways to reduce object\nfile size, but so far my attempts still result in orders of magnitude larger files then I get from C.\nConclusion\nSo far I'm very happy with what I've found in Rust. I feel productive, and I feel like low level programming isn't so much work\nand pain. I feel like I have the level of control that I want, along with enough abstraction to go beyond the confines of C.\nThats all I can think of for now. Rust on.\n","id":"https://nsmryan.github.com.com/why-i-like-rust/","title":"Why I Like Rust"},"https://nsmryan.github.com.com/why-i-use-c/":{"body":"This post is about why I use C for any serious project at work, and why I would\nchoose to use C again even if starting from stratch on a new project.  I am\nhoping to cover where this choice comes from and what advantages and\ndisadvantages it has, specifically for the sort of work that I do. Its not\nintended to be a rant or to put down other languages or processes- I just want\nthis blog to provide some insight into my experiences with what flight software \nis like at NASA Langley Research Center.\nThis choice is certainly not motivated by something as simple as performance-\nits the result of the particular tradeoffs that apply to flight software.\nAll engineering choices have tradeoffs, and have to be understood in\nterms of the costs that apply to a particular situation.  The most important\nthings for flight software, in my experience, are: simplicity, maintanability,\nconsistency, testability, and reviewability. These may not be surprising, but\nthe decisions that they motivate can be very different from the decisions I see\nin other software.\nLanguage choice is a very important- you inherit your ecosystem, tools, and the\nmentality and capabilities of your language as your framework for expressing\nyourself, and its important to think carefully about language when starting a\nproject.  There is some tendency to obsess about languages, but if you are\ngoing to be using a tool for years on a large project, it does merit some\nthought.\nI see places in this post where my thinking may be formed by my choice of\ntools, where my estimate of costs and benefits are from the perspective of the\ntools and practices that I have already chosen to use. I've certainly used\nother languages at work- Haskell, Ruby, Python, Perl, R, MatLab- and outside of\nwork- C#, Lua, Rust, Java, and more. However, my serious development has all be\nin C/C++ and I can't help but see things in the light of my tools. \nMost of these topics deserve posts of their own, but I wanted\nto at least get the ideas down first. It could also use more examples, but\nits become too long and just needs to be posted.\nThe Domain\nThe particular domain I am talking about here is embedded systems\nwork for the flight software systems I have worked on at NASA. These are not\nthe resource contrained systems that some embedded software inhabits- I haven't\ndone microcontrollers for this work, I've only done processor boards with\nhundreds of megabytes of RAM and flash, and processors in the hundreds of\nmegahertz range. They are fairly powerful for what they are- you need to be\naware of resources, and careful about timing and latency, but they don't have\nthe mentality of scarcity that you see in some systems.\nIn this domain, you interact with a number of other systems through some\nhardware interface, you accept commands, produce telemetry, and run one or more\ncomplex algorithm. Your code may never be in its \"production\" environment until\nit is actually in space (or whereever it goes), and if your code fails it can\nbe catastrophic to the project. You don't have easy access to your production\nsystems, and updating code- even for the simpliest change- could take monthes\nof development, review, testing, and operations time. In a sense, you need\nto get things right the first time, and your code needs to operate continually,\nperhaps for years at a time.\nThe Options\nIts easy to rule out huge groups of languages- nothing with a\ngarbage collector is deterministic enough, languages with a virtual machine\ndon't supports all the processors and operating systems we use, and dynamic typing\nis just not an option when correctness is important.\nIn a way, the only options for flight software systems are C and C++. There are\nexamples of other language like Python being used in cubesat projects, or\nassembly for some things. Certainly Ada is used in these domains, but I've\nnever personally come across one of these systems.\nThe only contender that I see entering this space is Rust. All other\nalternatives I've seen never mature enough to be used in serious work, and Rust\nis not there yet. I'm hoping that one day it will prove itself, and become a\ncontender in new projects, but we are not there yet.\nSimplicity\nIn flight software, simplicity is vital. C is a relatively small\nlanguage, and I prefer to only use a subset of the language.  This means I use\nas few syntactic forms as possible, and enforce consistency in as many aspects\nof the code as possible. C could certainly be simplier, but it is at least \npossible to write very explicit C with enough displine. There are certainly\ndark corners of C, but compared to any other language I know, it has to be\nconsidered very simple.\nSimplicity is required here because every language construct and every new\nconstruct interacts with every other one. Each thing that is allowed in the\ncodebase introduces difficultly in reviewing and maintaining code- it is better\nto be safe and rely on only a small group of concepts then to risk some\ninteraction causing a subtle failure. More abstract code can be smaller, which\ndoes aid review and maintanence, but for many of the problem we solve, C is at\nabout the right level of abstraction, and we prefer explicit code to smaller,\nmore indirect code.\nLeast Power\nThis is a case where additional power is often not helpful- its\na principal of least power sort of situation. Most of the problems we solve are\nfairly straightforward- they do not usually require complex algorithms or data\nstructures. For these situations, the cost of abstraction is very apparent. The\nsystems are already complex- you have to be very careful where you add mental\noverhead through abstraction.\nConsistency and Discipline\nI think the consistency, simplicity, and\ndeterminism here would be considered draconian in other programming domains- we\ndon't allocate memory after startup, we almost never free memory, we check the\nresult of every function, we check every pointer for NULL, and we revalidate\nall inputs in every function, even if they are validated in calling functions.\nWe declare all variables at the top of a function, we don't use single letter\nvariables even in loops, we don't call functions in 'if' statements, we use\nconsistent naming of all functions, variables, and globals. These practices are\nenforced to keep the code deterministic, to add in reviewing codebases, to\nensure that errors are caught and do not propagate. Its very pessimistic\nprogramming, and each line of code that accomplish a task is followed by at\nleast 5 lines of error handling, often more.\nC++\nThis is a place where I see a real danger in C++. When I have\nused C++ I have restricted myself to a very small subset of the language, not\nusing templates, inheritance, operator overloading, lambdas- we use it as an\nexpanded C. The advantages you get are not bad- function overloading, default\nparameters, and access to a larger standard library do help. The cost that I\nsee in this is that consistency becomes a much more difficult battle to fight.\nIts like you are standing on a precipice and you have to step carefully to\navoid falling into a pit of complixity. It becomes a battle to keep things\nsimple and choose which concepts to introduce, and it can become very easy to\nmake mistakes. This is not an unjustified fear- I found a case within a complex\nalgorithm where data was allocated at runtime, which is forbidden in our\nsystems. It was not obvious that this was happening- the language left us open\nto an implicit allocation that we were not used to seeing or reviewing for.\nReview\nFlight software must all be reviewed, and code should be as transparent to the\nreviewers as possible. I don't like to see new concepts introduced unless they\nare really providing some benefit- the reviewers cognative overhead should be\nas small as you can make it. Reviewers have to catch a lot of possible mistakes\nin C- it is very easy to corrupt memory in particular- so discipline is required\nto avoid memsets, memcpys, and other functions which can cause corruption. Data\nstructures and algorithm are kept as simple as possible.\nThis might seem like a case against C, but I find that it is very easy in other\nlanguages to introduce new concepts, and very hard to ensure that they do not\nlead to problems. In C++, as soon as I start to see a bunch of classes, my heart\nsinks because I know I'm going to have to jump through hoops to ensure that the code\nis correct. We almost never use inheritance for this reason- I don't want choices\nof what function is called to be determined by the runtime properties of code.\nIn a sense, the advantage to C here is its lack of means of abstraction- the\nway to build complex systems is through procedures. Lacking other mechanisms,\nyou always know how some feature will be built- structs, unions, enums,\n#defines, and functions.  When you review the code, you will not be learning\nsome tower of abstraction, or looking through files trying to find where\nsomething is implemented, or testing your ability to remember some complex\ndispatch mechanism. Its just procedures and data all the way down.\nThe main place where you might not be able to follow the code precisely is when\nfunction pointers are used. We do use function pointers, but only in certain modules,\nand only in fairly simple ways.\nNote that we don't use complex macros, which can lead to some very complex constructions.\nTooling\nPart of tooling for me is LabWindows, VxWorks, CFE/CFS, and a\nflight software architecture used at Langley.  It happens that I am in an\nenvironment that makes a great deal of use of C, so naturally it is more\nconfortable to keep it that way. VxWorks is one example where C++ fits,\nbut for the others, C is the native language.\nSome advantages here include being able to port code between an embedded system\nand a LabWindows tool, and making it easier to support compiling an subset of\nthe embedded code on a desktop. Certainly this can be done in C++, but I've\nalways found it simplier to do with C then C++.\nAnother part of tooling is that the C language is simplier then C++, and easier\nto integrate with FFIs such as Lua or Python, and just simplier overall.  This is an\nexample of the downstream costs of complexity that effect every tool and\nconcept involved in your code.\nNearly all FFIs seem to be for C, and support for C++ is partial and far more\ncomplex. Parsing C++ is hugely complex, its name mangling is a pain, and its\nsize makes it unmanageble when a high degree of control is required.\nDisadvantages\nSafety\nIf I could express at least some of my code in a safer language, use\nmore modern programming concepts, and have more algorithms and structures\navailable, I would be more productive. There are many places where its easy to\nget bitten by the C/C++ scalpel, or to find that we can't be sure of\ncorrectness of a section of code without a great deal of work. We handle this\nwith stringent practices, review, unit testing, and system testing, but I would\nprefer to not have to worry about some of the problems that lurk in most C/C++\ncode.\nSomething like ivory, Rust, or\none of the other safer but still low level languages might be doable one day,\nand I would love to incorporate it into a smaller project and see if it helps.\nHowever, we have to be pessimistic in our evaluation and only use languages and\ncode that we trust in this domain. No research or untested code can be used in\nthe large projects- we have to make the best decision as engineers who are\nfollowing a process. We can't afford costly bugs or code that we don't\nunderstand fully, and we already have so much infrastructure and so many\npractices built around the C/C++ paradigm that its very hard to make any other\nchoice. We have to estimate cost and schedule, and use operating systems,\ndrivers, and board support packages written in C/C++. This is where Rust's\nability to be integrated into and to talk to other code could be its critical\nfeature to find its way into high assurance code.\nLevel of Abstraction\nFor some tasks, the level of abstraction in C is about\nright- moving data around, interacting with hardware, and doing simple tasks.\nCertainly I wish it were better with things like endianness and bitfields, but\nwe work around its shortcomings. However, sometimes its limitations do\nbecome confining rather then freeing and I wish for a different level\nof abstraction.\nI see places where using the same language for everything means that it is\nalmost never at exactly the right level of abstraction. The language\ntower is a good example of where\nsystem architecture could be domain specific language, leaving implementation\ndetails to another language.\nIn some code, I would love to have a separate language, or subset of a language,\nwhere additional checking could be done, or which does not have ways of expressing\nunsafe code. This is another principal of least power situation- I would like\nthe option to use less power when appropriate, but in C you have full power all the\ntime.\nThe other place I see this is in complex algorithm The lack of abstraction and\nbuilt-in tools can make this code more complex then necessary, and it is a\nplace where translating from another language does make sense. This is done in\nsome systems- I've heard of Simulink used this way- but even with this strategy\nyou face issues with trusting the algorithm code.  You have to make some\ndecisions on how to review it, test it, and ensure maintain it  as part of the\nrest of the system.\nC++ certainly has a lot of power, and I could see it being a step in the right\ndirection in some cases. My main relunctance for these algorithms would be\nwanting to avoid introducing too many new concepts- each new concept and its\ninteraction with other concepts in the code adds complexity and overhead into a\nlargely manual review and testing process. I could see some of this being\naleviated by better tooling that could replace manual components, but I still\nthink adheritance to simplicity is an important thing to hold on to.\nType Safety\nC is not a type safe language. There are certain things it will\ncatch, but in many cases the correct use of types is up to the programmer.  It\nis not dynamic, but we can cast pointers freely, and the language does not help\nus avoid issues with memory use. We can cast incorrectly, index off of arrays,\nand overwrite memory almost anywhere.\nOne argument for C++ would be the ability to express more in its type system,\nand the ability to more clearly express and check casts.  I'm not well versed\nin this style, so it is hard for me to evaluate how this relates to my work.\nThere may be an intermediate where some safety can be gained with very little\ncomplexity that would improve overall code quality.\nDiscipline\nSome of the advantges to developing in C come from strict discipline in development,\nrather then something provided by the language. I would love to have a language\nthat would aleviate the manual work we do in reviews to make sure we do things\nsafely and catch error cases. Again, in principal C++ can help with this, but\nI haven't been willing to accept the cost of increased complexity that it brings.\nConclusion\nLook back, this post has as much about disadvantages as it has about advantages.\nI think what this tells me is that we live in a messy and imperfect world, where\nthe tool that provides the best results comes with a host of disadvantages that we\nlive with. If there were a language without the edge cases, the portability issues,\nand with simplier syntax and fewer choices, which caught more mistakes in safety\nand memory usage, I would use it, but it does not exist.\nI wonder if using Ada could result in safer and better code, or some subset of\nC++ chosen for flight software. Or maybe Rust will take over everything. I\ndon't know, but for now, when I'm writing code that has to be correct, I\nuse C.\n","id":"https://nsmryan.github.com.com/why-i-use-c/","title":"Why I use C for Flight Software"}},"docInfo":{"https://nsmryan.github.com.com/":{"body":0,"title":1},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-1-direct-coupling/":{"body":1338,"title":6},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-2-registration/":{"body":758,"title":5},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-3-message-bus/":{"body":828,"title":6},"https://nsmryan.github.com.com/abstraction-in-flight-software-part-4-dispatch/":{"body":1720,"title":5},"https://nsmryan.github.com.com/algebraic-data-types/":{"body":864,"title":3},"https://nsmryan.github.com.com/archive/":{"body":1,"title":1},"https://nsmryan.github.com.com/awesome-c-libraries/":{"body":451,"title":3},"https://nsmryan.github.com.com/bit-pattern-visualization/":{"body":123,"title":3},"https://nsmryan.github.com.com/ccsds-router/":{"body":240,"title":2},"https://nsmryan.github.com.com/cello/":{"body":229,"title":1},"https://nsmryan.github.com.com/cfe-cfs-architecture/":{"body":1000,"title":2},"https://nsmryan.github.com.com/decoding-with-session-types/":{"body":264,"title":3},"https://nsmryan.github.com.com/fifth-elm-project-cursortrail/":{"body":20,"title":5},"https://nsmryan.github.com.com/first-elm-project-lines/":{"body":18,"title":4},"https://nsmryan.github.com.com/first-elm-webgl-shader/":{"body":50,"title":4},"https://nsmryan.github.com.com/first-experiences-with-rust/":{"body":595,"title":3},"https://nsmryan.github.com.com/first-post/":{"body":13,"title":2},"https://nsmryan.github.com.com/flight-software-architecture/":{"body":1781,"title":3},"https://nsmryan.github.com.com/flight-software-components-events/":{"body":1087,"title":4},"https://nsmryan.github.com.com/floating-bar/":{"body":75,"title":3},"https://nsmryan.github.com.com/fourth-elm-project-quad/":{"body":57,"title":4},"https://nsmryan.github.com.com/functional-programming-conference-videos/":{"body":80,"title":4},"https://nsmryan.github.com.com/generic-c/":{"body":753,"title":2},"https://nsmryan.github.com.com/git-working/":{"body":27,"title":3},"https://nsmryan.github.com.com/handles-for-abstraction/":{"body":1604,"title":2},"https://nsmryan.github.com.com/interests/":{"body":144,"title":2},"https://nsmryan.github.com.com/introduction-to-flight-software-cfe-cfs/":{"body":514,"title":5},"https://nsmryan.github.com.com/just-rust/":{"body":114,"title":1},"https://nsmryan.github.com.com/layers-of-movement-in-vim/":{"body":1144,"title":4},"https://nsmryan.github.com.com/lua-games/":{"body":255,"title":2},"https://nsmryan.github.com.com/lua-tables/":{"body":469,"title":2},"https://nsmryan.github.com.com/more-fun-algorithm/":{"body":593,"title":3},"https://nsmryan.github.com.com/my-current-tool-set/":{"body":752,"title":2},"https://nsmryan.github.com.com/note-on-radiation-tolerance-of-stored-data/":{"body":1226,"title":5},"https://nsmryan.github.com.com/processing-particles-art/":{"body":105,"title":3},"https://nsmryan.github.com.com/programming-languages-i-have-used/":{"body":162,"title":3},"https://nsmryan.github.com.com/pure-functions-in-embedded-systems-programming/":{"body":810,"title":5},"https://nsmryan.github.com.com/purely-functional-genetic-algorithms/":{"body":918,"title":4},"https://nsmryan.github.com.com/rust-ccsds-primary-header-crate/":{"body":304,"title":5},"https://nsmryan.github.com.com/rust-has-the-best-names/":{"body":25,"title":3},"https://nsmryan.github.com.com/rust-in-space-cfs-and-rust/":{"body":651,"title":5},"https://nsmryan.github.com.com/rustic-flight-software-concept/":{"body":1162,"title":4},"https://nsmryan.github.com.com/sageiii-launch/":{"body":38,"title":3},"https://nsmryan.github.com.com/second-elm-project-circles/":{"body":42,"title":4},"https://nsmryan.github.com.com/second-experience-with-rust/":{"body":738,"title":3},"https://nsmryan.github.com.com/some-fun-algorithms/":{"body":350,"title":2},"https://nsmryan.github.com.com/third-elm-project-split/":{"body":18,"title":4},"https://nsmryan.github.com.com/this-blog/":{"body":154,"title":1},"https://nsmryan.github.com.com/vim-keybindings/":{"body":633,"title":3},"https://nsmryan.github.com.com/vim-plugins/":{"body":375,"title":2},"https://nsmryan.github.com.com/vxworks-tricks/":{"body":1536,"title":1},"https://nsmryan.github.com.com/why-i-like-rust/":{"body":1195,"title":1},"https://nsmryan.github.com.com/why-i-use-c/":{"body":1385,"title":4}},"length":54}};